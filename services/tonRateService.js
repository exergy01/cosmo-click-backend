// ===== services/tonRateService.js =====
const pool = require('../db');
const axios = require('axios');

class TonRateService {
  constructor() {
    this.isUpdating = false;
    this.lastUpdate = null;
    this.updateInterval = 60 * 60 * 1000; // 1 —á–∞—Å
    
    // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫—É—Ä—Å–æ–≤ TON (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    this.rateSources = [
      {
        name: 'coingecko',
        url: 'https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=usd',
        headers: {},
        transform: (data) => data['the-open-network']?.usd
      },
      {
        name: 'coinapi',
        url: 'https://rest.coinapi.io/v1/exchangerate/TON/USD',
        headers: { 'X-CoinAPI-Key': process.env.COINAPI_KEY },
        transform: (data) => data.rate
      }
    ];
  }

  // üåü –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö API
  async fetchTonRateFromAPI() {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TON –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
    
    for (const source of this.rateSources) {
      try {
        // –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ –¥–ª—è CoinAPI - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (source.name === 'coinapi' && !process.env.COINAPI_KEY) {
          console.log('‚ö†Ô∏è CoinAPI: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          continue;
        }
        
        console.log(`üì° –ó–∞–ø—Ä–æ—Å –∫ ${source.name}: ${source.url}`);
        
        const response = await axios.get(source.url, {
          headers: source.headers,
          timeout: 10000
        });
        
        const rate = source.transform(response.data);
        
        if (rate && rate > 0) {
          console.log(`‚úÖ –ö—É—Ä—Å TON –æ—Ç ${source.name}: $${rate}`);
          return {
            rate: parseFloat(rate),
            source: source.name,
            timestamp: new Date()
          };
        } else {
          console.log(`‚ö†Ô∏è ${source.name}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å`);
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ ${source.name}:`, error.message);
        continue;
      }
    }
    
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å TON –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');
    return null;
  }

  // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤
  async checkRateProtection(newRate) {
    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å
      const lastRateResult = await client.query(`
        SELECT rate, last_updated 
        FROM exchange_rates 
        WHERE currency_pair = 'TON_USD' 
        ORDER BY last_updated DESC 
        LIMIT 1
      `);
      
      if (lastRateResult.rows.length === 0) {
        return { allowed: true, reason: 'First rate update' };
      }
      
      const lastRate = parseFloat(lastRateResult.rows[0].rate);
      const changePercent = Math.abs((newRate - lastRate) / lastRate * 100);
      
      console.log(`üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞: ${lastRate} ‚Üí ${newRate} (${changePercent.toFixed(2)}%)`);
      
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10% - –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±–º–µ–Ω –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
      if (changePercent > 10) {
        console.log('‚ö†Ô∏è –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON > 10%');
        
        // –ï—Å–ª–∏ TON –ø–∞–¥–∞–µ—Ç - –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±–º–µ–Ω (–Ω–µ–≤—ã–≥–æ–¥–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤)
        if (newRate < lastRate) {
          console.log('üìâ TON –ø–∞–¥–∞–µ—Ç - –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±–º–µ–Ω Stars');
          
          // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±–º–µ–Ω –Ω–∞ 24 —á–∞—Å–∞
          await client.query(`
            INSERT INTO exchange_blocks (exchange_type, blocked_until, reason, ton_rate_when_blocked)
            VALUES ($1, $2, $3, $4)
          `, [
            'stars_to_cs',
            new Date(Date.now() + 24 * 60 * 60 * 1000), // +24 —á–∞—Å–∞
            `TON rate dropped ${changePercent.toFixed(2)}% (${lastRate} ‚Üí ${newRate})`,
            newRate
          ]);
          
          return { 
            allowed: false, 
            reason: `Rate drop protection: ${changePercent.toFixed(2)}%`,
            blocked: true
          };
        } else {
          console.log('üìà TON —Ä–∞—Å—Ç–µ—Ç - –æ–±–º–µ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º');
          return { 
            allowed: true, 
            reason: `Rate increase: ${changePercent.toFixed(2)}%`,
            spike: true 
          };
        }
      }
      
      return { allowed: true, reason: 'Normal rate change' };
      
    } finally {
      client.release();
    }
  }

  // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON –≤ –±–∞–∑–µ
  async updateTonRate(rateData) {
    if (!rateData || !rateData.rate) {
      console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞');
      return false;
    }
    
    const client = await pool.connect();
    try {
      await client.query('BEGIN');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–∫–∞—á–∫–æ–≤
      const protection = await this.checkRateProtection(rateData.rate);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å
      const prevResult = await client.query(
        'SELECT rate FROM exchange_rates WHERE currency_pair = $1 ORDER BY last_updated DESC LIMIT 1',
        ['TON_USD']
      );
      
      const previousRate = prevResult.rows[0]?.rate || 3.30;
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å TON
      await client.query(`
        INSERT INTO exchange_rates (currency_pair, rate, previous_rate, source, status, metadata)
        VALUES ($1, $2, $3, $4, $5, $6)
      `, [
        'TON_USD',
        rateData.rate,
        previousRate,
        rateData.source,
        protection.allowed ? 'active' : 'blocked',
        JSON.stringify({
          protection_check: protection,
          rate_change_percent: ((rateData.rate - previousRate) / previousRate * 100).toFixed(2),
          api_timestamp: rateData.timestamp,
          auto_update: true
        })
      ]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å Stars ‚Üí CS —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
      if (protection.allowed) {
        await client.query('SELECT update_stars_cs_rate()');
        console.log('‚úÖ –ö—É—Ä—Å Stars ‚Üí CS –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        console.log('üö´ –ö—É—Ä—Å Stars ‚Üí CS –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)');
      }
      
      await client.query('COMMIT');
      
      console.log(`üí∞ –ö—É—Ä—Å TON –æ–±–Ω–æ–≤–ª–µ–Ω: ${previousRate} ‚Üí ${rateData.rate} (${rateData.source})`);
      console.log(`üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${protection.reason}`);
      
      this.lastUpdate = new Date();
      
      return true;
      
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON:', error);
      return false;
    } finally {
      client.release();
    }
  }

  // üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
  async startAutoUpdate() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ TON...');
    
    // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    await this.updateRatesCycle();
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    setInterval(async () => {
      await this.updateRatesCycle();
    }, this.updateInterval);
    
    console.log(`‚è∞ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–∞–∂–¥—ã–µ ${this.updateInterval / 1000 / 60} –º–∏–Ω—É—Ç`);
  }

  // üîÑ –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
  async updateRatesCycle() {
    if (this.isUpdating) {
      console.log('‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
      return;
    }
    
    this.isUpdating = true;
    
    try {
      console.log(`\nüîÑ [${new Date().toISOString()}] –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TON –∏–∑ API
      const rateData = await this.fetchTonRateFromAPI();
      
      if (rateData) {
        const success = await this.updateTonRate(rateData);
        if (success) {
          console.log('‚úÖ –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤ –±–∞–∑–µ');
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å TON –∏–∑ API');
        await this.useBackupRate();
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    } finally {
      this.isUpdating = false;
      console.log('üèÅ –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω\n');
    }
  }

  // üÜò –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
  async useBackupRate() {
    console.log('üÜò –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –∫—É—Ä—Å–æ–≤...');
    
    const client = await pool.connect();
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const lastUpdate = await client.query(`
        SELECT last_updated, rate 
        FROM exchange_rates 
        WHERE currency_pair = 'TON_USD' 
        ORDER BY last_updated DESC 
        LIMIT 1
      `);
      
      if (lastUpdate.rows.length > 0) {
        const timeSinceUpdate = Date.now() - new Date(lastUpdate.rows[0].last_updated).getTime();
        const hoursOld = timeSinceUpdate / (1000 * 60 * 60);
        
        console.log(`üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å: ${lastUpdate.rows[0].rate} (${hoursOld.toFixed(1)} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥)`);
        
        // –ï—Å–ª–∏ –∫—É—Ä—Å —Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
        if (hoursOld > 6) {
          const backupRate = 3.30; // –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å
          
          await client.query(`
            INSERT INTO exchange_rates (currency_pair, rate, previous_rate, source, metadata)
            VALUES ($1, $2, $3, $4, $5)
          `, [
            'TON_USD',
            backupRate,
            lastUpdate.rows[0].rate,
            'backup_fallback',
            JSON.stringify({
              reason: 'API unavailable, using backup rate',
              hours_since_last_update: hoursOld,
              auto_update: true,
              backup_rate: true
            })
          ]);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å Stars ‚Üí CS —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫—É—Ä—Å–æ–º
          await client.query('SELECT update_stars_cs_rate()');
          
          console.log(`üÜò –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å TON: $${backupRate}`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞:', error);
    } finally {
      client.release();
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω —Å–µ—Ä–≤–∏—Å–∞
const tonRateService = new TonRateService();

module.exports = tonRateService;