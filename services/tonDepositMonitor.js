// services/tonDepositMonitor.js - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì TON –î–ï–ü–û–ó–ò–¢–û–í

const pool = require('../db');
const { getHttpEndpoint } = require('@ton/ton');
const { TonClient } = require('@ton/ton');
const { Address } = require('@ton/core');
const { notifyTonDeposit } = require('../routes/telegramBot');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON –∫–ª–∏–µ–Ω—Ç–∞
const tonClient = new TonClient({
    endpoint: 'https://toncenter.com/api/v2/jsonRPC',
    apiKey: process.env.TON_API_KEY
});

class TonDepositMonitor {
    constructor() {
        this.isRunning = false;
        this.checkInterval = 30000; // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.lastProcessedLt = null; // –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        this.monitoringAddress = process.env.TON_DEPOSIT_ADDRESS; // –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    }

    async start() {
        if (this.isRunning) {
            if (process.env.NODE_ENV === 'development') console.log('üîÑ TON –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        if (process.env.NODE_ENV === 'development') console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤...');
        if (process.env.NODE_ENV === 'development') console.log(`üìç –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∞–¥—Ä–µ—Å: ${this.monitoringAddress}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –ë–î
        await this.loadLastProcessedTransaction();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.monitorLoop();
    }

    async stop() {
        this.isRunning = false;
        if (process.env.NODE_ENV === 'development') console.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    async loadLastProcessedTransaction() {
        try {
            const result = await pool.query(
                'SELECT transaction_hash FROM ton_deposits ORDER BY created_at DESC LIMIT 1'
            );
            
            if (result.rows.length > 0) {
                // –ü–æ–ª—É—á–∞–µ–º lt –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ hash
                // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å lt –æ—Ç–¥–µ–ª—å–Ω–æ
                if (process.env.NODE_ENV === 'development') console.log('üìã –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è');
            }
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', err);
        }
    }

    async monitorLoop() {
        while (this.isRunning) {
            try {
                await this.checkNewTransactions();
                await this.sleep(this.checkInterval);
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', err);
                await this.sleep(this.checkInterval);
            }
        }
    }

    async checkNewTransactions() {
        try {
            if (!this.monitoringAddress) {
                if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –ê–¥—Ä–µ—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–¥–∞–Ω');
                return;
            }

            // –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å
            const address = Address.parse(this.monitoringAddress);

            // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const transactions = await tonClient.getTransactions(address, {
                limit: 10
            });

            for (const tx of transactions) {
                await this.processTransaction(tx);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            if (transactions.length > 0) {
                this.lastProcessedLt = transactions[0].lt.toString();
            }

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', err);
        }
    }

    async processTransaction(tx) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const inMsgs = tx.inMessage;

            if (!inMsgs || !inMsgs.info || inMsgs.info.type !== 'internal') {
                return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ
            }

            const amount = parseFloat(inMsgs.info.value.coins) / 1000000000; // –∏–∑ nanotons –≤ TON
            const hash = tx.hash().toString('base64');
            const fromAddress = inMsgs.info.src ? inMsgs.info.src.toString() : 'unknown';

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Å—É–º–º—ã (–º–µ–Ω—å—à–µ 0.01 TON)
            if (amount < 0.01) {
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const existingTx = await pool.query(
                'SELECT id FROM ton_deposits WHERE transaction_hash = $1',
                [hash]
            );

            if (existingTx.rows.length > 0) {
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
            const playerId = await this.extractPlayerIdFromTransaction(tx);

            if (!playerId) {
                if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞');
                // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await this.logUnidentifiedDeposit(hash, amount, fromAddress);
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
            await this.processDeposit(playerId, amount, hash);

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', err);
        }
    }

    async extractPlayerIdFromTransaction(tx) {
        try {
            // –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            const inMsg = tx.inMessage;

            if (inMsg && inMsg.body) {
                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    const comment = inMsg.body.toString();

                    // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: "deposit_123456789" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "123456789"
                    const telegramIdMatch = comment.match(/(?:deposit_)?(\d{8,12})/);
                    if (telegramIdMatch) {
                        const playerId = telegramIdMatch[1];

                        // ‚úÖ –§–ò–õ–¨–¢–†: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–Ω—Ç–æ–º–Ω—ã–µ ID
                        const phantomIds = ['00000000', '000000005749', '000000005245'];
                        if (phantomIds.includes(playerId)) {
                            // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            return null;
                        }

                        return playerId;
                    }
                } catch (commentErr) {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
                }
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
            const fromAddress = inMsg?.info?.src?.toString();

            if (fromAddress) {
                const playerByWallet = await pool.query(
                    'SELECT telegram_id FROM players WHERE telegram_wallet = $1',
                    [fromAddress]
                );

                if (playerByWallet.rows.length > 0) {
                    return playerByWallet.rows[0].telegram_id;
                }
            }

            return null;
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–≥—Ä–æ–∫–∞:', err);
            return null;
        }
    }

    async processDeposit(playerId, amount, transactionHash) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            const playerResult = await client.query(
                'SELECT telegram_id, first_name, username, ton FROM players WHERE telegram_id = $1',
                [playerId]
            );

            if (playerResult.rows.length === 0) {
                // ‚ö†Ô∏è –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö ID
                const phantomIds = ['00000000', '000000005749', '000000005245'];
                if (!phantomIds.includes(playerId)) {
                    if (process.env.NODE_ENV === 'development') console.log(`‚ùå –ò–≥—Ä–æ–∫ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
                await client.query('ROLLBACK');
                return;
            }

            const playerData = playerResult.rows[0];
            const currentBalance = parseFloat(playerData.ton || '0');
            const newBalance = currentBalance + amount;

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
            await client.query(
                'UPDATE players SET ton = $1 WHERE telegram_id = $2',
                [newBalance, playerId]
            );

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
            await client.query(
                `INSERT INTO ton_deposits (
                    player_id, amount, transaction_hash, status, created_at
                ) VALUES ($1, $2, $3, 'completed', NOW())`,
                [playerId, amount, transactionHash]
            );

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
            await client.query(
                `INSERT INTO balance_history (
                    telegram_id, currency, old_balance, new_balance, 
                    change_amount, reason, details, timestamp
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())`,
                [
                    playerId,
                    'ton',
                    currentBalance,
                    newBalance,
                    amount,
                    'auto_deposit',
                    JSON.stringify({
                        transaction_hash: transactionHash,
                        auto_processed: true
                    })
                ]
            );

            await client.query('COMMIT');

            if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–µ–ø–æ–∑–∏—Ç: ${playerId} +${amount} TON (–±–∞–ª–∞–Ω—Å: ${currentBalance} ‚Üí ${newBalance})`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
            try {
                await notifyTonDeposit(playerData, amount, transactionHash);
            } catch (notifyErr) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifyErr);
            }

        } catch (err) {
            await client.query('ROLLBACK');
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', err);
            throw err;
        } finally {
            client.release();
        }
    }

    async logUnidentifiedDeposit(hash, amount, fromAddress) {
        try {
            await pool.query(
                `INSERT INTO ton_deposits (
                    player_id, amount, transaction_hash, status, created_at
                ) VALUES ($1, $2, $3, 'unidentified', NOW())`,
                ['unknown', amount, hash]
            );

            if (process.env.NODE_ENV === 'development') console.log(`üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${amount} TON –æ—Ç ${fromAddress}`);
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:', err);
        }
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
const tonDepositMonitor = new TonDepositMonitor();

module.exports = {
    tonDepositMonitor,
    TonDepositMonitor
};