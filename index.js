const express = require('express');
const cors = require('cors');
const { Telegraf } = require('telegraf');
const pool = require('./db'); // üî• –î–û–ë–ê–í–ò–õ–ò –∏–º–ø–æ—Ä—Ç pool –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

const app = express();
const PORT = process.env.PORT || 5000;
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

const cron = require('node-cron');
const { sendDailySummary } = require('./routes/telegramBot');

// üìä –ù–ê–°–¢–†–û–ô–ö–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ô –°–í–û–î–ö–ò –í 12:00 –ü–û –ú–û–°–ö–û–í–°–ö–û–ú–£ –í–†–ï–ú–ï–ù–ò
cron.schedule('0 12 * * *', async () => {
  console.log('üìä –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏...');
  try {
    await sendDailySummary();
    console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏:', error);
  }
}, {
  scheduled: true,
  timezone: "Europe/Moscow" // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
});

console.log('‚è∞ Cron –∑–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 12:00 –ú–°–ö');

// Middleware
app.use(express.static('public'));
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Origin', 'X-Requested-With', 'Content-Type', 'Accept', 'Authorization'],
  credentials: false
}));
app.use(express.json());

// CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');

  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);

  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// TON Connect manifest
app.get('/tonconnect-manifest.json', (req, res) => {
  res.json({
    "url": "https://t.me/CosmoClickBot/cosmoclick",
    "name": "CosmoClick",
    "iconUrl": `${req.protocol}://${req.get('host')}/logo-192.png`,
    "termsOfUseUrl": `${req.protocol}://${req.get('host')}/terms`,
    "privacyPolicyUrl": `${req.protocol}://${req.get('host')}/privacy`
  });
});

// Redirect –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
app.get('/webhook', (req, res, next) => {
  const userAgent = req.headers['user-agent'] || '';
  
  if (userAgent.includes('Mozilla')) {
    const referralParam = req.query.tgWebAppStartParam || req.query.startapp || req.query.start;
    let redirectUrl = 'https://cosmoclick-frontend.vercel.app';
    
    if (referralParam) {
      redirectUrl += `?tgWebAppStartParam=${referralParam}`;
    }
    
    return res.redirect(redirectUrl);
  }
  
  next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.start((ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å–∫–∞–π –∏–≥—Ä—É —á–µ—Ä–µ–∑ Web App!');
});

bot.help((ctx) => {
  ctx.reply('–Ø –±–æ—Ç –¥–ª—è CosmoClick Game.');
});

bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ Telegraf –¥–ª—è ${ctx.updateType}:`, err);
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
try {
  const walletRoutes = require('./routes/wallet');
  app.use('/api/wallet', walletRoutes);
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è wallet –º–∞—Ä—à—Ä—É—Ç–æ–≤:', err);
}

try {
  const tonRoutes = require('./routes/ton');
  app.use('/api/ton', tonRoutes);
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TON –º–∞—Ä—à—Ä—É—Ç–æ–≤:', err);
}

try {
  const starsRoutes = require('./routes/stars');
  app.use('/api/stars', starsRoutes);
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Stars –º–∞—Ä—à—Ä—É—Ç–æ–≤:', err);
}

try {
  const gameRoutes = require('./routes/index');
  app.use('/', gameRoutes);
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:', err);
}

try {
  const miniGamesRoutes = require('./routes/games');
  app.use('/api/games', miniGamesRoutes);
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –º–∏–Ω–∏–∏–≥—Ä:', err);
}

try {
  const cosmicShellsRoutes = require('./routes/games/cosmic_shells');
  app.use('/api/games/cosmic-shells', cosmicShellsRoutes);
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ cosmic shells:', err);
}

try {
  const galacticSlotsRoutes = require('./routes/games/galactic_slots');
  app.use('/api/games/galactic-slots', galacticSlotsRoutes);
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ galactic slots:', err);
}

try {
  const adsgramRoutes = require('./routes/adsgram');
  app.use('/api/adsgram', adsgramRoutes);
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Adsgram –º–∞—Ä—à—Ä—É—Ç–æ–≤:', err);
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ index.js –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–æ–≤:
try {
  const testRoutes = require('./routes/test');
  app.use('/api/test', testRoutes);
  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–æ—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–æ—É—Ç–æ–≤:', err);
}

// üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ê–î–ú–ò–ù–°–ö–ò–ï –†–û–£–¢–´
try {
  const adminRoutes = require('./routes/admin');
  app.use('/api/admin', adminRoutes);
  console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–æ—É—Ç–æ–≤:', err);
}

// üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: Telegram webhook –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ (–ù–ï –ø–ª–∞—Ç–µ–∂–∏ Stars)
app.post('/webhook', (req, res) => {
  const { pre_checkout_query, successful_payment } = req.body;
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–µ–∂ Stars - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–¥–µ—Å—å (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ /api/wallet/webhook-stars)
  if (pre_checkout_query || successful_payment) {
    console.log('üí∞ Stars –ø–ª–∞—Ç–µ–∂ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ /api/wallet/webhook-stars');
    return res.json({ success: true });
  }
  
  // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (/start, /help –∏ —Ç.–¥.) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Telegraf
  console.log('üì® –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞:', req.body?.message?.text || 'unknown');
  bot.handleUpdate(req.body, res);
});

// –ë–∞–∑–æ–≤—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/time', (req, res) => {
  res.json({
    serverTime: new Date().toISOString(),
    message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
  });
});

app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString()
  });
});

app.get('/', (req, res) => {
  res.send(`
    <h1>üöÄ CosmoClick Backend</h1>
    <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</p>
    <p><strong>–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:</strong> ${new Date().toISOString()}</p>
  `);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê:', err);
  res.status(500).json({
    error: 'Internal server error',
    message: err.message,
    timestamp: new Date().toISOString()
  });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app.use((req, res) => {
  res.status(404).json({
    error: 'Route not found',
    method: req.method,
    path: req.path,
    timestamp: new Date().toISOString()
  });
});

// üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ —Å UNIFIED VERIFICATION
const cleanupExpiredPremium = async () => {
  console.log('üßπ === –ù–ê–ß–ò–ù–ê–ï–ú –û–ß–ò–°–¢–ö–£ –ò–°–¢–ï–ö–®–ò–• –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–û–ö (UNIFIED) ===');
  console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toISOString());
  
  try {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ premium_subscriptions
    console.log('üìã –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');
    const expiredSubscriptionsResult = await pool.query(
      `UPDATE premium_subscriptions 
       SET status = 'expired' 
       WHERE status = 'active' 
         AND end_date IS NOT NULL 
         AND end_date < NOW()
       RETURNING telegram_id, subscription_type, end_date`
    );
    
    const expiredSubscriptions = expiredSubscriptionsResult.rows;
    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${expiredSubscriptions.length}`);
    
    if (expiredSubscriptions.length > 0) {
      console.log('   üìÑ –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:', expiredSubscriptions.map(s => 
        `ID: ${s.telegram_id}, —Ç–∏–ø: ${s.subscription_type}, –∏—Å—Ç–µ–∫: ${s.end_date}`
      ));
    }

    // üî• 2. –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–ª—è –ò –°–ë–†–ê–°–´–í–ê–ï–ú VERIFIED
    console.log('üî• –®–∞–≥ 2: –û—á–∏—â–∞–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ò verified —É –∏–≥—Ä–æ–∫–æ–≤...');
    const cleanedPlayersResult = await pool.query(
      `UPDATE players 
       SET premium_no_ads_until = NULL,
           verified = FALSE
       WHERE premium_no_ads_until IS NOT NULL 
         AND premium_no_ads_until < NOW()
         AND premium_no_ads_forever = FALSE
       RETURNING telegram_id, first_name, username`
    );
    
    const cleanedPlayers = cleanedPlayersResult.rows;
    console.log(`   ‚úÖ –û—á–∏—â–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${cleanedPlayers.length}`);
    console.log(`   üö´ Verified —Å–±—Ä–æ—à–µ–Ω —É: ${cleanedPlayers.map(p => `${p.telegram_id} (${p.first_name || p.username})`).join(', ')}`);

    // 3. –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞—É–¥–∏—Ç–∞
    console.log('üìù –®–∞–≥ 3: –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ expiration...');
    for (const player of cleanedPlayers) {
      try {
        await pool.query(
          `INSERT INTO premium_transactions (
            telegram_id,
            transaction_type,
            subscription_type,
            description,
            metadata
          ) VALUES ($1, $2, $3, $4, $5)`,
          [
            player.telegram_id,
            'expiration',
            'no_ads_30_days',
            'Premium subscription expired - verified status revoked',
            JSON.stringify({
              expired_at: new Date().toISOString(),
              verified_revoked: true,
              cleanup_job: true
            })
          ]
        );
      } catch (logError) {
        console.error(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ${player.telegram_id}:`, logError.message);
      }
    }

    // 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log('üì¨ –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏...');
    let notificationsSent = 0;
    
    for (const player of cleanedPlayers) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const { Telegraf } = require('telegraf');
        const notifyBot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
        
        await notifyBot.telegram.sendMessage(
          player.telegram_id,
          `‚è∞ –í–∞—à–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n\nüö´ –†–µ–∫–ª–∞–º–∞ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω–∞\n‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞\n\nüíé –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∏–≥—Ä–æ–π –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã!`,
          {
            reply_markup: {
              inline_keyboard: [[{
                text: 'üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º',
                web_app: { url: 'https://cosmoclick-frontend.vercel.app' }
              }]]
            }
          }
        );
        
        notificationsSent++;
        console.log(`   üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${player.telegram_id}`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (notifyError) {
        console.error(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${player.telegram_id}:`, notifyError.message);
      }
    }

    // 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ UNIFIED –û–ß–ò–°–¢–ö–ò ===');
    console.log(`‚úÖ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${expiredSubscriptions.length}`);
    console.log(`‚úÖ –ò–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω–æ: ${cleanedPlayers.length}`);
    console.log(`‚úÖ Verified —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω —É: ${cleanedPlayers.length} –∏–≥—Ä–æ–∫–æ–≤`);
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notificationsSent}`);
    console.log('üèÅ UNIFIED –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    // 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
    return {
      success: true,
      expired_subscriptions: expiredSubscriptions.length,
      cleaned_players: cleanedPlayers.length,
      notifications_sent: notificationsSent,
      affected_players: cleanedPlayers.map(p => ({
        telegram_id: p.telegram_id,
        name: p.first_name || p.username
      }))
    };

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ UNIFIED –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    console.error('‚ùå Stack trace:', error.stack);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ cron job
    try {
      const { Telegraf } = require('telegraf');
      const adminBot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
      const adminId = process.env.ADMIN_TELEGRAM_ID;
      
      if (adminId) {
        await adminBot.telegram.sendMessage(
          adminId,
          `üö® –û–®–ò–ë–ö–ê UNIFIED CRON JOB!\n\n–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ —É–¥–∞–ª–∞—Å—å:\n\n${error.message}\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
        );
      }
    } catch (adminNotifyError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ:', adminNotifyError.message);
    }
    
    throw error;
  }
};

// üî• –ù–û–í–´–ô ENDPOINT –î–õ–Ø –†–£–ß–ù–û–ô –û–ß–ò–°–¢–ö–ò –ü–†–ï–ú–ò–£–ú–ê
app.post('/api/admin/manual-cleanup-premium', async (req, res) => {
  const { admin_id } = req.body;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
  if (admin_id !== process.env.ADMIN_TELEGRAM_ID) {
    return res.status(403).json({ error: 'Access denied' });
  }
  
  try {
    console.log('üîß –†—É—á–Ω–∞—è UNIFIED –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º:', admin_id);
    const result = await cleanupExpiredPremium();
    
    res.json({
      success: true,
      message: 'Manual UNIFIED cleanup completed successfully',
      ...result
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π UNIFIED –æ—á–∏—Å—Ç–∫–∏:', error);
    res.status(500).json({ 
      error: 'Manual cleanup failed', 
      details: error.message 
    });
  }
});

// üî• –ù–û–í–´–ô CRON JOB –î–õ–Ø –ü–†–ï–ú–ò–£–ú –û–ß–ò–°–¢–ö–ò (–∫–∞–∂–¥—ã–π —á–∞—Å)
cron.schedule('0 * * * *', async () => {
  console.log('‚è∞ –ó–∞–ø—É—Å–∫ UNIFIED cron job: –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫');
  try {
    await cleanupExpiredPremium();
  } catch (error) {
    console.error('‚ùå UNIFIED Cron job failed:', error);
  }
}, {
  scheduled: true,
  timezone: "Europe/Moscow"
});

console.log('‚è∞ UNIFIED Cron –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–º–∏—É–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Å');

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
  console.log(`üöÄ CosmoClick Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üî• UNIFIED —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`);

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ Stars —ç–Ω–¥–ø–æ–∏–Ω—Ç
  const webhookUrl = `https://cosmoclick-backend.onrender.com/api/wallet/webhook-stars`;
  
  try {
    const success = await bot.telegram.setWebhook(webhookUrl, {
      allowed_updates: ['message', 'callback_query', 'pre_checkout_query', 'successful_payment']
    });
    
    console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
    console.log(`Webhook URL: ${webhookUrl}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error.message);
  }

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ TON
  setTimeout(async () => {
    try {
      const tonRateService = require('./services/tonRateService');
      await tonRateService.startAutoUpdate();
      console.log('–°–µ—Ä–≤–∏—Å –∫—É—Ä—Å–æ–≤ TON –∑–∞–ø—É—â–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫—É—Ä—Å–æ–≤:', error);
    }
  }, 30000);

  // üî• –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö UNIFIED –û–ß–ò–°–¢–ö–ò (—á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞)
  setTimeout(async () => {
    try {
      console.log('üßπ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ UNIFIED –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–º–∏—É–º–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
      await cleanupExpiredPremium();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ UNIFIED –æ—á–∏—Å—Ç–∫–∏:', error);
    }
  }, 10000);
});