// index.js - –ü–û–õ–ù–´–ô —Ñ–∞–π–ª —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú cron job

require('dotenv').config();

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const cron = require('node-cron');
const pool = require('./db');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(helmet({
  contentSecurityPolicy: false,
  crossOriginEmbedderPolicy: false
}));

app.use(cors({
  origin: [
    'https://cosmoclick-frontend.vercel.app',
    'http://localhost:3000',
    'https://t.me'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});
app.use(limiter);

// Health check
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage()
  });
});

// Routes
app.use('/api/players', require('./routes/players'));
app.use('/api/wallet', require('./routes/wallet'));
app.use('/api/exchange', require('./routes/exchange'));
app.use('/api/minigames', require('./routes/minigames'));
app.use('/api/referrals', require('./routes/referrals'));
app.use('/api/admin', require('./routes/admin'));
app.use('/api/test', require('./routes/telegramBot'));

// ===== üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –ü–†–ï–ú–ò–£–ú–ê =====
const cleanupExpiredPremium = async () => {
  console.log('üßπ === –ù–ê–ß–ò–ù–ê–ï–ú –û–ß–ò–°–¢–ö–£ –ò–°–¢–ï–ö–®–ò–• –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–û–ö (UNIFIED) ===');
  console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toISOString());
  
  try {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ premium_subscriptions
    console.log('üìã –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');
    const expiredSubscriptionsResult = await pool.query(
      `UPDATE premium_subscriptions 
       SET status = 'expired' 
       WHERE status = 'active' 
         AND end_date IS NOT NULL 
         AND end_date < NOW()
       RETURNING telegram_id, subscription_type, end_date`
    );
    
    const expiredSubscriptions = expiredSubscriptionsResult.rows;
    console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${expiredSubscriptions.length}`);
    
    if (expiredSubscriptions.length > 0) {
      console.log('   üìÑ –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:', expiredSubscriptions.map(s => 
        `ID: ${s.telegram_id}, —Ç–∏–ø: ${s.subscription_type}, –∏—Å—Ç–µ–∫: ${s.end_date}`
      ));
    }

    // üî• 2. –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–ª—è –ò –°–ë–†–ê–°–´–í–ê–ï–ú VERIFIED
    console.log('üî• –®–∞–≥ 2: –û—á–∏—â–∞–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –ò verified —É –∏–≥—Ä–æ–∫–æ–≤...');
    const cleanedPlayersResult = await pool.query(
      `UPDATE players 
       SET premium_no_ads_until = NULL,
           verified = FALSE
       WHERE premium_no_ads_until IS NOT NULL 
         AND premium_no_ads_until < NOW()
         AND premium_no_ads_forever = FALSE
       RETURNING telegram_id, first_name, username`
    );
    
    const cleanedPlayers = cleanedPlayersResult.rows;
    console.log(`   ‚úÖ –û—á–∏—â–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${cleanedPlayers.length}`);
    console.log(`   üö´ Verified —Å–±—Ä–æ—à–µ–Ω —É: ${cleanedPlayers.map(p => `${p.telegram_id} (${p.first_name || p.username})`).join(', ')}`);

    // 3. –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞—É–¥–∏—Ç–∞
    console.log('üìù –®–∞–≥ 3: –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ expiration...');
    for (const player of cleanedPlayers) {
      try {
        await pool.query(
          `INSERT INTO premium_transactions (
            telegram_id,
            transaction_type,
            subscription_type,
            description,
            metadata
          ) VALUES ($1, $2, $3, $4, $5)`,
          [
            player.telegram_id,
            'expiration',
            'no_ads_30_days',
            'Premium subscription expired - verified status revoked by cron',
            JSON.stringify({
              expired_at: new Date().toISOString(),
              verified_revoked: true,
              cleanup_job: true,
              cron_execution: true
            })
          ]
        );
      } catch (logError) {
        console.error(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ${player.telegram_id}:`, logError.message);
      }
    }

    // 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log('üì¨ –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏...');
    let notificationsSent = 0;
    
    for (const player of cleanedPlayers) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const { Telegraf } = require('telegraf');
        const notifyBot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
        
        await notifyBot.telegram.sendMessage(
          player.telegram_id,
          `‚è∞ –í–∞—à–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n\nüö´ –†–µ–∫–ª–∞–º–∞ —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω–∞\n‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–æ–∑–≤–∞–Ω–∞\n\nüíé –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∏–≥—Ä–æ–π –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π!`,
          {
            reply_markup: {
              inline_keyboard: [[{
                text: 'üõí –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º',
                web_app: { url: 'https://cosmoclick-frontend.vercel.app' }
              }]]
            }
          }
        );
        
        notificationsSent++;
        console.log(`   üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${player.telegram_id}`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram)
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (notifyError) {
        console.error(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${player.telegram_id}:`, notifyError.message);
      }
    }

    // 5. –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—á–∏—Å—Ç–∫–∏
    if (cleanedPlayers.length > 0) {
      try {
        const { Telegraf } = require('telegraf');
        const adminBot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
        const adminId = process.env.ADMIN_TELEGRAM_ID;
        
        if (adminId) {
          await adminBot.telegram.sendMessage(
            adminId,
            `üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–º–∏—É–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${expiredSubscriptions.length}\n‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω–æ: ${cleanedPlayers.length}\n‚Ä¢ Verified —Å–±—Ä–æ—à–µ–Ω —É: ${cleanedPlayers.length}\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notificationsSent}\n\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
          );
        }
      } catch (adminNotifyError) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö:', adminNotifyError.message);
      }
    }

    // 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò ===');
    console.log(`‚úÖ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${expiredSubscriptions.length}`);
    console.log(`‚úÖ –ò–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω–æ: ${cleanedPlayers.length}`);
    console.log(`üî• Verified —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω —É: ${cleanedPlayers.length} –∏–≥—Ä–æ–∫–æ–≤`);
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notificationsSent}`);
    console.log('üèÅ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (UNIFIED —Å–∏—Å—Ç–µ–º–∞)');

    // 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
    return {
      success: true,
      expired_subscriptions: expiredSubscriptions.length,
      cleaned_players: cleanedPlayers.length,
      notifications_sent: notificationsSent,
      verified_revoked: cleanedPlayers.length, // üî• –ù–û–í–û–ï –ü–û–õ–ï
      affected_players: cleanedPlayers.map(p => ({
        telegram_id: p.telegram_id,
        name: p.first_name || p.username
      }))
    };

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    console.error('‚ùå Stack trace:', error.stack);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ cron job
    try {
      const { Telegraf } = require('telegraf');
      const adminBot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
      const adminId = process.env.ADMIN_TELEGRAM_ID;
      
      if (adminId) {
        await adminBot.telegram.sendMessage(
          adminId,
          `üö® –û–®–ò–ë–ö–ê CRON JOB (UNIFIED)!\n\n–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ —É–¥–∞–ª–∞—Å—å:\n\n${error.message}\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.`
        );
      }
    } catch (adminNotifyError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ:', adminNotifyError.message);
    }
    
    throw error;
  }
};

// ===== üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô CRON JOB =====
// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å (–≤ –º–∏–Ω—É—Ç—É 0)
cron.schedule('0 * * * *', async () => {
  console.log('‚è∞ === –ó–ê–ü–£–°–ö CRON JOB: –û–ß–ò–°–¢–ö–ê –ò–°–¢–ï–ö–®–ò–• –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–û–ö (UNIFIED) ===');
  try {
    await cleanupExpiredPremium();
  } catch (error) {
    console.error('‚ùå Cron job failed:', error);
  }
});

// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á–∞—â–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç):
// cron.schedule('*/30 * * * *', async () => {
//   console.log('‚è∞ –ó–ê–ü–£–°–ö CRON JOB: –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω)');
//   try {
//     await cleanupExpiredPremium();
//   } catch (error) {
//     console.error('‚ùå Cron job failed:', error);
//   }
// });

// ===== üîß ENDPOINT –î–õ–Ø –†–£–ß–ù–û–ô –û–ß–ò–°–¢–ö–ò –ê–î–ú–ò–ù–û–ú =====
app.post('/api/admin/manual-cleanup-premium', async (req, res) => {
  const { admin_id } = req.body;
  
  console.log('üîß –ó–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –æ—Ç:', admin_id);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
  if (!admin_id || String(admin_id).trim() !== String(process.env.ADMIN_TELEGRAM_ID).trim()) {
    console.log('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è:', admin_id, '–æ–∂–∏–¥–∞–µ—Ç—Å—è:', process.env.ADMIN_TELEGRAM_ID);
    return res.status(403).json({ error: 'Access denied - not admin' });
  }
  
  try {
    console.log('üîß –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º:', admin_id);
    const result = await cleanupExpiredPremium();
    
    console.log('‚úÖ –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', result);
    
    res.json({
      success: true,
      message: 'Manual cleanup completed successfully (UNIFIED system)',
      cleanup_type: 'unified_verification',
      ...result
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', error);
    res.status(500).json({ 
      error: 'Manual cleanup failed', 
      details: error.message 
    });
  }
});

// ===== üîÑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS –î–õ–Ø –û–¢–õ–ê–î–ö–ò =====

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ cron job
app.get('/api/admin/cron-status/:adminId', async (req, res) => {
  const { adminId } = req.params;
  
  if (String(adminId).trim() !== String(process.env.ADMIN_TELEGRAM_ID).trim()) {
    return res.status(403).json({ error: 'Access denied' });
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const expiredCheck = await pool.query(`
      SELECT COUNT(*) as expired_count
      FROM players 
      WHERE premium_no_ads_until IS NOT NULL 
        AND premium_no_ads_until < NOW()
        AND premium_no_ads_forever = FALSE
    `);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const activeCheck = await pool.query(`
      SELECT COUNT(*) as active_count
      FROM players 
      WHERE (premium_no_ads_forever = TRUE OR premium_no_ads_until > NOW())
    `);
    
    res.json({
      success: true,
      cron_status: 'running',
      next_cleanup: 'every hour at minute 0',
      current_time: new Date().toISOString(),
      expired_subscriptions_pending: parseInt(expiredCheck.rows[0].expired_count),
      active_premium_users: parseInt(activeCheck.rows[0].active_count),
      unified_system: true
    });
    
  } catch (error) {
    res.status(500).json({ error: 'Failed to check cron status', details: error.message });
  }
});

// Endpoint –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
app.post('/api/admin/force-cleanup-all/:adminId', async (req, res) => {
  const { adminId } = req.params;
  
  if (String(adminId).trim() !== String(process.env.ADMIN_TELEGRAM_ID).trim()) {
    return res.status(403).json({ error: 'Access denied' });
  }
  
  try {
    console.log('üö® –§–û–†–°–ò–†–û–í–ê–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –≤—Å–µ—Ö –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º:', adminId);
    
    // –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—á–∏—â–∞–µ–º –í–°–ï –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const forceCleanResult = await pool.query(`
      UPDATE players 
      SET premium_no_ads_until = NULL,
          verified = CASE 
            WHEN premium_no_ads_forever = TRUE THEN TRUE
            ELSE FALSE 
          END
      WHERE premium_no_ads_until IS NOT NULL 
        AND premium_no_ads_until <= NOW()
      RETURNING telegram_id, first_name
    `);
    
    console.log(`üî• –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—á–∏—â–µ–Ω–æ: ${forceCleanResult.rows.length} –∏–≥—Ä–æ–∫–æ–≤`);
    
    res.json({
      success: true,
      message: 'Force cleanup completed',
      cleaned_players: forceCleanResult.rows.length,
      players: forceCleanResult.rows
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', error);
    res.status(500).json({ error: 'Force cleanup failed', details: error.message });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('‚ùå Unhandled error:', err);
  res.status(500).json({ 
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  try {
    await pool.end();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
    process.exit(1);
  }
});

process.on('SIGTERM', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  try {
    await pool.end();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
    process.exit(1);
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîß –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üßπ Cron job –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–º–∏—É–º–∞: –∞–∫—Ç–∏–≤–µ–Ω (–∫–∞–∂–¥—ã–π —á–∞—Å)`);
  console.log(`üî• UNIFIED —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: –≤–∫–ª—é—á–µ–Ω–∞`);
  console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString('ru-RU')}`);
});