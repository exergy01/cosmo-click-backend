// ===== routes/shop.js - –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ë–û–ú–ë –ò –ü–†–ê–í–ò–õ–¨–ù–´–ú –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï–ú =====
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const shopData = require('../shopData.js');

const router = express.Router();

// üéØ –§–£–ù–ö–¶–ò–Ø –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –ù–ê–ì–†–ê–î–´ –ü–†–ò –ü–û–ö–£–ü–ö–ê–• - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û!
const processReferralReward = async (client, telegramId, spentAmount, currency) => {
  try {
    const player = await getPlayer(telegramId);
    if (!player?.referrer_id) {
      console.log(`üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: –∏–≥—Ä–æ–∫ ${telegramId} –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞`);
      return;
    }

    // üî• –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
    let rewardPercentage, rewardCurrency;
    
    if (currency === 'ton') {
      rewardPercentage = 0.001; // 0.1% –¥–ª—è TON
      rewardCurrency = 'ton';   // –Ω–∞—á–∏—Å–ª—è–µ–º –≤ TON
    } else if (currency === 'cs') {
      rewardPercentage = 0.01;  // 1% –¥–ª—è CS
      rewardCurrency = 'cs';    // –Ω–∞—á–∏—Å–ª—è–µ–º –≤ CS
    } else {
      // –î–ª—è CCC –Ω–∞—á–∏—Å–ª—è–µ–º –≤ CS
      rewardPercentage = 0.01;  // 1%
      rewardCurrency = 'cs';    // –Ω–∞—á–∏—Å–ª—è–µ–º –≤ CS
    }

    const rewardAmount = parseFloat((spentAmount * rewardPercentage).toFixed(8));

    if (rewardAmount <= 0) {
      console.log(`üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞ (${rewardAmount})`);
      return;
    }

    console.log(`üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: –∏–≥—Ä–æ–∫ ${telegramId} –ø–æ—Ç—Ä–∞—Ç–∏–ª ${spentAmount} ${currency.toUpperCase()}, —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${player.referrer_id} –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è ${rewardAmount} ${rewardCurrency.toUpperCase()} (–ù–ï –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É!)`);

    // ‚úÖ –¢–û–õ–¨–ö–û –ó–ê–ü–ò–°–´–í–ê–ï–ú –í –¢–ê–ë–õ–ò–¶–£ REFERRALS - –ù–ò–ö–ê–ö–û–ì–û –ó–ê–ß–ò–°–õ–ï–ù–ò–Ø –ù–ê –ë–ê–õ–ê–ù–°!
    const csEarned = rewardCurrency === 'cs' ? rewardAmount : 0;
    const tonEarned = rewardCurrency === 'ton' ? rewardAmount : 0;
    
    await client.query(`
      INSERT INTO referrals (referrer_id, referred_id, cs_earned, ton_earned, created_at) 
      VALUES ($1, $2, $3, $4, NOW())
      ON CONFLICT (referrer_id, referred_id) 
      DO UPDATE SET 
        cs_earned = referrals.cs_earned + $3,
        ton_earned = referrals.ton_earned + $4
    `, [player.referrer_id, telegramId, csEarned, tonEarned]);

    console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¢–û–õ–¨–ö–û –Ω–∞–∫–æ–ø–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${rewardAmount} ${rewardCurrency.toUpperCase()} –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${player.referrer_id}`);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', err);
    // –ù–ï –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É - –ø—É—Å—Ç—å –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
  }
};

// üî• –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–°–ß–ï–¢–ê –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ (–ë–ï–ó –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø)
const recalculatePlayerData = async (client, telegramId) => {
  try {
    const player = await getPlayer(telegramId);
    if (!player) return;

    const maxCargoCapacity = {};
    const miningSpeed = {};

    for (let system = 1; system <= 7; system++) {
      // –ö–∞—Ä–≥–æ - –±–µ—Ä–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£–Æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
      const systemCargo = player.cargo_levels.filter(c => c.system === system);
      const maxCapacity = systemCargo.reduce((max, c) => Math.max(max, c.capacity || 0), 0);
      maxCargoCapacity[system] = maxCapacity;

      // –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏
      const systemDrones = player.drones.filter(d => d.system === system);
      let totalSpeed = 0;
      
      if (system === 4) {
        totalSpeed = systemDrones.reduce((sum, d) => sum + (d.csPerDay || 0), 0);
      } else {
        totalSpeed = systemDrones.reduce((sum, d) => sum + (d.cccPerDay || 0), 0);
      }
      
      // –ë–æ–Ω—É—Å +1% –∑–∞ –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥—Ä–æ–Ω–æ–≤ (15 —à—Ç—É–∫) –¥–ª—è —Å–∏—Å—Ç–µ–º 1-4
      const droneCount = systemDrones.length;
      const bonusMultiplier = (system >= 1 && system <= 4 && droneCount === 15) ? 1.01 : 1;
      
      miningSpeed[system] = (totalSpeed * bonusMultiplier) / 86400;
    }

    // –ù–ï –û–ë–ù–û–í–õ–Ø–ï–ú asteroid_total_data! –¢–æ–ª—å–∫–æ –∫–∞—Ä–≥–æ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å!
    await client.query(
      'UPDATE players SET max_cargo_capacity_data = $1, mining_speed_data = $2 WHERE telegram_id = $3',
      [JSON.stringify(maxCargoCapacity), JSON.stringify(miningSpeed), telegramId]
    );

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', err);
  }
};

// üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–°–ë–û–†–ê –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
const autoCollectBeforePurchase = async (client, player, systemId) => {
  try {
    const systemStr = String(systemId);
    const lastCollectionTime = new Date(player.last_collection_time[systemStr]).getTime();
    const collectedAmount = player.collected_by_system[systemStr] || 0;
    const miningSpeed = player.mining_speed_data?.[systemId] || 0;
    const maxCargoCapacity = player.max_cargo_capacity_data?.[systemId] || 0;
    const totalAsteroidResources = player.asteroid_total_data?.[systemId] || 0;

    console.log(`üîÑ –ê–í–¢–û–°–ë–û–† —Å–∏—Å—Ç–µ–º–∞ ${systemId}: —É–∂–µ_—Å–æ–±—Ä–∞–Ω–æ=${collectedAmount}, —Å–∫–æ—Ä–æ—Å—Ç—å=${miningSpeed}/—Å–µ–∫, –∫–∞—Ä–≥–æ=${maxCargoCapacity}, –∞—Å—Ç–µ—Ä–æ–∏–¥—ã=${totalAsteroidResources}`);

    if (miningSpeed === 0 || maxCargoCapacity === 0) {
      console.log(`‚èπÔ∏è –ê–≤—Ç–æ—Å–±–æ—Ä –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${systemId} (–Ω–µ—Ç –¥—Ä–æ–Ω–æ–≤ –∏–ª–∏ –∫–∞—Ä–≥–æ)`);
      return systemId === 4 ? parseFloat(player.cs) : parseFloat(player.ccc);
    }

    const currentTime = Date.now();
    const timeElapsed = (currentTime - lastCollectionTime) / 1000;

    let newResources = collectedAmount + (miningSpeed * timeElapsed);
    newResources = Math.min(newResources, maxCargoCapacity);
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
    if (totalAsteroidResources > 0) {
      newResources = Math.min(newResources, totalAsteroidResources);
    } else {
      // –ï—Å–ª–∏ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –Ω–µ—Ç - –Ω–µ—á–µ–≥–æ —Å–æ–±–∏—Ä–∞—Ç—å
      newResources = 0;
    }

    if (newResources <= 0) {
      console.log(`‚èπÔ∏è –ù–µ—á–µ–≥–æ —Å–æ–±–∏—Ä–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ ${systemId}`);
      return systemId === 4 ? parseFloat(player.cs) : parseFloat(player.ccc);
    }

    console.log(`üí∞ –ö –∞–≤—Ç–æ—Å–±–æ—Ä—É: ${newResources} ${systemId === 4 ? 'CS' : 'CCC'}`);

    const updatedCollected = { ...player.collected_by_system };
    updatedCollected[systemStr] = 0;
    const updatedTime = { ...player.last_collection_time };
    updatedTime[systemStr] = new Date().toISOString();
    
    // üî• –ì–õ–ê–í–ù–û–ï: –í–´–ß–ò–¢–ê–ï–ú –∏–∑ asteroid_total_data!
    const updatedAsteroidTotal = { ...player.asteroid_total_data };
    updatedAsteroidTotal[systemStr] = Math.max(0, (updatedAsteroidTotal[systemStr] || 0) - newResources);
    
    if (systemId === 4) {
      const updatedCs = parseFloat(player.cs) + newResources;
      await client.query(
        'UPDATE players SET cs = $1, collected_by_system = $2, last_collection_time = $3, asteroid_total_data = $4 WHERE telegram_id = $5',
        [updatedCs, updatedCollected, updatedTime, updatedAsteroidTotal, player.telegram_id]
      );
      console.log(`‚úÖ –ê–≤—Ç–æ—Å–±–æ—Ä CS: ${player.cs} + ${newResources} = ${updatedCs}, –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${updatedAsteroidTotal[systemStr]}`);
      return updatedCs;
    } else {
      const updatedCcc = parseFloat(player.ccc) + newResources;
      await client.query(
        'UPDATE players SET ccc = $1, collected_by_system = $2, last_collection_time = $3, asteroid_total_data = $4 WHERE telegram_id = $5',
        [updatedCcc, updatedCollected, updatedTime, updatedAsteroidTotal, player.telegram_id]
      );
      console.log(`‚úÖ –ê–≤—Ç–æ—Å–±–æ—Ä CCC: ${player.ccc} + ${newResources} = ${updatedCcc}, –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${updatedAsteroidTotal[systemStr]}`);
      return updatedCcc;
    }
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–±–æ—Ä–∞:', err);
    return systemId === 4 ? parseFloat(player.cs) : parseFloat(player.ccc);
  }
};

// üí£ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ë–û–ú–ë–´ - –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–¢ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –õ–ò–ú–ò–¢–´
const updateAsteroidLimits = async (client, telegramId, systemId) => {
  try {
    const player = await getPlayer(telegramId);
    if (!player) return;

    // üî• –ü–û–õ–£–ß–ê–ï–ú –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ò–ó shopData
    const systemAsteroids = shopData.asteroidData.filter(item => 
      item.system === systemId && item.id <= 12 // —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥—ã
    );

    // üî• –í–´–ß–ò–°–õ–Ø–ï–ú –û–ë–©–ò–ô –ú–ê–ö–°–ò–ú–£–ú –í–°–ï–• –ê–°–¢–ï–†–û–ò–î–û–í –°–ò–°–¢–ï–ú–´
    let totalMaxResources = 0;
    
    systemAsteroids.forEach(asteroidData => {
      if (systemId === 4) {
        totalMaxResources += asteroidData.totalCs || 0;
      } else {
        totalMaxResources += asteroidData.totalCcc || 0;
      }
    });

    console.log(`üí£ –ë–æ–º–±–∞ –≤ —Å–∏—Å—Ç–µ–º–µ ${systemId}: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º ${totalMaxResources} ${systemId === 4 ? 'CS' : 'CCC'}`);

    // üî• –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –õ–ò–ú–ò–¢–´ (–ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú!)
    const updatedAsteroidTotal = { ...player.asteroid_total_data };
    updatedAsteroidTotal[systemId] = totalMaxResources; // ‚úÖ –ó–ê–ú–ï–ù–Ø–ï–ú –ù–ê –ú–ê–ö–°–ò–ú–£–ú

    // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –ê–°–¢–ï–†–û–ò–î–´ –ù–ê –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø
    const updatedAsteroids = player.asteroids.map(asteroid => {
      if (asteroid.system === systemId && asteroid.id <= 12) {
        // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ –∏–∑ shopData
        const asteroidData = systemAsteroids.find(item => item.id === asteroid.id);
        if (asteroidData) {
          return {
            ...asteroid,
            // ‚úÖ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø
            totalCcc: systemId === 4 ? asteroid.totalCcc : (asteroidData.totalCcc || 0),
            totalCs: systemId === 4 ? (asteroidData.totalCs || 0) : asteroid.totalCs
          };
        }
      }
      return asteroid;
    });

    // üî• –°–ë–†–ê–°–´–í–ê–ï–ú –°–û–ë–†–ê–ù–ù–´–ï –†–ï–°–£–†–°–´ –í –°–ò–°–¢–ï–ú–ï
    const updatedCollected = { ...player.collected_by_system };
    updatedCollected[String(systemId)] = 0;

    await client.query(
      'UPDATE players SET asteroids = $1::jsonb, asteroid_total_data = $2, collected_by_system = $3 WHERE telegram_id = $4',
      [JSON.stringify(updatedAsteroids), updatedAsteroidTotal, updatedCollected, telegramId]
    );

    console.log(`üí£ –ë–æ–º–±–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞! –°–∏—Å—Ç–µ–º–∞ ${systemId} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞: ${totalMaxResources} ${systemId === 4 ? 'CS' : 'CCC'}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–º–±—ã:', err);
  }
};

// GET –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞
router.get('/asteroids', (req, res) => {
  res.json(shopData.asteroidData);
});

router.get('/drones', (req, res) => {
  res.json(shopData.droneData);
});

router.get('/cargo', (req, res) => {
  res.json(shopData.cargoData);
});

router.get('/systems', (req, res) => {
  res.json(shopData.systemData);
});

// GET –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
router.get('/asteroids/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const player = await pool.query('SELECT asteroids FROM players WHERE telegram_id = $1', [telegramId]);
    if (!player.rows[0]) return res.status(404).json({ error: 'Player not found' });
    res.json(player.rows[0].asteroids || []);
  } catch (err) {
    console.error('Error fetching player asteroids:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

router.get('/drones/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const player = await pool.query('SELECT drones FROM players WHERE telegram_id = $1', [telegramId]);
    if (!player.rows[0]) return res.status(404).json({ error: 'Player not found' });
    res.json(player.rows[0].drones || []);
  } catch (err) {
    console.error('Error fetching player drones:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

router.get('/cargo/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const player = await pool.query('SELECT cargo_levels FROM players WHERE telegram_id = $1', [telegramId]);
    if (!player.rows[0]) return res.status(404).json({ error: 'Player not found' });
    res.json(player.rows[0].cargo_levels || []);
  } catch (err) {
    console.error('Error fetching player cargo:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/shop/buy - –° –†–ï–§–ï–†–ê–õ–¨–ù–´–ú–ò –ù–ê–ì–†–ê–î–ê–ú–ò –ò –ü–û–î–î–ï–†–ñ–ö–û–ô –ë–û–ú–ë
router.post('/buy', async (req, res) => {
  const { telegramId, itemId, itemType, systemId, currency } = req.body;
  if (!telegramId || !itemId || !itemType || !systemId) return res.status(400).json({ error: 'Missing required fields' });

  console.log(`üõí –ü–û–ö–£–ü–ö–ê –°–¢–ê–†–¢: –∏–≥—Ä–æ–∫ ${telegramId}, —Ç–æ–≤–∞—Ä ${itemType} #${itemId}, —Å–∏—Å—Ç–µ–º–∞ ${systemId}, –≤–∞–ª—é—Ç–∞: ${currency || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);

  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞...');
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    console.log('üîÑ –ê–≤—Ç–æ—Å–±–æ—Ä –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π...');
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù: –ê–≤—Ç–æ—Å–±–æ—Ä –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
    const updatedBalance = await autoCollectBeforePurchase(client, player, systemId);
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–±–æ—Ä–∞ –µ—Å–ª–∏ –±—ã–ª —Å–±–æ—Ä
    let currentPlayer = player;
    if (updatedBalance !== (systemId === 4 ? parseFloat(player.cs) : parseFloat(player.ccc))) {
      console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–±–æ—Ä–∞...');
      currentPlayer = await getPlayer(telegramId);
    }

    console.log('üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä...');
    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –°–ù–ê–ß–ê–õ–ê
    const itemData = (itemType === 'asteroid' ? shopData.asteroidData :
                     (itemType === 'drone' || itemType === 'drones') ? shopData.droneData :
                     itemType === 'cargo' ? shopData.cargoData : []).find(item => item.id === itemId && item.system === systemId);
    
    if (!itemData) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: `${itemType} not found` });
    }

    console.log('üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É...');
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–†–ò–û–†–ò–¢–ï–¢ –ü–ï–†–ï–î–ê–ù–ù–û–ô –í–ê–õ–Æ–¢–ï!
    let currencyToUse = currency; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É
    
    if (!currencyToUse) {
      // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –ù–ï –ø–µ—Ä–µ–¥–∞–Ω–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      const isBomb = itemData.isBomb || (itemType === 'asteroid' && itemId === 13);
      
      if (isBomb || itemData.currency === 'ton') {
        currencyToUse = 'ton';
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–∞–ª—é—Ç
        const useCs = systemId >= 1 && systemId <= 4;
        const useTon = systemId >= 5 && systemId <= 7;
        currencyToUse = useCs ? 'cs' : useTon ? 'ton' : 'ccc';
      }
    }
    
    console.log(`üí∞ –í–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${currencyToUse}, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è: ${currency || '–Ω–µ—Ç'}, —ç—Ç–æ –±–æ–º–±–∞: ${itemData.isBomb || false}`);
    
    const price = itemData.price;
    console.log(`üîç –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: ${price} ${currencyToUse}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    let playerBalance;
    if (currencyToUse === 'ton') {
      playerBalance = parseFloat(currentPlayer.ton || 0);
    } else if (currencyToUse === 'cs') {
      if (systemId === 4) {
        playerBalance = updatedBalance; // CS –∏–∑ –∞–≤—Ç–æ—Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã 4
      } else {
        playerBalance = parseFloat(currentPlayer.cs); // CS –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º 1-3
      }
    } else {
      playerBalance = parseFloat(currentPlayer.ccc || 0);
    }
    
    console.log(`üîç –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞: ${playerBalance} ${currencyToUse}`);
    
    if (playerBalance < price) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Insufficient funds' });
    }

    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...');
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    if (itemType === 'asteroid' && currentPlayer.asteroids.some(item => item.id === itemId && item.system === systemId)) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Asteroid already purchased' });
    }
    if ((itemType === 'drone' || itemType === 'drones') && currentPlayer.drones.some(item => item.id === itemId && item.system === systemId)) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Drone already purchased' });
    }
    if (itemType === 'cargo' && currentPlayer.cargo_levels.some(item => item.id === itemId && item.system === systemId)) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Cargo already purchased' });
    }

    console.log('üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä...');
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –ë–î
    let updatedItems = [];
    const newLastCollectionTime = { ...currentPlayer.last_collection_time };
    newLastCollectionTime[String(systemId)] = new Date().toISOString();
    
    if (itemType === 'asteroid') {
      updatedItems = [...(currentPlayer.asteroids || [])];
      
      // üí£ –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ë–û–ú–ë
      const isBomb = itemData.isBomb || itemId === 13;
      if (isBomb) {
        console.log('üí£ –ü–û–ö–£–ü–ö–ê –ë–û–ú–ë–´ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤!');
        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–º–±—É (–±–µ–∑ —Ä–µ—Å—É—Ä—Å–æ–≤)
        const bombData = { id: itemId, system: systemId, isBomb: true };
        updatedItems.push(bombData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Ç–µ—Ä–æ–∏–¥—ã –≤ –ë–î
        await client.query(
          'UPDATE players SET asteroids = $1::jsonb, last_collection_time = $2 WHERE telegram_id = $3',
          [JSON.stringify(updatedItems), newLastCollectionTime, telegramId]
        );
        
        // üí£ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–°–ï –õ–ò–ú–ò–¢–´ –ê–°–¢–ï–†–û–ò–î–û–í –í –°–ò–°–¢–ï–ú–ï
        await updateAsteroidLimits(client, telegramId, systemId);
      } else {
        // –û–±—ã—á–Ω—ã–π –∞—Å—Ç–µ—Ä–æ–∏–¥
        const asteroidData = systemId === 4 ? 
          { id: itemId, system: systemId, totalCs: itemData.totalCs } :
          { id: itemId, system: systemId, totalCcc: itemData.totalCcc };
        
        updatedItems.push(asteroidData);
        
        const totalValue = systemId === 4 ? (itemData.totalCs || 0) : (itemData.totalCcc || 0);
        
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–±–æ—Ä–∞ –∏–∑ –ë–î
        const freshPlayerQuery = await client.query('SELECT asteroid_total_data FROM players WHERE telegram_id = $1', [telegramId]);
        const freshAsteroidData = freshPlayerQuery.rows[0]?.asteroid_total_data || {};
        
        const updatedAsteroidTotal = { 
          ...freshAsteroidData, 
          [systemId]: (freshAsteroidData[systemId] || 0) + totalValue 
        };
        
        console.log(`üîç –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Ç–µ—Ä–æ–∏–¥—ã –≤ –ë–î... –ë—ã–ª–æ: ${freshAsteroidData[systemId] || 0}, –¥–æ–±–∞–≤–ª—è–µ–º: ${totalValue}, —Å—Ç–∞–Ω–µ—Ç: ${updatedAsteroidTotal[systemId]}`);
        await client.query(
          'UPDATE players SET asteroids = $1::jsonb, asteroid_total_data = $2, last_collection_time = $3 WHERE telegram_id = $4',
          [JSON.stringify(updatedItems), updatedAsteroidTotal, newLastCollectionTime, telegramId]
        );
      }
      
    } else if (itemType === 'drone' || itemType === 'drones') {
      updatedItems = [...(currentPlayer.drones || [])];
      
      const droneData = systemId === 4 ? 
        { id: itemId, system: systemId, csPerDay: itemData.csPerDay } :
        { id: itemId, system: systemId, cccPerDay: itemData.cccPerDay };
      
      updatedItems.push(droneData);
      
      console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä–æ–Ω–æ–≤ –≤ –ë–î...');
      await client.query(
        'UPDATE players SET drones = $1::jsonb, last_collection_time = $2 WHERE telegram_id = $3',
        [JSON.stringify(updatedItems), newLastCollectionTime, telegramId]
      );
      
    } else if (itemType === 'cargo') {
      updatedItems = [...(currentPlayer.cargo_levels || [])];
      
      const cargoData = { id: itemId, system: systemId, capacity: itemData.capacity };
      updatedItems.push(cargoData);
      
      console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä–≥–æ –≤ –ë–î...');
      await client.query(
        'UPDATE players SET cargo_levels = $1::jsonb, last_collection_time = $2 WHERE telegram_id = $3',
        [JSON.stringify(updatedItems), newLastCollectionTime, telegramId]
      );
    }

    console.log('üîç –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É...');
    // –°–ø–∏—Å–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    const updatedBalanceAfterPurchase = (playerBalance - price).toFixed(5);
    await client.query(
      `UPDATE players SET ${currencyToUse} = $1 WHERE telegram_id = $2`,
      [updatedBalanceAfterPurchase, telegramId]
    );

    // üéØ –ù–ê–ß–ò–°–õ–Ø–ï–ú –†–ï–§–ï–†–ê–õ–¨–ù–£–Æ –ù–ê–ì–†–ê–î–£ –ü–†–ò –ü–û–ö–£–ü–ö–ï (–ö–û–ü–ò–¢–°–Ø –í –ë–ê–ó–ï!)
    await processReferralReward(client, telegramId, price, currencyToUse);

    console.log('üîç –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
    // –ü–µ—Ä–µ—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    await recalculatePlayerData(client, telegramId);

    console.log('üîç –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
    await client.query('COMMIT');
    
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞...');
    const finalPlayer = await getPlayer(telegramId);
    
    console.log(`‚úÖ –ü–û–ö–£–ü–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: ${itemType} #${itemId} –∑–∞ ${price} ${currencyToUse}${itemData.isBomb ? ' (–ë–û–ú–ë–ê!)' : ''}`);
    res.json(finalPlayer);
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// POST /api/shop/buy-system
router.post('/buy-system', async (req, res) => {
  const { telegramId, systemId, customPrice } = req.body;
  if (!telegramId || !systemId) return res.status(400).json({ error: 'Telegram ID and System ID are required' });
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    const systemToBuy = shopData.systemData.find(system => system.id === systemId);
    if (!systemToBuy) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'System not found' });
    }
    
    let priceToCheck = systemToBuy.price;
    if (systemToBuy.dynamic && customPrice) {
      if (!Number.isInteger(customPrice) || customPrice < 15 || customPrice > 10000) {
        await client.query('ROLLBACK');
        return res.status(400).json({ error: 'Custom price must be an integer between 15 and 10000' });
      }
      priceToCheck = customPrice;
    }
    
    if (systemToBuy.currency === 'cs' && parseFloat(player.cs) < priceToCheck) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Not enough CS' });
    }
    if (systemToBuy.currency === 'ton' && parseFloat(player.ton) < priceToCheck) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Not enough TON' });
    }
    if (player.unlocked_systems.includes(systemId)) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Player already owns this system' });
    }
    
    const updatedCs = systemToBuy.currency === 'cs' ? parseFloat(player.cs) - priceToCheck : parseFloat(player.cs);
    const updatedTon = systemToBuy.currency === 'ton' ? parseFloat(player.ton) - priceToCheck : parseFloat(player.ton);
    const updatedUnlockedSystems = [...player.unlocked_systems, systemId];
    const updatedCollectedBySystem = { ...player.collected_by_system };
    updatedCollectedBySystem[String(systemId)] = 0;
    const newLastCollectionTime = { ...player.last_collection_time };
    newLastCollectionTime[String(systemId)] = new Date().toISOString();
    
    await client.query(
      'UPDATE players SET cs = $1, ton = $2, unlocked_systems = $3, collected_by_system = $4, last_collection_time = $5 WHERE telegram_id = $6',
      [updatedCs, updatedTon, JSON.stringify(updatedUnlockedSystems), updatedCollectedBySystem, newLastCollectionTime, telegramId]
    );

    // üéØ –ù–ê–ß–ò–°–õ–Ø–ï–ú –†–ï–§–ï–†–ê–õ–¨–ù–£–Æ –ù–ê–ì–†–ê–î–£ –ü–†–ò –ü–û–ö–£–ü–ö–ï –°–ò–°–¢–ï–ú–´ (–ö–û–ü–ò–¢–°–Ø –í –ë–ê–ó–ï!)
    await processReferralReward(client, telegramId, priceToCheck, systemToBuy.currency);

    await recalculatePlayerData(client, telegramId);

    await client.query('COMMIT');
    const updatedPlayer = await getPlayer(telegramId);
    res.json(updatedPlayer);
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('Error buying system:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// POST /api/shop/recalculate/:telegramId
router.post('/recalculate/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    await recalculatePlayerData(client, telegramId);
    await client.query('COMMIT');
    const updatedPlayer = await getPlayer(telegramId);
    res.json({ message: 'Player data recalculated successfully', player: updatedPlayer });
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('Error recalculating player data:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

module.exports = router;