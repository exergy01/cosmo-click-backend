// ===== routes/shop.js - –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ú–ï–•–ê–ù–ò–ö–û–ô –ë–û–ú–ë–´ =====
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const shopData = require('../shopData.js');

const router = express.Router();

// üéØ –§–£–ù–ö–¶–ò–Ø –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –ù–ê–ì–†–ê–î–´ –ü–†–ò –ü–û–ö–£–ü–ö–ê–•
const processReferralReward = async (client, telegramId, spentAmount, currency) => {
  try {
    const player = await getPlayer(telegramId);
    if (!player?.referrer_id) {
      if (process.env.NODE_ENV === 'development') console.log(`üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: –∏–≥—Ä–æ–∫ ${telegramId} –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞`);
      return;
    }

    // üî• –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
    let rewardPercentage, rewardCurrency;
    
    if (currency === 'ton') {
      rewardPercentage = 0.001; // 0.1% –¥–ª—è TON
      rewardCurrency = 'ton';   // –Ω–∞—á–∏—Å–ª—è–µ–º –≤ TON
    } else if (currency === 'cs') {
      rewardPercentage = 0.01;  // 1% –¥–ª—è CS
      rewardCurrency = 'cs';    // –Ω–∞—á–∏—Å–ª—è–µ–º –≤ CS
    } else {
      // –î–ª—è CCC –Ω–∞—á–∏—Å–ª—è–µ–º –≤ CS
      rewardPercentage = 0.01;  // 1%
      rewardCurrency = 'cs';    // –Ω–∞—á–∏—Å–ª—è–µ–º –≤ CS
    }

    const rewardAmount = parseFloat((spentAmount * rewardPercentage).toFixed(8));

    if (rewardAmount <= 0) {
      if (process.env.NODE_ENV === 'development') console.log(`üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞ (${rewardAmount})`);
      return;
    }

    if (process.env.NODE_ENV === 'development') console.log(`üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: –∏–≥—Ä–æ–∫ ${telegramId} –ø–æ—Ç—Ä–∞—Ç–∏–ª ${spentAmount} ${currency.toUpperCase()}, —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${player.referrer_id} –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è ${rewardAmount} ${rewardCurrency.toUpperCase()}`);

    // ‚úÖ –¢–û–õ–¨–ö–û –ó–ê–ü–ò–°–´–í–ê–ï–ú –í –¢–ê–ë–õ–ò–¶–£ REFERRALS
    const csEarned = rewardCurrency === 'cs' ? rewardAmount : 0;
    const tonEarned = rewardCurrency === 'ton' ? rewardAmount : 0;
    
    await client.query(`
      INSERT INTO referrals (referrer_id, referred_id, cs_earned, ton_earned, created_at) 
      VALUES ($1, $2, $3, $4, NOW())
      ON CONFLICT (referrer_id, referred_id) 
      DO UPDATE SET 
        cs_earned = referrals.cs_earned + $3,
        ton_earned = referrals.ton_earned + $4
    `, [player.referrer_id, telegramId, csEarned, tonEarned]);

    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∞: ${rewardAmount} ${rewardCurrency.toUpperCase()} –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${player.referrer_id}`);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', err);
  }
};

// üî• –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–°–ß–ï–¢–ê –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
const recalculatePlayerData = async (client, telegramId) => {
  try {
    const player = await getPlayer(telegramId);
    if (!player) return;

    const maxCargoCapacity = {};
    const miningSpeed = {};

    for (let system = 1; system <= 7; system++) {
      // –ö–∞—Ä–≥–æ - –±–µ—Ä–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£–Æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
      const systemCargo = player.cargo_levels.filter(c => c.system === system);
      const maxCapacity = systemCargo.reduce((max, c) => Math.max(max, c.capacity || 0), 0);
      maxCargoCapacity[system] = maxCapacity;

      // –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏
      const systemDrones = player.drones.filter(d => d.system === system);
      let totalSpeed = 0;
      
      if (system === 4) {
        totalSpeed = systemDrones.reduce((sum, d) => sum + (d.csPerDay || 0), 0);
      } else {
        totalSpeed = systemDrones.reduce((sum, d) => sum + (d.cccPerDay || 0), 0);
      }
      
      // –ë–æ–Ω—É—Å +1% –∑–∞ –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥—Ä–æ–Ω–æ–≤ (15 —à—Ç—É–∫) –¥–ª—è —Å–∏—Å—Ç–µ–º 1-4
      const droneCount = systemDrones.length;
      const bonusMultiplier = (system >= 1 && system <= 4 && droneCount === 15) ? 1.01 : 1;
      
      miningSpeed[system] = (totalSpeed * bonusMultiplier) / 86400;
    }

    await client.query(
      'UPDATE players SET max_cargo_capacity_data = $1, mining_speed_data = $2 WHERE telegram_id = $3',
      [JSON.stringify(maxCargoCapacity), JSON.stringify(miningSpeed), telegramId]
    );

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', err);
  }
};

// üî• –ê–í–¢–û–°–ë–û–† –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
const autoCollectBeforePurchase = async (client, player, systemId) => {
  try {
    const systemStr = String(systemId);
    const lastCollectionTime = new Date(player.last_collection_time[systemStr]).getTime();
    const collectedAmount = player.collected_by_system[systemStr] || 0;
    const miningSpeed = player.mining_speed_data?.[systemId] || 0;
    const maxCargoCapacity = player.max_cargo_capacity_data?.[systemId] || 0;
    const totalAsteroidResources = player.asteroid_total_data?.[systemId] || 0;

    if (process.env.NODE_ENV === 'development') console.log(`üîÑ –ê–í–¢–û–°–ë–û–† —Å–∏—Å—Ç–µ–º–∞ ${systemId}: —Å–æ–±—Ä–∞–Ω–æ=${collectedAmount}, —Å–∫–æ—Ä–æ—Å—Ç—å=${miningSpeed}/—Å–µ–∫, –∫–∞—Ä–≥–æ=${maxCargoCapacity}, –∞—Å—Ç–µ—Ä–æ–∏–¥—ã=${totalAsteroidResources}`);

    if (miningSpeed === 0 || maxCargoCapacity === 0) {
      if (process.env.NODE_ENV === 'development') console.log(`‚èπÔ∏è –ê–≤—Ç–æ—Å–±–æ—Ä –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${systemId}`);
      return systemId === 4 ? parseFloat(player.cs) : parseFloat(player.ccc);
    }

    const currentTime = Date.now();
    const timeElapsed = (currentTime - lastCollectionTime) / 1000;

    let newResources = collectedAmount + (miningSpeed * timeElapsed);
    newResources = Math.min(newResources, maxCargoCapacity);
    
    if (totalAsteroidResources > 0) {
      newResources = Math.min(newResources, totalAsteroidResources);
    } else {
      newResources = 0;
    }

    if (newResources <= 0) {
      if (process.env.NODE_ENV === 'development') console.log(`‚èπÔ∏è –ù–µ—á–µ–≥–æ —Å–æ–±–∏—Ä–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ ${systemId}`);
      return systemId === 4 ? parseFloat(player.cs) : parseFloat(player.ccc);
    }

    if (process.env.NODE_ENV === 'development') console.log(`üí∞ –ê–≤—Ç–æ—Å–±–æ—Ä: ${newResources} ${systemId === 4 ? 'CS' : 'CCC'}`);

    const updatedCollected = { ...player.collected_by_system };
    updatedCollected[systemStr] = 0;
    const updatedTime = { ...player.last_collection_time };
    updatedTime[systemStr] = new Date().toISOString();
    
    const updatedAsteroidTotal = { ...player.asteroid_total_data };
    updatedAsteroidTotal[systemStr] = Math.max(0, (updatedAsteroidTotal[systemStr] || 0) - newResources);
    
    if (systemId === 4) {
      const updatedCs = parseFloat(player.cs) + newResources;
      await client.query(
        'UPDATE players SET cs = $1, collected_by_system = $2, last_collection_time = $3, asteroid_total_data = $4 WHERE telegram_id = $5',
        [updatedCs, updatedCollected, updatedTime, updatedAsteroidTotal, player.telegram_id]
      );
      if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ê–≤—Ç–æ—Å–±–æ—Ä CS: ${updatedCs}, –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${updatedAsteroidTotal[systemStr]}`);
      return updatedCs;
    } else {
      const updatedCcc = parseFloat(player.ccc) + newResources;
      await client.query(
        'UPDATE players SET ccc = $1, collected_by_system = $2, last_collection_time = $3, asteroid_total_data = $4 WHERE telegram_id = $5',
        [updatedCcc, updatedCollected, updatedTime, updatedAsteroidTotal, player.telegram_id]
      );
      if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ê–≤—Ç–æ—Å–±–æ—Ä CCC: ${updatedCcc}, –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${updatedAsteroidTotal[systemStr]}`);
      return updatedCcc;
    }
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–±–æ—Ä–∞:', err);
    return systemId === 4 ? parseFloat(player.cs) : parseFloat(player.ccc);
  }
};

// üí£ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –õ–ò–ú–ò–¢–û–í –ê–°–¢–ï–†–û–ò–î–û–í (–ë–û–ú–ë–ê)
const restoreAsteroidLimits = async (client, telegramId, systemId) => {
  try {
    const player = await getPlayer(telegramId);
    if (!player) return;

    if (process.env.NODE_ENV === 'development') console.log(`üí£ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –õ–ò–ú–ò–¢–û–í –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${systemId} –∏–≥—Ä–æ–∫–∞ ${telegramId}`);

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –∏–∑ shopData
    const systemAsteroids = shopData.asteroidData.filter(a => a.system === systemId && a.id <= 12 && !a.isBomb);
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç —Å–∏—Å—Ç–µ–º—ã –∏–∑ shopData
    let totalSystemLimit = 0;
    systemAsteroids.forEach(asteroidData => {
      if (systemId === 4) {
        totalSystemLimit += asteroidData.totalCs || 0;
      } else {
        totalSystemLimit += asteroidData.totalCcc || 0;
      }
    });

    if (process.env.NODE_ENV === 'development') console.log(`üí£ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã ${systemId}: ${totalSystemLimit} ${systemId === 4 ? 'CS' : 'CCC'}`);
    if (process.env.NODE_ENV === 'development') console.log(`üí£ –ù–∞–π–¥–µ–Ω–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –≤ shopData –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${systemId}:`, systemAsteroids.length);

    // üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú asteroid_total_data –¥–æ –ü–û–õ–ù–û–ì–û –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const updatedAsteroidTotal = { ...player.asteroid_total_data };
    updatedAsteroidTotal[systemId] = totalSystemLimit; // –ó–ê–ú–ï–ù–Ø–ï–ú, –∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º!

    // ‚úÖ –°–ë–†–ê–°–´–í–ê–ï–ú collected_by_system –≤ 0
    const updatedCollected = { ...player.collected_by_system };
    updatedCollected[String(systemId)] = 0;

    // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
    const newLastCollectionTime = { ...player.last_collection_time };
    newLastCollectionTime[String(systemId)] = new Date().toISOString();

    await client.query(
      'UPDATE players SET asteroid_total_data = $1, collected_by_system = $2, last_collection_time = $3 WHERE telegram_id = $4',
      [updatedAsteroidTotal, updatedCollected, newLastCollectionTime, telegramId]
    );

    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –õ–∏–º–∏—Ç—ã –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ —Å–∏—Å—Ç–µ–º—ã ${systemId} –ü–û–õ–ù–û–°–¢–¨–Æ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´ –¥–æ ${totalSystemLimit}`);
    if (process.env.NODE_ENV === 'development') console.log(`üí£ –ë—ã–ª–æ: ${player.asteroid_total_data?.[systemId] || 0}, —Å—Ç–∞–ª–æ: ${totalSystemLimit}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤:', err);
  }
};

// GET –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞
router.get('/asteroids', (req, res) => {
  res.json(shopData.asteroidData);
});

router.get('/drones', (req, res) => {
  res.json(shopData.droneData);
});

router.get('/cargo', (req, res) => {
  res.json(shopData.cargoData);
});

router.get('/systems', (req, res) => {
  res.json(shopData.systemData);
});

// GET –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
router.get('/asteroids/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const player = await pool.query('SELECT asteroids FROM players WHERE telegram_id = $1', [telegramId]);
    if (!player.rows[0]) return res.status(404).json({ error: 'Player not found' });
    res.json(player.rows[0].asteroids || []);
  } catch (err) {
    console.error('Error fetching player asteroids:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

router.get('/drones/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const player = await pool.query('SELECT drones FROM players WHERE telegram_id = $1', [telegramId]);
    if (!player.rows[0]) return res.status(404).json({ error: 'Player not found' });
    res.json(player.rows[0].drones || []);
  } catch (err) {
    console.error('Error fetching player drones:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

router.get('/cargo/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const player = await pool.query('SELECT cargo_levels FROM players WHERE telegram_id = $1', [telegramId]);
    if (!player.rows[0]) return res.status(404).json({ error: 'Player not found' });
    res.json(player.rows[0].cargo_levels || []);
  } catch (err) {
    console.error('Error fetching player cargo:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/shop/buy - –û–°–ù–û–í–ù–û–ô –ú–ê–†–®–†–£–¢ –ü–û–ö–£–ü–ö–ò
router.post('/buy', async (req, res) => {
  const { telegramId, itemId, itemType, systemId, currency } = req.body;
  if (!telegramId || !itemId || !itemType || !systemId) return res.status(400).json({ error: 'Missing required fields' });

  if (process.env.NODE_ENV === 'development') console.log(`üõí –ü–û–ö–£–ü–ö–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Ç–æ–≤–∞—Ä ${itemType} #${itemId}, —Å–∏—Å—Ç–µ–º–∞ ${systemId}, –≤–∞–ª—é—Ç–∞: ${currency || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // üîí SECURITY: Lock player row to prevent race conditions
    const playerResult = await client.query(`
      SELECT * FROM players WHERE telegram_id = $1 FOR UPDATE
    `, [telegramId]);

    if (playerResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const player = playerResult.rows[0];

    // üîÑ –ê–í–¢–û–°–ë–û–† –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –∏–∑ –¢–ï–ö–£–©–ï–ô —Å–∏—Å—Ç–µ–º—ã (–ª–∞–π—Ñ—Ö–∞–∫ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã)
    if (process.env.NODE_ENV === 'development') console.log(`üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–±–æ—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ${systemId} –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π`);
    await autoCollectBeforePurchase(client, player, systemId);

    // üî• –ö–†–ò–¢–ò–ß–ù–û: –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –¢–û–¢ –ñ–ï client (–≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)!
    const updatedPlayerResult = await client.query('SELECT * FROM players WHERE telegram_id = $1', [telegramId]);
    const currentPlayer = updatedPlayerResult.rows[0];

    // PostgreSQL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSONB –ø–æ–ª—è –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–∞—Ä—Å–∏–º
    currentPlayer.asteroids = currentPlayer.asteroids || [];
    currentPlayer.drones = currentPlayer.drones || [];
    currentPlayer.cargo_levels = currentPlayer.cargo_levels || [];
    currentPlayer.last_collection_time = currentPlayer.last_collection_time || {};

    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–±–æ—Ä–∞: CS=${currentPlayer.cs}, CCC=${currentPlayer.ccc}`);

    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
    const itemData = (itemType === 'asteroid' ? shopData.asteroidData :
                     (itemType === 'drone' || itemType === 'drones') ? shopData.droneData :
                     itemType === 'cargo' ? shopData.cargoData : []).find(item => item.id === itemId && item.system === systemId);
    
    if (!itemData) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: `${itemType} not found` });
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ü–†–ï–î–ï–õ–Ø–ï–ú –í–ê–õ–Æ–¢–£ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –∏ –±–æ–º–±—ã)
    let currencyToUse = currency;
    
    if (!currencyToUse) {
      // üí£ –ü–†–û–í–ï–†–Ø–ï–ú, –≠–¢–û –ë–û–ú–ë–ê?
      const isBomb = itemData.isBomb === true;

      if (isBomb && itemData.currency) {
        // –î–ª—è –±–æ–º–±—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ shopData –≤–∞–ª—é—Ç—É
        currencyToUse = itemData.currency;
      } else if (itemData.currency === 'ton') {
        currencyToUse = 'ton';
      } else if (itemData.currency === 'cs') {
        currencyToUse = 'cs';
      } else {
        const useCs = systemId >= 1 && systemId <= 4;
        const useTon = systemId >= 5 && systemId <= 7;
        currencyToUse = useCs ? 'cs' : useTon ? 'ton' : 'ccc';
      }
    }
    
    if (process.env.NODE_ENV === 'development') console.log(`üí∞ –í–∞–ª—é—Ç–∞: ${currencyToUse}, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è: ${currency || '–Ω–µ—Ç'}, —ç—Ç–æ –±–æ–º–±–∞: ${itemData.isBomb || false}`);
    
    const price = itemData.price;

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Å–±–æ—Ä–∞
    let playerBalance;
    if (currencyToUse === 'ton') {
      playerBalance = parseFloat(currentPlayer.ton || 0);
    } else if (currencyToUse === 'cs') {
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å CS –∏–∑ currentPlayer
      playerBalance = parseFloat(currentPlayer.cs || 0);
    } else {
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å CCC –∏–∑ currentPlayer
      playerBalance = parseFloat(currentPlayer.ccc || 0);
    }
    
    if (process.env.NODE_ENV === 'development') console.log(`üîç –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞: ${playerBalance} ${currencyToUse}, —Ü–µ–Ω–∞: ${price}`);
    
    if (playerBalance < price) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Insufficient funds' });
    }

    // üí£ –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ë–û–ú–ë–´ (—Ç–æ–ª—å–∫–æ –ø–æ —Ñ–ª–∞–≥—É isBomb –∏–∑ shopData)
    const isBomb = itemData.isBomb === true;
    
    if (isBomb) {
      if (process.env.NODE_ENV === 'development') console.log('üí£ –ü–û–ö–£–ü–ö–ê –ë–û–ú–ë–´ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤!');
      
      // ‚úÖ –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú –ë–û–ú–ë–£ –í –ò–ù–í–ï–ù–¢–ê–†–¨ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!
      // ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤
      await restoreAsteroidLimits(client, telegramId, systemId);
      
    } else {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      if (itemType === 'asteroid' && currentPlayer.asteroids.some(item => item.id === itemId && item.system === systemId)) {
        await client.query('ROLLBACK');
        return res.status(400).json({ error: 'Asteroid already purchased' });
      }
      if ((itemType === 'drone' || itemType === 'drones') && currentPlayer.drones.some(item => item.id === itemId && item.system === systemId)) {
        await client.query('ROLLBACK');
        return res.status(400).json({ error: 'Drone already purchased' });
      }
      if (itemType === 'cargo' && currentPlayer.cargo_levels.some(item => item.id === itemId && item.system === systemId)) {
        await client.query('ROLLBACK');
        return res.status(400).json({ error: 'Cargo already purchased' });
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î
      let updatedItems = [];
      const newLastCollectionTime = { ...currentPlayer.last_collection_time };
      newLastCollectionTime[String(systemId)] = new Date().toISOString();
      
      if (itemType === 'asteroid') {
        updatedItems = [...(currentPlayer.asteroids || [])];
        
        const asteroidData = systemId === 4 ? 
          { id: itemId, system: systemId, totalCs: itemData.totalCs } :
          { id: itemId, system: systemId, totalCcc: itemData.totalCcc };
        
        updatedItems.push(asteroidData);
        
        const totalValue = systemId === 4 ? (itemData.totalCs || 0) : (itemData.totalCcc || 0);
        
        const freshPlayerQuery = await client.query('SELECT asteroid_total_data FROM players WHERE telegram_id = $1', [telegramId]);
        const freshAsteroidData = freshPlayerQuery.rows[0]?.asteroid_total_data || {};
        
        const updatedAsteroidTotal = { 
          ...freshAsteroidData, 
          [systemId]: (freshAsteroidData[systemId] || 0) + totalValue 
        };
        
        await client.query(
          'UPDATE players SET asteroids = $1::jsonb, asteroid_total_data = $2, last_collection_time = $3 WHERE telegram_id = $4',
          [JSON.stringify(updatedItems), updatedAsteroidTotal, newLastCollectionTime, telegramId]
        );
        
      } else if (itemType === 'drone' || itemType === 'drones') {
        updatedItems = [...(currentPlayer.drones || [])];
        
        const droneData = systemId === 4 ? 
          { id: itemId, system: systemId, csPerDay: itemData.csPerDay } :
          { id: itemId, system: systemId, cccPerDay: itemData.cccPerDay };
        
        updatedItems.push(droneData);
        
        await client.query(
          'UPDATE players SET drones = $1::jsonb, last_collection_time = $2 WHERE telegram_id = $3',
          [JSON.stringify(updatedItems), newLastCollectionTime, telegramId]
        );
        
      } else if (itemType === 'cargo') {
        updatedItems = [...(currentPlayer.cargo_levels || [])];
        
        const cargoData = { id: itemId, system: systemId, capacity: itemData.capacity };
        updatedItems.push(cargoData);
        
        await client.query(
          'UPDATE players SET cargo_levels = $1::jsonb, last_collection_time = $2 WHERE telegram_id = $3',
          [JSON.stringify(updatedItems), newLastCollectionTime, telegramId]
        );
      }
    }

    // –°–ø–∏—Å–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    const updatedBalanceAfterPurchase = (playerBalance - price).toFixed(5);
    await client.query(
      `UPDATE players SET ${currencyToUse} = $1 WHERE telegram_id = $2`,
      [updatedBalanceAfterPurchase, telegramId]
    );

    // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    await processReferralReward(client, telegramId, price, currencyToUse);

    // –ü–µ—Ä–µ—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    await recalculatePlayerData(client, telegramId);

    await client.query('COMMIT');
    
    const finalPlayer = await getPlayer(telegramId);
    
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ü–û–ö–£–ü–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: ${itemType} #${itemId} –∑–∞ ${price} ${currencyToUse}${isBomb ? ' (–ë–û–ú–ë–ê - –õ–ò–ú–ò–¢–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´!)' : ''}`);
    res.json(finalPlayer);
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// POST /api/shop/buy-system
router.post('/buy-system', async (req, res) => {
  const { telegramId, systemId, customPrice } = req.body;
  if (!telegramId || !systemId) return res.status(400).json({ error: 'Telegram ID and System ID are required' });
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // üîí SECURITY: Lock player row to prevent race conditions
    const playerResult = await client.query(`
      SELECT * FROM players WHERE telegram_id = $1 FOR UPDATE
    `, [telegramId]);

    if (playerResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const player = playerResult.rows[0];

    const systemToBuy = shopData.systemData.find(system => system.id === systemId);
    if (!systemToBuy) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'System not found' });
    }
    
    let priceToCheck = systemToBuy.price;
    if (systemToBuy.dynamic && customPrice) {
      if (!Number.isInteger(customPrice) || customPrice < 15 || customPrice > 10000) {
        await client.query('ROLLBACK');
        return res.status(400).json({ error: 'Custom price must be an integer between 15 and 10000' });
      }
      priceToCheck = customPrice;
    }
    
    if (systemToBuy.currency === 'cs' && parseFloat(player.cs) < priceToCheck) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Not enough CS' });
    }
    if (systemToBuy.currency === 'ton' && parseFloat(player.ton) < priceToCheck) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Not enough TON' });
    }
    if (player.unlocked_systems.includes(systemId)) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Player already owns this system' });
    }
    
    const updatedCs = systemToBuy.currency === 'cs' ? parseFloat(player.cs) - priceToCheck : parseFloat(player.cs);
    const updatedTon = systemToBuy.currency === 'ton' ? parseFloat(player.ton) - priceToCheck : parseFloat(player.ton);
    const updatedUnlockedSystems = [...player.unlocked_systems, systemId];
    const updatedCollectedBySystem = { ...player.collected_by_system };
    updatedCollectedBySystem[String(systemId)] = 0;
    const newLastCollectionTime = { ...player.last_collection_time };
    newLastCollectionTime[String(systemId)] = new Date().toISOString();
    
    await client.query(
      'UPDATE players SET cs = $1, ton = $2, unlocked_systems = $3, collected_by_system = $4, last_collection_time = $5 WHERE telegram_id = $6',
      [updatedCs, updatedTon, JSON.stringify(updatedUnlockedSystems), updatedCollectedBySystem, newLastCollectionTime, telegramId]
    );

    await processReferralReward(client, telegramId, priceToCheck, systemToBuy.currency);
    await recalculatePlayerData(client, telegramId);

    await client.query('COMMIT');
    const updatedPlayer = await getPlayer(telegramId);
    res.json(updatedPlayer);
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('Error buying system:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// POST /api/shop/recalculate/:telegramId
router.post('/recalculate/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    await recalculatePlayerData(client, telegramId);
    await client.query('COMMIT');
    const updatedPlayer = await getPlayer(telegramId);
    res.json({ message: 'Player data recalculated successfully', player: updatedPlayer });
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('Error recalculating player data:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

module.exports = router;