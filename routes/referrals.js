// ===== routes/referrals.js - –ü–û–õ–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î =====
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const { logPlayerAction, detectSuspiciousActivity, updateLifetimeStats, logBalanceChange } = require('./shared/logger');

const router = express.Router();

// POST /api/referrals/register - –ë–ï–ó –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–• –ù–ê–ì–†–ê–î
router.post('/register', async (req, res) => {
  const { telegramId, referrerId } = req.body;
  if (!telegramId || !referrerId) return res.status(400).json({ error: 'Telegram ID and Referrer ID are required' });
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const playerResult = await client.query('SELECT referrer_id FROM players WHERE telegram_id = $1', [telegramId]);
    const player = playerResult.rows[0];
    if (player && player.referrer_id) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Player already has a referrer' });
    }

    // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–£–Æ –ê–ö–¢–ò–í–ù–û–°–¢–¨
    const suspicious = await detectSuspiciousActivity(telegramId, 'register_referral', 0, null);
    if (suspicious) {
      console.log(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${telegramId}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const referrer = await getPlayer(referrerId);
    if (!referrer) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Referrer not found' });
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≤—è–∑—å –ò —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    await client.query('UPDATE players SET referrer_id = $1 WHERE telegram_id = $2', [referrerId, telegramId]);
    await client.query('UPDATE players SET referrals_count = referrals_count + 1 WHERE telegram_id = $1', [referrerId]);
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ë–ï–ó –ù–ê–ì–†–ê–î–´ (0, 0)
    await client.query('INSERT INTO referrals (referrer_id, referred_id, cs_earned, ton_earned, timestamp) VALUES ($1, $2, $3, $4, NOW())', [referrerId, telegramId, 0, 0]);

    // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –†–ï–§–ï–†–ê–õ–ê –î–õ–Ø –ù–û–í–û–ì–û –ò–ì–†–û–ö–ê
    await logPlayerAction(
      telegramId, 
      'register_as_referral', 
      0, 
      null, 
      null, 
      {
        referrerId: referrerId,
        action: 'became_referral'
      }, 
      req
    );

    // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –†–ï–§–ï–†–ê–õ–ê –î–õ–Ø –†–ï–§–ï–†–ï–†–ê (–ë–ï–ó –ù–ê–ì–†–ê–î–´)
    await logPlayerAction(
      referrerId, 
      'referral_registered', 
      0, 
      null, 
      null, 
      {
        referredId: telegramId,
        action: 'new_referral_registered'
      }, 
      req
    );

    // üìä –û–ë–ù–û–í–õ–Ø–ï–ú LIFETIME –°–¢–ê–¢–ò–°–¢–ò–ö–£ –†–ï–§–ï–†–ï–†–ê (—Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
    await updateLifetimeStats(referrerId, 'referral_registered', 1);

    await client.query('COMMIT');
    const updatedPlayer = await getPlayer(telegramId);
    res.json(updatedPlayer);
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('Error registering referral:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// GET /api/referrals/list/:telegramId
router.get('/list/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const referrals = await pool.query(
      'SELECT referred_telegram_id, referrer_telegram_id FROM referrals WHERE referrer_telegram_id = $1',
      [telegramId]
    );
    res.json(referrals.rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// GET /api/referrals/honor-board
router.get('/honor-board', async (req, res) => {
  try {
    const honorBoardResult = await pool.query('SELECT telegram_id, username, referrals_count FROM players ORDER BY referrals_count DESC LIMIT 10');
    res.json(honorBoardResult.rows);
  } catch (err) {
    console.error('Error fetching honor board:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/referrals/create
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ routes/referrals.js

// POST /api/referrals/create - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
router.post('/create', async (req, res) => {
  const { telegramId } = req.body;
  if (!telegramId) return res.status(400).json({ error: 'Telegram ID is required' });
  
  try {
    const player = await getPlayer(telegramId);
    if (!player) return res.status(404).json({ error: 'Player not found' });
    
    if (player.referral_link) {
      // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å, –Ω–æ –æ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º
      if (player.referral_link.includes('?start=')) {
        const newReferralLink = player.referral_link.replace('?start=', '?startapp=');
        await pool.query('UPDATE players SET referral_link = $1 WHERE telegram_id = $2', [newReferralLink, telegramId]);
        
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è ${telegramId}: ${newReferralLink}`);
        
        const updatedPlayer = await getPlayer(telegramId);
        return res.json({ referral_link: updatedPlayer.referral_link });
      }
      
      return res.json({ referral_link: player.referral_link });
    }
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º startapp –≤–º–µ—Å—Ç–æ start –¥–ª—è Mini Apps
    const referralLink = `https://t.me/CosmoClickBot?startapp=${telegramId}`;
    await pool.query('UPDATE players SET referral_link = $1 WHERE telegram_id = $2', [referralLink, telegramId]);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è ${telegramId}: ${referralLink}`);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    await logPlayerAction(
      telegramId, 
      'create_referral_link', 
      0, 
      null, 
      null, 
      {
        referralLink: referralLink,
        action: 'generated_referral_link',
        linkType: 'startapp' // —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
      }, 
      req
    );

    const updatedPlayer = await getPlayer(telegramId);
    res.json({ referral_link: updatedPlayer.referral_link });
  } catch (err) {
    console.error('Error creating referral link:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: Endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
router.post('/update-links', async (req, res) => {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const oldLinksResult = await pool.query(
      "SELECT telegram_id, referral_link FROM players WHERE referral_link LIKE '%?start=%'"
    );
    
    const oldLinks = oldLinksResult.rows;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${oldLinks.length} —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    let updated = 0;
    for (const player of oldLinks) {
      try {
        const newLink = player.referral_link.replace('?start=', '?startapp=');
        await pool.query(
          'UPDATE players SET referral_link = $1 WHERE telegram_id = $2',
          [newLink, player.telegram_id]
        );
        updated++;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${player.telegram_id} -> ${newLink}`);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ${player.telegram_id}:`, err);
      }
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∏–∑ ${oldLinks.length} —Å—Å—ã–ª–æ–∫`);
    
    res.json({
      message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`,
      total: oldLinks.length,
      updated: updated
    });
  } catch (err) {
    console.error('Error updating referral links:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;