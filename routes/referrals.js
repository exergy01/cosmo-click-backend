const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const { logPlayerAction, detectSuspiciousActivity, updateLifetimeStats, logBalanceChange } = require('./shared/logger');

const router = express.Router();

// POST /api/referrals/register - –ë–ï–ó –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–• –ù–ê–ì–†–ê–î
router.post('/register', async (req, res) => {
  const { telegramId, referrerId } = req.body;
  if (!telegramId || !referrerId) return res.status(400).json({ error: 'Telegram ID and Referrer ID are required' });
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const playerResult = await client.query('SELECT referrer_id FROM players WHERE telegram_id = $1', [telegramId]);
    const player = playerResult.rows[0];
    if (player && player.referrer_id) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Player already has a referrer' });
    }

    // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–£–Æ –ê–ö–¢–ò–í–ù–û–°–¢–¨
    const suspicious = await detectSuspiciousActivity(telegramId, 'register_referral', 0, null);
    if (suspicious) {
      console.log(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${telegramId}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const referrer = await getPlayer(referrerId);
    if (!referrer) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Referrer not found' });
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≤—è–∑—å –ò —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    await client.query('UPDATE players SET referrer_id = $1 WHERE telegram_id = $2', [referrerId, telegramId]);
    await client.query('UPDATE players SET referrals_count = referrals_count + 1 WHERE telegram_id = $1', [referrerId]);
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ë–ï–ó –ù–ê–ì–†–ê–î–´ (0, 0) - –ò–°–ü–û–õ–¨–ó–£–ï–ú created_at
    await client.query('INSERT INTO referrals (referrer_id, referred_id, cs_earned, ton_earned, created_at) VALUES ($1, $2, $3, $4, NOW())', [referrerId, telegramId, 0, 0]);

    // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –†–ï–§–ï–†–ê–õ–ê –î–õ–Ø –ù–û–í–û–ì–û –ò–ì–†–û–ö–ê
    await logPlayerAction(
      telegramId, 
      'register_as_referral', 
      0, 
      null, 
      null, 
      {
        referrerId: referrerId,
        action: 'became_referral'
      }, 
      req
    );

    // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –†–ï–§–ï–†–ê–õ–ê –î–õ–Ø –†–ï–§–ï–†–ï–†–ê (–ë–ï–ó –ù–ê–ì–†–ê–î–´)
    await logPlayerAction(
      referrerId, 
      'referral_registered', 
      0, 
      null, 
      null, 
      {
        referredId: telegramId,
        action: 'new_referral_registered'
      }, 
      req
    );

    // üìä –û–ë–ù–û–í–õ–Ø–ï–ú LIFETIME –°–¢–ê–¢–ò–°–¢–ò–ö–£ –†–ï–§–ï–†–ï–†–ê (—Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
    await updateLifetimeStats(referrerId, 'referral_registered', 1);

    await client.query('COMMIT');
    const updatedPlayer = await getPlayer(telegramId);
    res.json(updatedPlayer);
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('Error registering referral:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// GET /api/referrals/list/:telegramId - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
router.get('/list/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è: ${telegramId}`);
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–°: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è + JOIN –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username
    const referrals = await pool.query(`
      SELECT 
        r.referred_id,
        r.referrer_id,
        r.cs_earned,
        r.ton_earned,
        r.created_at,
        p.username,
        p.first_name
      FROM referrals r
      LEFT JOIN players p ON r.referred_id = p.telegram_id
      WHERE r.referrer_id = $1
      ORDER BY r.created_at DESC
    `, [telegramId]);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrals.rows.length}`);
    console.log('üìã –î–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', referrals.rows);
    
    res.json(referrals.rows);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
    res.status(500).json({ error: err.message });
  }
});

// GET /api/referrals/honor-board - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô (—Å—á–∏—Ç–∞–µ–º –∏–∑ players.referrer_id)
router.get('/honor-board', async (req, res) => {
  try {
    console.log('üèÜ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫—É –ø–æ—á–µ—Ç–∞...');
    
    // üî• –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–î–°–ß–ï–¢: —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥—ã–π ID –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –ø–æ–ª–µ referrer_id
    const honorBoardResult = await pool.query(`
      SELECT 
        p.telegram_id,
        p.username,
        p.first_name,
        COUNT(ref.referrer_id) as actual_referrals_count
      FROM players p
      LEFT JOIN players ref ON ref.referrer_id = p.telegram_id
      GROUP BY p.telegram_id, p.username, p.first_name
      HAVING COUNT(ref.referrer_id) > 0
      ORDER BY actual_referrals_count DESC
      LIMIT 10
    `);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–ª–µ–º
    const result = honorBoardResult.rows.map(row => ({
      telegram_id: row.telegram_id,
      username: row.username || row.first_name,
      referrals_count: parseInt(row.actual_referrals_count)
    }));
    
    console.log('üèÜ –î–æ—Å–∫–∞ –ø–æ—á–µ—Ç–∞:', result);
    res.json(result);
  } catch (err) {
    console.error('Error fetching honor board:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/referrals/create - üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
router.post('/create', async (req, res) => {
  const { telegramId } = req.body;
  if (!telegramId) return res.status(400).json({ error: 'Telegram ID is required' });
  const player = await getPlayer(telegramId);
  if (!player) return res.status(404).json({ error: 'Player not found' });
  
  // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
  if (player.referral_link) {
    // –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
    if (player.referral_link.includes('?start=')) {
      const newReferralLink = player.referral_link.replace('?start=', '?startapp=');
      await pool.query('UPDATE players SET referral_link = $1 WHERE telegram_id = $2', [newReferralLink, telegramId]);
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${telegramId} -> ${newReferralLink}`);
      
      const updatedPlayer = await getPlayer(telegramId);
      return res.json({ referral_link: updatedPlayer.referral_link });
    }
    return res.json({ referral_link: player.referral_link });
  }
  
  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É —Å startapp
  const referralLink = `https://t.me/CosmoClickBot?startapp=${telegramId}`;
  await pool.query('UPDATE players SET referral_link = $1 WHERE telegram_id = $2', [referralLink, telegramId]);

  // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò
  await logPlayerAction(
    telegramId, 
    'create_referral_link', 
    0, 
    null, 
    null, 
    {
      referralLink: referralLink,
      action: 'generated_referral_link'
    }, 
    req
  );

  const updatedPlayer = await getPlayer(telegramId);
  res.json({ referral_link: updatedPlayer.referral_link });
});

module.exports = router;