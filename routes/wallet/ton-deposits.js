// routes/wallet/ton-deposits.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –í–†–ï–ú–ï–ù–ù–´–ú –û–ö–ù–û–ú –ò –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï–ú –ü–û–ü–´–¢–û–ö
const express = require('express');
const pool = require('../../db');
const { getPlayer } = require('../shared/getPlayer');
const { notifyTonDeposit } = require('../telegramBot');
const axios = require('axios');

const router = express.Router();

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON
const getTonTransactions = async (gameWalletAddress, limit = 50) => {
  console.log(`–ü–æ–ª—É—á–∞–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${gameWalletAddress}`);
  
  // –ü–†–ò–û–†–ò–¢–ï–¢: TONAPI —Å —Ç–æ–∫–µ–Ω–æ–º
  if (process.env.TONAPI_TOKEN) {
    try {
      console.log('–ü—Ä–æ–±—É–µ–º TONAPI —Å —Ç–æ–∫–µ–Ω–æ–º...');
      const response = await axios.get(`https://tonapi.io/v2/blockchain/accounts/${gameWalletAddress}/transactions`, {
        params: { 
          limit: Math.min(limit, 100),
          sort_order: 'desc'
        },
        headers: {
          'Authorization': `Bearer ${process.env.TONAPI_TOKEN}`,
          'Content-Type': 'application/json'
        },
        timeout: 15000
      });

      if (response.data && response.data.transactions) {
        const transactions = response.data.transactions.map(tx => ({
          transaction_id: { 
            hash: tx.hash,
            lt: tx.lt.toString()
          },
          utime: tx.utime,
          in_msg: {
            source: tx.in_msg?.source?.address || tx.in_msg?.source,
            value: tx.in_msg?.value
          }
        }));
        console.log(`TONAPI —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        return transactions;
      }
    } catch (error) {
      console.log('TONAPI –æ—à–∏–±–∫–∞:', error.message);
    }
  }

  // –†–µ–∑–µ—Ä–≤: TON Center
  if (process.env.TONCENTER_API_KEY) {
    try {
      console.log('–ü—Ä–æ–±—É–µ–º TON Center —Å API –∫–ª—é—á–æ–º...');
      const response = await axios.get('https://toncenter.com/api/v2/getTransactions', {
        params: {
          address: gameWalletAddress,
          limit: Math.min(limit, 50),
          archival: true
        },
        headers: {
          'X-API-Key': process.env.TONCENTER_API_KEY
        },
        timeout: 15000
      });

      if (response.data.ok && response.data.result) {
        console.log(`TON Center —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ ${response.data.result.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
        return response.data.result;
      }
    } catch (error) {
      console.log('TON Center –æ—à–∏–±–∫–∞:', error.message);
    }
  }

  throw new Error('–í—Å–µ TON API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
const ensureExpectedDepositsTable = async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS expected_deposits (
        id SERIAL PRIMARY KEY,
        player_id VARCHAR(50) NOT NULL,
        amount DECIMAL(10, 8) NOT NULL,
        from_address VARCHAR(100) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP NOT NULL,
        processed BOOLEAN DEFAULT FALSE
      )
    `);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_expected_player_from_amount 
      ON expected_deposits (player_id, from_address, amount)
    `);
    
    await pool.query(`
      CREATE INDEX IF NOT EXISTS idx_expected_expires_processed 
      ON expected_deposits (expires_at, processed)
    `);
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ expected_deposits –≥–æ—Ç–æ–≤–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã expected_deposits:', error);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
ensureExpectedDepositsTable();

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–æ–º
const isDepositForPlayerWithTimeWindow = async (tx, playerId, fromAddress) => {
    const txTime = new Date(tx.utime * 1000);
    const minutesAgo = Math.floor((Date.now() - txTime.getTime()) / (1000 * 60));
    const amount = parseFloat(tx.in_msg.value) / 1000000000;
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–æ–º:`);
    console.log(`   - –°—É–º–º–∞: ${amount} TON`);
    console.log(`   - –û—Ç –∞–¥—Ä–µ—Å–∞: ${fromAddress || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    console.log(`   - –í—Ä–µ–º—è: ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
    console.log(`   - –î–ª—è –∏–≥—Ä–æ–∫–∞: ${playerId}`);
    
    try {
      // –û–°–ù–û–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò—â–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∏–≥—Ä–æ–∫—É –∏ —Å—É–º–º–µ (–±–µ–∑ –∞–¥—Ä–µ—Å–∞)
      const expectedResult = await pool.query(
        `SELECT id, amount, created_at, from_address FROM expected_deposits 
         WHERE player_id = $1 
         AND ABS(amount - $2) < 0.001
         AND expires_at > NOW()
         AND NOT processed
         ORDER BY created_at DESC 
         LIMIT 1`,
        [playerId, amount]
      );
      
      if (expectedResult.rows.length > 0) {
        const expectedDeposit = expectedResult.rows[0];
        const expectedMinutesAgo = Math.floor((Date.now() - new Date(expectedDeposit.created_at).getTime()) / (1000 * 60));
        
        console.log(`‚úÖ –ù–ê–ô–î–ï–ù –û–ñ–ò–î–ê–ï–ú–´–ô –î–ï–ü–û–ó–ò–¢: ${expectedDeposit.amount} TON (${expectedMinutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        console.log(`   - –û–∂–∏–¥–∞–ª—Å—è –æ—Ç: ${expectedDeposit.from_address}`);
        console.log(`   - –ü—Ä–∏—à–µ–ª –æ—Ç: ${fromAddress}`);
        
        // –ü–æ–º–µ—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
        await pool.query(
          'UPDATE expected_deposits SET processed = true WHERE id = $1',
          [expectedDeposit.id]
        );
        
        return {
          valid: true,
          method: 'expected_deposit_by_amount',
          details: `–ù–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ —Å—É–º–º–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`
        };
      }
      
      // –†–ï–ó–ï–†–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û—á–µ–Ω—å —Å–≤–µ–∂–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç)
      if (minutesAgo < 2) {
        console.log(`‚ö†Ô∏è –†–ê–ó–†–ï–®–ï–ù–û: –û—á–µ–Ω—å —Å–≤–µ–∂–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (${minutesAgo} –º–∏–Ω)`);
        return {
          valid: true,
          method: 'fallback_very_fresh',
          details: `–û—á–µ–Ω—å —Å–≤–µ–∂–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`
        };
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
    }
    
    console.log(`‚ùå –û–¢–ö–õ–û–ù–ï–ù–û: –ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
    return {
      valid: false,
      method: 'no_expected_deposit',
      details: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π'
    };
  };
  // –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï ton-deposits.js - –ß–∞—Å—Ç—å 2: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ –° –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï–ú –°–¢–ê–¢–£–°–û–í
async function processDeposit(playerId, amount, hash, fromAddress, validationInfo) {
    console.log(`üí∞ –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ü–û–ó–ò–¢–ê:`);
    console.log(`   - –°—É–º–º–∞: ${amount} TON`);
    console.log(`   - –û—Ç: ${fromAddress}`);
    console.log(`   - Hash: ${hash}`);
    console.log(`   - –ò–≥—Ä–æ–∫: ${playerId}`);
    console.log(`   - –ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationInfo.method}`);
    
    const client = await pool.connect();
    try {
      await client.query('BEGIN');
      
      // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–∞
      const playerResult = await client.query(
        'SELECT telegram_id, first_name, username, ton FROM players WHERE telegram_id = $1',
        [playerId]
      );
  
      if (playerResult.rows.length === 0) {
        console.log(`‚ùå –ò–≥—Ä–æ–∫ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        await client.query('ROLLBACK');
        return { success: false, error: 'Player not found' };
      }
  
      const playerData = playerResult.rows[0];
      const currentBalance = parseFloat(playerData.ton || '0');
      console.log(`‚úÖ –ò–≥—Ä–æ–∫: ${playerData.first_name}, –±–∞–ª–∞–Ω—Å: ${currentBalance} TON`);
      
      // –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
      const existingCheck = await client.query(
        'SELECT id, status FROM ton_deposits WHERE transaction_hash = $1 AND status = $2',
        [hash, 'completed']
      );
  
      if (existingCheck.rows.length > 0) {
        console.log(`‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ${hash} (—Å—Ç–∞—Ç—É—Å: ${existingCheck.rows[0].status})`);
        await client.query('ROLLBACK');
        return { success: false, error: 'Transaction already processed', skipped: true };
      }
      
      // –®–ê–ì 3: –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
      const newBalance = currentBalance + amount;
      console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å: ${currentBalance} + ${amount} = ${newBalance}`);
      
      const updateResult = await client.query(
        'UPDATE players SET ton = $1 WHERE telegram_id = $2 RETURNING ton',
        [newBalance, playerId]
      );
      
      if (updateResult.rows.length === 0) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å`);
        await client.query('ROLLBACK');
        return { success: false, error: 'Failed to update balance' };
      }
  
      // –®–ê–ì 4: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'completed'
      const depositResult = await client.query(
        `INSERT INTO ton_deposits (
          player_id, amount, transaction_hash, status, created_at
        ) VALUES ($1, $2, $3, 'completed', NOW()) 
        RETURNING id`,
        [playerId, amount, hash]
      );
      
      console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç –∑–∞–ø–∏—Å–∞–Ω —Å ID: ${depositResult.rows[0].id}`);
  
      // –®–ê–ì 5: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ balance_history (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      try {
        await client.query(
          `INSERT INTO balance_history (
            telegram_id, currency, old_balance, new_balance, 
            change_amount, reason, details, timestamp
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())`,
          [
            playerId,
            'ton',
            currentBalance,
            newBalance,
            amount,
            'deposit_with_time_window',
            JSON.stringify({
              transaction_hash: hash,
              from_address: fromAddress,
              validation_method: validationInfo.method,
              validation_details: validationInfo.details,
              timestamp: new Date().toISOString()
            })
          ]
        );
        console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∞`);
      } catch (historyError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', historyError.message);
      }
  
      // –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await client.query('COMMIT');
      console.log(`üéâ –£–°–ü–ï–•! –î–µ–ø–æ–∑–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${amount} TON –¥–ª—è ${playerData.first_name}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
      try {
        if (notifyTonDeposit) {
          await notifyTonDeposit(playerData, amount, hash);
          console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        }
      } catch (notifyErr) {
        console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', notifyErr.message);
      }
      
      return {
        success: true,
        amount,
        new_balance: newBalance,
        hash: hash.substring(0, 16) + '...',
        old_balance: currentBalance,
        deposit_id: depositResult.rows[0].id,
        validation_method: validationInfo.method
      };
      
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ processDeposit:', error);
      return { success: false, error: error.message };
    } finally {
      client.release();
    }
  }
  
  // POST /register-expected - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ + –∑–∞–ø–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
  router.post('/register-expected', async (req, res) => {
    const { player_id, amount, from_address, timestamp } = req.body;
    
    if (!player_id || !amount || !from_address) {
      return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }
  
    try {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      await pool.query(
        'DELETE FROM expected_deposits WHERE player_id = $1 AND created_at < NOW() - INTERVAL \'1 hour\'',
        [player_id]
      );
  
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–∂–∏–¥–∞–µ–º–æ–º –¥–µ–ø–æ–∑–∏—Ç–µ
      const result = await pool.query(
        `INSERT INTO expected_deposits (
          player_id, amount, from_address, created_at, expires_at
        ) VALUES ($1, $2, $3, NOW(), NOW() + INTERVAL '10 minutes')
        RETURNING id`,
        [player_id, parseFloat(amount), from_address]
      );
      
      // –ù–û–í–û–ï: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ ton_deposits —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
      try {
        await pool.query(
          `INSERT INTO ton_deposits (
            player_id, amount, transaction_hash, status, created_at
          ) VALUES ($1, $2, $3, 'pending', NOW())`,
          [
            player_id,
            parseFloat(amount),
            null // transaction_hash –±—É–¥–µ—Ç –ø–æ–∑–∂–µ
          ]
        );
        console.log('‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending');
      } catch (depositErr) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ø—ã—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', depositErr);
      }
      
      console.log(`üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–∂–∏–¥–∞–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${amount} TON –æ—Ç ${from_address} –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${player_id}`);
      
      res.json({ 
        success: true, 
        message: '–û–∂–∏–¥–∞–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
        expected_deposit_id: result.rows[0].id
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
  
  // –ù–û–í–´–ô ENDPOINT: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø—ã—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ (–æ—Ç–º–µ–Ω–∞/–æ—à–∏–±–∫–∞)
  router.post('/update-deposit-status', async (req, res) => {
    const { player_id, amount, status } = req.body;
    
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:', { player_id, amount, status });
    
    if (!player_id || !amount || !status) {
      return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }
  
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å pending –¥–µ–ø–æ–∑–∏—Ç–∞
      const result = await pool.query(
        `UPDATE ton_deposits 
         SET status = $1
         WHERE player_id = $2 
           AND amount = $3 
           AND status = 'pending' 
           AND created_at >= NOW() - INTERVAL '1 hour'
         RETURNING id`,
        [status, player_id, parseFloat(amount)]
      );
      
      if (result.rows.length > 0) {
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '${status}'`);
        res.json({ success: true, message: `–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${status}` });
      } else {
        console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω pending –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        res.json({ success: false, message: 'Pending –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
  // –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï ton-deposits.js - –ß–∞—Å—Ç—å 3: –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

// POST /check-deposits - –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
router.post('/check-deposits', async (req, res) => {
    const { player_id, sender_address } = req.body;
    
    console.log('üîí ===============================================================');
    console.log('üîí –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ï–ü–û–ó–ò–¢–û–í –° –í–†–ï–ú–ï–ù–ù–´–ú –û–ö–ù–û–ú');
    console.log('üîí –ò–≥—Ä–æ–∫:', player_id);
    console.log('üîí –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:', sender_address || '–Ω–µ —É–∫–∞–∑–∞–Ω');
    console.log('üîí ===============================================================');
    
    if (!player_id) {
      return res.status(400).json({ error: 'Player ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
  
    try {
      const gameWalletAddress = process.env.GAME_WALLET_ADDRESS || 
        'UQCOZZx-3RSxIVS2QFcuMBwDUZPWgh8FhRT7I6Qo_pqT-h60';
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
      let transactions = [];
      try {
        transactions = await getTonTransactions(gameWalletAddress, 50);
        console.log(`üîó –ü–æ–ª—É—á–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞`);
      } catch (apiError) {
        console.error('üí• –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', apiError.message);
        return res.json({ 
          success: false, 
          error: 'TON API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          details: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç'
        });
      }
      
      const processed = [];
      let skippedCount = 0;
      let rejectedCount = 0;
      let errorCount = 0;
      
      console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞...');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      for (let i = 0; i < transactions.length; i++) {
        const tx = transactions[i];
        
        console.log(`\nüìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${i+1}/${transactions.length}:`);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (!tx.in_msg || !tx.in_msg.value || tx.in_msg.value === '0') {
          console.log('‚≠ï –ü—Ä–æ–ø—É—Å–∫: –∏—Å—Ö–æ–¥—è—â–∞—è –∏–ª–∏ –Ω—É–ª–µ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è');
          continue;
        }
  
        const amount = parseFloat(tx.in_msg.value) / 1000000000;
        const hash = tx.transaction_id.hash;
        const fromAddress = tx.in_msg.source;
        const txTime = new Date(tx.utime * 1000);
        const minutesAgo = Math.floor((Date.now() - txTime.getTime()) / (1000 * 60));
        
        console.log(`üí∞ –°—É–º–º–∞: ${amount} TON`);
        console.log(`üîó Hash: ${hash.substring(0, 20)}...`);
        console.log(`üë§ –û—Ç: ${fromAddress ? fromAddress.substring(0, 15) + '...' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`‚è∞ –í—Ä–µ–º—è: ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
        
        // –§–∏–ª—å—Ç—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        if (amount < 0.005) {
          console.log('‚≠ï –ü—Ä–æ–ø—É—Å–∫: —Å—É–º–º–∞ –º–µ–Ω—å—à–µ 0.005 TON');
          continue;
        }
        
        // üîí –ü–†–û–í–ï–†–ö–ê –° –í–†–ï–ú–ï–ù–ù–´–ú –û–ö–ù–û–ú
        const validationResult = await isDepositForPlayerWithTimeWindow(tx, player_id, fromAddress);
        
        if (!validationResult.valid) {
          console.log(`üö´ –û–¢–ö–õ–û–ù–ï–ù–û: ${validationResult.details}`);
          rejectedCount++;
          continue;
        }
        
        console.log(`‚úÖ –ü–†–ò–ù–Ø–¢–û: ${validationResult.details}`);
        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞...');
        
        // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –î–ï–ü–û–ó–ò–¢
        const result = await processDeposit(player_id, amount, hash, fromAddress, validationResult);
        
        if (result.success) {
          processed.push(result);
          console.log(`üéâ –£–°–ü–ï–•! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${amount} TON`);
        } else if (result.skipped) {
          skippedCount++;
          console.log(`‚ö†Ô∏è –ü–†–û–ü–£–©–ï–ù–û: ${result.error}`);
        } else {
          errorCount++;
          console.log(`‚ùå –û–®–ò–ë–ö–ê: ${result.error}`);
        }
      }
      
      console.log('\nüîí ===============================================================');
      console.log('üîí –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
      console.log(`üîí –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed.length}`);
      console.log(`üîí –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–ø—Ä–æ–ø—É—â–µ–Ω–æ): ${skippedCount}`);
      console.log(`üîí –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${rejectedCount}`);
      console.log(`üîí –û—à–∏–±–æ–∫: ${errorCount}`);
      console.log('üîí ===============================================================');
      
      if (processed.length > 0) {
        const totalAmount = processed.reduce((sum, dep) => sum + dep.amount, 0);
        
        res.json({
          success: true,
          message: `–£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`,
          deposits_found: processed.length,
          total_amount: totalAmount.toFixed(8),
          rejected_for_security: rejectedCount,
          deposits: processed.map(dep => ({
            amount: dep.amount.toFixed(8),
            hash: dep.hash,
            new_balance: dep.new_balance.toFixed(8),
            old_balance: dep.old_balance.toFixed(8),
            deposit_id: dep.deposit_id,
            validation_method: dep.validation_method
          }))
        });
      } else {
        let message = '–ù–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
        if (rejectedCount > 0) {
          message += ` (${rejectedCount} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)`;
        }
        if (skippedCount > 0) {
          message += ` (${skippedCount} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)`;
        }
        
        res.json({
          success: true,
          message: message,
          deposits_found: 0,
          total_amount: '0',
          rejected_for_security: rejectedCount,
          skipped: skippedCount,
          errors: errorCount
        });
      }
  
    } catch (error) {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      res.status(500).json({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message 
      });
    }
  });
  
  // POST /manual-add - –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
  router.post('/manual-add', async (req, res) => {
    const { player_id, amount, transaction_hash, admin_key } = req.body;
    
    if (admin_key !== 'cosmo_admin_2025') {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    }
    
    if (!player_id || !amount || !transaction_hash) {
      return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }
  
    const validationInfo = {
      method: 'manual_admin',
      details: '–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
    };
  
    const result = await processDeposit(player_id, parseFloat(amount), transaction_hash, 'manual_admin', validationInfo);
    
    if (result.success) {
      res.json({
        success: true,
        message: '–†—É—á–Ω–æ–π –¥–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
        ...result
      });
    } else {
      res.status(500).json(result);
    }
  });
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
  const cleanupExpiredDeposits = async () => {
    try {
      const result = await pool.query(
        'DELETE FROM expected_deposits WHERE expires_at < NOW() - INTERVAL \'1 hour\''
      );
      if (result.rowCount > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.rowCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
    }
  };
  
  // POST /debug-deposits - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô  
  router.post('/debug-deposits', async (req, res) => {
    // ... –≤–µ—Å—å –∫–æ–¥ debug –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º ...
    const { player_id } = req.body;
    
    if (!player_id) {
      return res.status(400).json({ error: 'Player ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
  
    try {
      const gameWalletAddress = process.env.GAME_WALLET_ADDRESS || 
        'UQCOZZx-3RSxIVS2QFcuMBwDUZPWgh8FhRT7I6Qo_pqT-h60';
      
      const playerResult = await pool.query(
        'SELECT telegram_id, first_name, ton FROM players WHERE telegram_id = $1',
        [player_id]
      );
      
      if (playerResult.rows.length === 0) {
        return res.json({ 
          success: false, 
          error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω',
          debug: { player_found: false }
        });
      }
      
      const player = playerResult.rows[0];
      
      const existingDeposits = await pool.query(
        'SELECT * FROM ton_deposits WHERE player_id = $1 ORDER BY created_at DESC LIMIT 10',
        [player_id]
      );
      
      const expectedDeposits = await pool.query(
        'SELECT * FROM expected_deposits WHERE player_id = $1 ORDER BY created_at DESC LIMIT 5',
        [player_id]
      );
      
      let transactions = [];
      let apiStatus = 'unknown';
      let apiError = null;
      try {
        transactions = await getTonTransactions(gameWalletAddress, 15);
        apiStatus = 'working';
      } catch (apiErrorCatch) {
        apiStatus = 'failed';
        apiError = apiErrorCatch.message;
      }
      
      const incomingTransactions = [];
      
      for (const tx of transactions) {
        if (!tx.in_msg || !tx.in_msg.value || tx.in_msg.value === '0') continue;
        
        const amount = parseFloat(tx.in_msg.value) / 1000000000;
        const hash = tx.transaction_id.hash;
        const fromAddress = tx.in_msg.source;
        const txTime = new Date(tx.utime * 1000);
        
        if (amount < 0.005) continue;
        
        const validationResult = await isDepositForPlayerWithTimeWindow(tx, player_id, fromAddress);
        
        incomingTransactions.push({
          amount: amount.toFixed(8),
          hash: hash.substring(0, 16) + '...',
          full_hash: hash,
          from: fromAddress ? fromAddress.substring(0, 10) + '...' : 'unknown',
          from_full: fromAddress,
          time: txTime.toISOString(),
          minutes_ago: Math.floor((Date.now() - txTime.getTime()) / (1000 * 60)),
          valid_for_player: validationResult.valid,
          validation_method: validationResult.method,
          validation_details: validationResult.details
        });
      }
      
      const processedHashes = existingDeposits.rows.map(dep => dep.transaction_hash);
      const unprocessedTransactions = incomingTransactions.filter(tx => 
        !processedHashes.includes(tx.full_hash)
      );
      const validUnprocessedTransactions = unprocessedTransactions.filter(tx => tx.valid_for_player);
      
      const debugReport = {
        success: true,
        player: {
          telegram_id: player.telegram_id,
          name: player.first_name,
          current_ton_balance: parseFloat(player.ton || '0'),
        },
        game_wallet: gameWalletAddress,
        api_status: apiStatus,
        api_error: apiError,
        expected_deposits: {
          count: expectedDeposits.rows.length,
          active_count: expectedDeposits.rows.filter(dep => !dep.processed && new Date(dep.expires_at) > new Date()).length,
          deposits: expectedDeposits.rows.map(dep => ({
            amount: parseFloat(dep.amount),
            from_address: dep.from_address ? dep.from_address.substring(0, 10) + '...' : 'unknown',
            created_minutes_ago: Math.floor((Date.now() - new Date(dep.created_at).getTime()) / (1000 * 60)),
            expires_minutes: Math.floor((new Date(dep.expires_at).getTime() - Date.now()) / (1000 * 60)),
            processed: dep.processed
          }))
        },
        database_deposits: {
          count: existingDeposits.rows.length,
          deposits: existingDeposits.rows.map(dep => ({
            amount: parseFloat(dep.amount),
            status: dep.status,
            created_at: dep.created_at,
            hash: dep.transaction_hash ? dep.transaction_hash.substring(0, 16) + '...' : 'no_hash'
          }))
        },
        blockchain_transactions: {
          count: incomingTransactions.length,
          recent_incoming: incomingTransactions.slice(0, 5),
          unprocessed_count: unprocessedTransactions.length,
          valid_unprocessed_count: validUnprocessedTransactions.length,
          valid_unprocessed: validUnprocessedTransactions.slice(0, 3)
        },
        recommendations: []
      };
      
      if (validUnprocessedTransactions.length > 0) {
        debugReport.recommendations.push(`–ù–ê–ô–î–ï–ù–û ${validUnprocessedTransactions.length} –í–ê–õ–ò–î–ù–´–• –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤!`);
      } else if (unprocessedTransactions.length > 0) {
        debugReport.recommendations.push(`${unprocessedTransactions.length} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏`);
      } else {
        debugReport.recommendations.push("–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤");
      }
      
      if (expectedDeposits.rows.length === 0) {
        debugReport.recommendations.push("–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ TON —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è.");
      }
      
      res.json(debugReport);
  
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
        details: error.message 
      });
    }
  });
  
  // GET /status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤ - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
  router.get('/status', async (req, res) => {
    try {
      let tonApiStatus = 'unknown';
      try {
        const gameWallet = process.env.GAME_WALLET_ADDRESS || 'UQCOZZx-3RSxIVS2QFcuMBwDUZPWgh8FhRT7I6Qo_pqT-h60';
        await getTonTransactions(gameWallet, 1);
        tonApiStatus = 'working';
      } catch (apiError) {
        tonApiStatus = 'failed';
      }
      
      const stats = await pool.query(`
        SELECT 
          COUNT(*) as total_deposits,
          COUNT(*) FILTER (WHERE created_at > NOW() - INTERVAL '24 hours') as deposits_24h,
          COUNT(*) FILTER (WHERE created_at > NOW() - INTERVAL '1 hour') as deposits_1h,
          COALESCE(SUM(amount), 0) as total_amount,
          COALESCE(SUM(amount) FILTER (WHERE created_at > NOW() - INTERVAL '24 hours'), 0) as amount_24h,
          COUNT(*) FILTER (WHERE status = 'pending') as pending_count,
          COUNT(*) FILTER (WHERE status = 'completed') as completed_count,
          COUNT(*) FILTER (WHERE status = 'cancelled') as cancelled_count,
          COUNT(*) FILTER (WHERE status = 'failed') as failed_count
        FROM ton_deposits
      `);
      
      const expectedStats = await pool.query(`
        SELECT 
          COUNT(*) as total_expected,
          COUNT(*) FILTER (WHERE NOT processed AND expires_at > NOW()) as active_expected,
          COUNT(*) FILTER (WHERE processed) as processed_expected
        FROM expected_deposits
      `);
      
      res.json({
        success: true,
        system_status: 'operational',
        ton_api_status: tonApiStatus,
        deposit_stats: stats.rows[0],
        expected_deposit_stats: expectedStats.rows[0],
        last_check: new Date().toISOString()
      });
      
    } catch (error) {
      res.status(500).json({
        success: false,
        system_status: 'error',
        error: error.message
      });
    }
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  setInterval(cleanupExpiredDeposits, 10 * 60 * 1000);
  
  module.exports = router;