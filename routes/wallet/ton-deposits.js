// routes/wallet/ton-deposits.js - –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–û–í–ï–†–ö–û–ô PAYLOAD - –ß–ê–°–¢–¨ 1
const express = require('express');
const pool = require('../../db');
const { getPlayer } = require('../shared/getPlayer');
const { notifyTonDeposit } = require('../telegramBot');
const axios = require('axios');

const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è payload –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é extractPayloadFromTransaction –≤ ton-deposits.js –Ω–∞ —ç—Ç—É —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è payload –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
const extractPayloadFromTransaction = (tx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ in_msg
      if (!tx.in_msg) {
        return null;
      }
  
      let payloadData = null;
      
      // –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º msg_data.body (TONAPI v2)
      if (tx.in_msg.msg_data && tx.in_msg.msg_data.body) {
        payloadData = tx.in_msg.msg_data.body;
      }
      
      // –°–ø–æ—Å–æ–± 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º decoded_body
      if (!payloadData && tx.in_msg.decoded_body) {
        payloadData = tx.in_msg.decoded_body;
      }
      
      // –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º message (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      if (!payloadData && tx.in_msg.message) {
        payloadData = tx.in_msg.message;
      }
  
      // –°–ø–æ—Å–æ–± 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º comment (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ API –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ç–∞–∫)
      if (!payloadData && tx.in_msg.comment) {
        return tx.in_msg.comment;
      }
  
      if (!payloadData) {
        return null;
      }
  
      // –ï—Å–ª–∏ payload —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ COSMO
      if (typeof payloadData === 'string') {
        if (payloadData.includes('COSMO:')) {
          return payloadData;
        }
        // –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ base64
        try {
          const decoded = atob(payloadData);
          if (decoded.includes('COSMO:')) {
            return decoded;
          }
        } catch (e) {
          // –ù–µ base64
        }
        return payloadData;
      }
  
      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å —Ç–µ–∫—Å—Ç–æ–º
      if (payloadData.text && payloadData.text.includes('COSMO:')) {
        return payloadData.text;
      }
  
      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å comment
      if (payloadData.comment && payloadData.comment.includes('COSMO:')) {
        return payloadData.comment;
      }
  
      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ base64 encoded payload
      try {
        if (typeof payloadData === 'string' && payloadData.length > 8) {
          // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
          const binaryString = atob(payloadData);
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ (magic number –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
          const commentText = binaryString.substring(4);
          
          if (commentText && commentText.includes('COSMO:')) {
            console.log('–ù–∞–π–¥–µ–Ω COSMO payload –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:', commentText);
            return commentText;
          }
          
          // –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∞ –±–∞–π—Ç–æ–≤
          if (binaryString.includes('COSMO:')) {
            console.log('–ù–∞–π–¥–µ–Ω COSMO payload:', binaryString);
            return binaryString;
          }
        }
      } catch (decodeError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å payload:', decodeError.message);
      }
  
      return null;
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å payload:', error.message);
      return null;
    }
  };
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏–≥—Ä–æ–∫—É
  const isDepositForPlayer = (tx, playerId, fromAddress) => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º payload –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const payload = extractPayloadFromTransaction(tx);
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:`);
    console.log(`   - Payload: ${payload || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`   - –û—Ç –∞–¥—Ä–µ—Å–∞: ${fromAddress || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    console.log(`   - –î–ª—è –∏–≥—Ä–æ–∫–∞: ${playerId}`);
    
    // –û–°–ù–û–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: payload —Å–æ–¥–µ—Ä–∂–∏—Ç COSMO –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π telegram_id
    if (payload && payload.includes('COSMO:')) {
      const parts = payload.split(':');
      if (parts.length >= 2 && parts[0] === 'COSMO' && parts[1] === playerId) {
        console.log(`‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π payload –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
        return {
          valid: true,
          method: 'payload_match',
          details: `COSMO payload –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`
        };
      } else if (parts.length >= 2 && parts[0] === 'COSMO') {
        console.log(`‚ùå –û–¢–ö–õ–û–ù–ï–ù–û: Payload –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (${parts[1]}, –Ω—É–∂–µ–Ω ${playerId})`);
        return {
          valid: false,
          method: 'payload_mismatch',
          details: `Payload –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${parts[1]}, –∞ –Ω–µ ${playerId}`
        };
      }
    }
    
    // –†–ï–ó–ï–†–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –Ω–µ—Ç payload, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∞–¥—Ä–µ—Å—É (–º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
    // –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã, –≥–¥–µ payload –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    const txTime = new Date(tx.utime * 1000);
    const minutesAgo = Math.floor((Date.now() - txTime.getTime()) / (1000 * 60));
    
    // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—á–µ–Ω—å —Å–≤–µ–∂–∞—è (–º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç) –∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–æ–≤ - –º–æ–∂–Ω–æ —Ä–∏—Å–∫–Ω—É—Ç—å
    if (minutesAgo < 10 && !payload) {
      console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç payload, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–≤–µ–∂–∞—è (${minutesAgo} –º–∏–Ω). –†–∞–∑—Ä–µ—à–∞–µ–º —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.`);
      return {
        valid: true,
        method: 'fallback_recent',
        details: `–°–≤–µ–∂–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±–µ–∑ payload (${minutesAgo} –º–∏–Ω –Ω–∞–∑–∞–¥)`
      };
    }
    
    console.log(`‚ùå –û–¢–ö–õ–û–ù–ï–ù–û: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ COSMO payload –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
    return {
      valid: false,
      method: 'no_valid_payload',
      details: '–ù–µ—Ç COSMO payload - –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
    };
  };
  

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TON
const getTonTransactions = async (gameWalletAddress, limit = 50) => {
    console.log(`–ü–æ–ª—É—á–∞–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è ${gameWalletAddress}`);
    
    // –ü–†–ò–û–†–ò–¢–ï–¢: TONAPI —Å —Ç–æ–∫–µ–Ω–æ–º
    if (process.env.TONAPI_TOKEN) {
      try {
        console.log('–ü—Ä–æ–±—É–µ–º TONAPI —Å —Ç–æ–∫–µ–Ω–æ–º...');
        const response = await axios.get(`https://tonapi.io/v2/blockchain/accounts/${gameWalletAddress}/transactions`, {
          params: { 
            limit: Math.min(limit, 100),
            sort_order: 'desc'
          },
          headers: {
            'Authorization': `Bearer ${process.env.TONAPI_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 15000
        });
  
        if (response.data && response.data.transactions) {
          const transactions = response.data.transactions.map(tx => ({
            transaction_id: { 
              hash: tx.hash,
              lt: tx.lt.toString()
            },
            utime: tx.utime,
            in_msg: {
              source: tx.in_msg?.source?.address || tx.in_msg?.source,
              value: tx.in_msg?.value,
              msg_data: tx.in_msg?.msg_data || null,
              decoded_body: tx.in_msg?.decoded_body || null,
              message: tx.in_msg?.message || null
            }
          }));
          console.log(`TONAPI —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
          return transactions;
        }
      } catch (error) {
        console.log('TONAPI –æ—à–∏–±–∫–∞:', error.message);
      }
    }
  
    // –†–µ–∑–µ—Ä–≤: TON Center
    if (process.env.TONCENTER_API_KEY) {
      try {
        console.log('–ü—Ä–æ–±—É–µ–º TON Center —Å API –∫–ª—é—á–æ–º...');
        const response = await axios.get('https://toncenter.com/api/v2/getTransactions', {
          params: {
            address: gameWalletAddress,
            limit: Math.min(limit, 50),
            archival: true
          },
          headers: {
            'X-API-Key': process.env.TONCENTER_API_KEY
          },
          timeout: 15000
        });
  
        if (response.data.ok && response.data.result) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç TON Center –≤ –Ω—É–∂–Ω—ã–π –Ω–∞–º
          const transactions = response.data.result.map(tx => ({
            transaction_id: { 
              hash: tx.transaction_id.hash,
              lt: tx.transaction_id.lt.toString()
            },
            utime: tx.utime,
            in_msg: tx.in_msg ? {
              source: tx.in_msg.source,
              value: tx.in_msg.value,
              msg_data: tx.in_msg.msg_data || null,
              decoded_body: tx.in_msg.decoded_body || null,
              message: tx.in_msg.message || null
            } : null
          }));
          console.log(`TON Center —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
          return transactions;
        }
      } catch (error) {
        console.log('TON Center –æ—à–∏–±–∫–∞:', error.message);
      }
    }
  
    throw new Error('–í—Å–µ TON API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
  };
  // routes/wallet/ton-deposits.js - –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ß–ê–°–¢–¨ 3

// –ó–ê–©–ò–©–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
async function processDeposit(playerId, amount, hash, fromAddress, validationInfo) {
    console.log(`üîê –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–ü–û–ó–ò–¢–ê:`);
    console.log(`   - –°—É–º–º–∞: ${amount} TON`);
    console.log(`   - –û—Ç: ${fromAddress}`);
    console.log(`   - Hash: ${hash}`);
    console.log(`   - –ò–≥—Ä–æ–∫: ${playerId}`);
    console.log(`   - –í–∞–ª–∏–¥–∞—Ü–∏—è: ${validationInfo.method} - ${validationInfo.details}`);
    
    const client = await pool.connect();
    try {
      await client.query('BEGIN');
      
      // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
      console.log(`üîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–∫–∞...`);
      const playerResult = await client.query(
        'SELECT telegram_id, first_name, username, ton FROM players WHERE telegram_id = $1',
        [playerId]
      );
  
      if (playerResult.rows.length === 0) {
        console.log(`‚ùå –û–®–ò–ë–ö–ê: –ò–≥—Ä–æ–∫ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
        await client.query('ROLLBACK');
        return { success: false, error: 'Player not found' };
      }
  
      const playerData = playerResult.rows[0];
      const currentBalance = parseFloat(playerData.ton || '0');
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω: ${playerData.first_name}, –±–∞–ª–∞–Ω—Å: ${currentBalance}`);
      
      // –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      console.log(`üîç –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è...`);
      const existingCheck = await client.query(
        'SELECT id FROM ton_deposits WHERE transaction_hash = $1',
        [hash]
      );
  
      if (existingCheck.rows.length > 0) {
        console.log(`‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ${hash}`);
        await client.query('ROLLBACK');
        return { success: false, error: 'Transaction already processed', skipped: true };
      }
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–æ–≤–∞—è`);
      
      // –®–ê–ì 3: –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      const newBalance = currentBalance + amount;
      console.log(`üí∞ –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${currentBalance} + ${amount} = ${newBalance}`);
      
      const updateResult = await client.query(
        'UPDATE players SET ton = $1 WHERE telegram_id = $2 RETURNING ton',
        [newBalance, playerId]
      );
      
      if (updateResult.rows.length === 0) {
        console.log(`‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å`);
        await client.query('ROLLBACK');
        return { success: false, error: 'Failed to update balance' };
      }
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${updateResult.rows[0].ton}`);
  
      // –®–ê–ì 4: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
      console.log(`üìù –®–∞–≥ 4: –ó–∞–ø–∏—Å—å –¥–µ–ø–æ–∑–∏—Ç–∞...`);
      const depositResult = await client.query(
        `INSERT INTO ton_deposits (
          player_id, amount, transaction_hash, status, created_at, validation_method, from_address
        ) VALUES ($1, $2, $3, 'completed', NOW(), $4, $5) 
        RETURNING id`,
        [playerId, amount, hash, validationInfo.method, fromAddress]
      );
      console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç –∑–∞–ø–∏—Å–∞–Ω —Å ID: ${depositResult.rows[0].id}`);
  
      // –®–ê–ì 5: –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞
      console.log(`üìú –®–∞–≥ 5: –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞...`);
      await client.query(
        `INSERT INTO balance_history (
          telegram_id, currency, old_balance, new_balance, 
          change_amount, reason, details, timestamp
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())`,
        [
          playerId,
          'ton',
          currentBalance,
          newBalance,
          amount,
          'secure_auto_deposit',
          JSON.stringify({
            transaction_hash: hash,
            from_address: fromAddress,
            validation_method: validationInfo.method,
            validation_details: validationInfo.details,
            processed_by: 'secure_system',
            timestamp: new Date().toISOString()
          })
        ]
      );
      console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∞`);
  
      // –®–ê–ì 6: –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await client.query('COMMIT');
      console.log(`üéâ –£–°–ü–ï–•! –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${amount} TON –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
      
      // –®–ê–ì 7: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
      try {
        await notifyTonDeposit(playerData, amount, hash);
        console.log(`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
      } catch (notifyErr) {
        console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', notifyErr.message);
      }
      
      return {
        success: true,
        amount,
        new_balance: newBalance,
        hash: hash.substring(0, 16) + '...',
        old_balance: currentBalance,
        deposit_id: depositResult.rows[0].id,
        validation_method: validationInfo.method
      };
      
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º processDeposit:', error);
      return { success: false, error: error.message };
    } finally {
      client.release();
    }
  }
  // routes/wallet/ton-deposits.js - –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ß–ê–°–¢–¨ 4

// POST /check-deposits - –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
router.post('/check-deposits', async (req, res) => {
    const { player_id, sender_address } = req.body;
    
    console.log('üõ°Ô∏è ===============================================================');
    console.log('üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ï–ü–û–ó–ò–¢–û–í');
    console.log('üõ°Ô∏è –ò–≥—Ä–æ–∫:', player_id);
    console.log('üõ°Ô∏è –ö–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:', sender_address || '–Ω–µ —É–∫–∞–∑–∞–Ω');
    console.log('üõ°Ô∏è ===============================================================');
    
    if (!player_id) {
      return res.status(400).json({ error: 'Player ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
  
    try {
      const gameWalletAddress = process.env.GAME_WALLET_ADDRESS || 
        'UQCOZZx-3RSxIVS2QFcuMBwDUZPWgh8FhRT7I6Qo_pqT-h60';
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
      let transactions = [];
      try {
        transactions = await getTonTransactions(gameWalletAddress, 100);
        console.log(`üîó –ü–æ–ª—É—á–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞`);
      } catch (apiError) {
        console.error('üí• –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', apiError.message);
        return res.json({ 
          success: false, 
          error: 'TON API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          details: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç'
        });
      }
      
      const processed = [];
      let skippedCount = 0;
      let rejectedCount = 0;
      let errorCount = 0;
      
      console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      for (let i = 0; i < transactions.length; i++) {
        const tx = transactions[i];
        
        console.log(`\nüìã –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${i+1}/${transactions.length}:`);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (!tx.in_msg || !tx.in_msg.value || tx.in_msg.value === '0') {
          console.log('‚≠ï –ü—Ä–æ–ø—É—Å–∫: –∏—Å—Ö–æ–¥—è—â–∞—è –∏–ª–∏ –Ω—É–ª–µ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è');
          continue;
        }
  
        const amount = parseFloat(tx.in_msg.value) / 1000000000;
        const hash = tx.transaction_id.hash;
        const fromAddress = tx.in_msg.source;
        const txTime = new Date(tx.utime * 1000);
        const minutesAgo = Math.floor((Date.now() - txTime.getTime()) / (1000 * 60));
        
        console.log(`üí∞ –°—É–º–º–∞: ${amount} TON`);
        console.log(`üîó Hash: ${hash.substring(0, 20)}...`);
        console.log(`üë§ –û—Ç: ${fromAddress ? fromAddress.substring(0, 15) + '...' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`‚è∞ –í—Ä–µ–º—è: ${minutesAgo} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
        
        // –§–∏–ª—å—Ç—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        if (amount < 0.005) {
          console.log('‚≠ï –ü—Ä–æ–ø—É—Å–∫: —Å—É–º–º–∞ –º–µ–Ω—å—à–µ 0.005 TON');
          continue;
        }
        
        // üõ°Ô∏è –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
        const validationResult = isDepositForPlayer(tx, player_id, fromAddress);
        
        if (!validationResult.valid) {
          console.log(`üö´ –û–¢–ö–õ–û–ù–ï–ù–û: ${validationResult.details}`);
          rejectedCount++;
          continue;
        }
        
        console.log(`‚úÖ –ü–†–ò–ù–Ø–¢–û: ${validationResult.details}`);
        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞...');
        
        // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ô –î–ï–ü–û–ó–ò–¢
        const result = await processDeposit(player_id, amount, hash, fromAddress, validationResult);
        
        if (result.success) {
          processed.push(result);
          console.log(`üéâ –£–°–ü–ï–•! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${amount} TON`);
        } else if (result.skipped) {
          skippedCount++;
          console.log(`‚ö†Ô∏è –ü–†–û–ü–£–©–ï–ù–û: ${result.error}`);
        } else {
          errorCount++;
          console.log(`‚ùå –û–®–ò–ë–ö–ê: ${result.error}`);
        }
      }
      
      console.log('\nüõ°Ô∏è ===============================================================');
      console.log('üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
      console.log(`üõ°Ô∏è –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed.length}`);
      console.log(`üõ°Ô∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–ø—Ä–æ–ø—É—â–µ–Ω–æ): ${skippedCount}`);
      console.log(`üõ°Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${rejectedCount}`);
      console.log(`üõ°Ô∏è –û—à–∏–±–æ–∫: ${errorCount}`);
      console.log('üõ°Ô∏è ===============================================================');
      
      if (processed.length > 0) {
        const totalAmount = processed.reduce((sum, dep) => sum + dep.amount, 0);
        
        res.json({
          success: true,
          message: `–£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed.length} –¥–µ–ø–æ–∑–∏—Ç–æ–≤`,
          deposits_found: processed.length,
          total_amount: totalAmount.toFixed(8),
          rejected_for_security: rejectedCount,
          deposits: processed.map(dep => ({
            amount: dep.amount.toFixed(8),
            hash: dep.hash,
            new_balance: dep.new_balance.toFixed(8),
            old_balance: dep.old_balance.toFixed(8),
            deposit_id: dep.deposit_id,
            validation_method: dep.validation_method
          }))
        });
      } else {
        let message = '–ù–æ–≤—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
        if (rejectedCount > 0) {
          message += ` (${rejectedCount} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ payload)`;
        }
        if (skippedCount > 0) {
          message += ` (${skippedCount} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)`;
        }
        
        res.json({
          success: true,
          message: message,
          deposits_found: 0,
          total_amount: '0',
          rejected_for_security: rejectedCount,
          skipped: skippedCount,
          errors: errorCount
        });
      }
  
    } catch (error) {
      console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
      res.status(500).json({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message 
      });
    }
  });
  // routes/wallet/ton-deposits.js - –ó–ê–©–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ß–ê–°–¢–¨ 5

// POST /manual-add - –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.post('/manual-add', async (req, res) => {
    const { player_id, amount, transaction_hash, admin_key } = req.body;
    
    if (admin_key !== 'cosmo_admin_2025') {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    }
    
    if (!player_id || !amount || !transaction_hash) {
      return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }
  
    const validationInfo = {
      method: 'manual_admin',
      details: '–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
    };
  
    const result = await processDeposit(player_id, parseFloat(amount), transaction_hash, 'manual_admin', validationInfo);
    
    if (result.success) {
      console.log('–†—É—á–Ω–æ–π –¥–µ–ø–æ–∑–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', { player_id, amount, transaction_hash });
      res.json({
        success: true,
        message: '–†—É—á–Ω–æ–π –¥–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
        ...result
      });
    } else {
      res.status(500).json(result);
    }
  });
  
  // POST /debug-deposits - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  router.post('/debug-deposits', async (req, res) => {
    const { player_id } = req.body;
    
    if (!player_id) {
      return res.status(400).json({ error: 'Player ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
  
    try {
      const gameWalletAddress = process.env.GAME_WALLET_ADDRESS || 
        'UQCOZZx-3RSxIVS2QFcuMBwDUZPWgh8FhRT7I6Qo_pqT-h60';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ
      const playerResult = await pool.query(
        'SELECT telegram_id, first_name, ton FROM players WHERE telegram_id = $1',
        [player_id]
      );
      
      if (playerResult.rows.length === 0) {
        return res.json({ 
          success: false, 
          error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω',
          debug: { player_found: false }
        });
      }
      
      const player = playerResult.rows[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã –≤ –±–∞–∑–µ
      const existingDeposits = await pool.query(
        'SELECT * FROM ton_deposits WHERE player_id = $1 ORDER BY created_at DESC LIMIT 15',
        [player_id]
      );
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
      let transactions = [];
      let apiStatus = 'unknown';
      let apiError = null;
      try {
        transactions = await getTonTransactions(gameWalletAddress, 20);
        apiStatus = 'working';
      } catch (apiErrorCatch) {
        apiStatus = 'failed';
        apiError = apiErrorCatch.message;
        return res.json({ 
          success: false, 
          error: '–û—à–∏–±–∫–∞ TON API',
          debug: { ton_api_error: true, error_details: apiError }
        });
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π payload –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const incomingTransactions = [];
      
      for (const tx of transactions) {
        if (!tx.in_msg || !tx.in_msg.value || tx.in_msg.value === '0') continue;
        
        const amount = parseFloat(tx.in_msg.value) / 1000000000;
        const hash = tx.transaction_id.hash;
        const fromAddress = tx.in_msg.source;
        const txTime = new Date(tx.utime * 1000);
        
        if (amount < 0.005) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º payload –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const payload = extractPayloadFromTransaction(tx);
        const validationResult = isDepositForPlayer(tx, player_id, fromAddress);
        
        incomingTransactions.push({
          amount: amount.toFixed(8),
          hash: hash.substring(0, 16) + '...',
          full_hash: hash,
          from: fromAddress ? fromAddress.substring(0, 10) + '...' : 'unknown',
          from_full: fromAddress,
          time: txTime.toISOString(),
          minutes_ago: Math.floor((Date.now() - txTime.getTime()) / (1000 * 60)),
          payload: payload || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          valid_for_player: validationResult.valid,
          validation_method: validationResult.method,
          validation_details: validationResult.details
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
      const processedHashes = existingDeposits.rows.map(dep => dep.transaction_hash);
      const unprocessedTransactions = incomingTransactions.filter(tx => 
        !processedHashes.includes(tx.full_hash)
      );
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      const validUnprocessedTransactions = unprocessedTransactions.filter(tx => tx.valid_for_player);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
      const debugReport = {
        success: true,
        player: {
          telegram_id: player.telegram_id,
          name: player.first_name,
          current_ton_balance: parseFloat(player.ton || '0'),
        },
        game_wallet: gameWalletAddress,
        api_status: apiStatus,
        api_error: apiError,
        security_info: {
          total_incoming_transactions: incomingTransactions.length,
          valid_for_player: incomingTransactions.filter(tx => tx.valid_for_player).length,
          rejected_for_security: incomingTransactions.filter(tx => !tx.valid_for_player).length
        },
        database_deposits: {
          count: existingDeposits.rows.length,
          deposits: existingDeposits.rows.map(dep => ({
            amount: parseFloat(dep.amount),
            status: dep.status,
            created_at: dep.created_at,
            hash: dep.transaction_hash ? dep.transaction_hash.substring(0, 16) + '...' : 'no_hash',
            validation_method: dep.validation_method || 'legacy'
          }))
        },
        blockchain_transactions: {
          count: incomingTransactions.length,
          recent_incoming: incomingTransactions.slice(0, 5),
          unprocessed_count: unprocessedTransactions.length,
          unprocessed: unprocessedTransactions.slice(0, 3),
          valid_unprocessed_count: validUnprocessedTransactions.length,
          valid_unprocessed: validUnprocessedTransactions.slice(0, 3)
        },
        recommendations: []
      };
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      if (validUnprocessedTransactions.length > 0) {
        debugReport.recommendations.push(`–ù–ê–ô–î–ï–ù–û ${validUnprocessedTransactions.length} –í–ê–õ–ò–î–ù–´–• –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞!`);
        validUnprocessedTransactions.slice(0, 2).forEach((tx, i) => {
          debugReport.recommendations.push(`   ${i+1}. ${tx.amount} TON —Å payload: ${tx.payload} (${tx.minutes_ago} –º–∏–Ω –Ω–∞–∑–∞–¥)`);
        });
      } else if (unprocessedTransactions.length > validUnprocessedTransactions.length) {
        const rejectedCount = unprocessedTransactions.length - validUnprocessedTransactions.length;
        debugReport.recommendations.push(`–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: ${rejectedCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ COSMO payload`);
        debugReport.recommendations.push("–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —á—É–∂–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤");
      } else if (incomingTransactions.length > 0) {
        debugReport.recommendations.push("–£–°–ü–ï–•: –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
      } else {
        debugReport.recommendations.push("–í—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      }
      
      // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é payload
      debugReport.recommendations.push("–í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–µ–ø–æ–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å COSMO payload!");
      
      res.json(debugReport);
  
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
        details: error.message 
      });
    }
  });
  
  module.exports = router;