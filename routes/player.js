const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const { getPlayerStatistics } = require('./shared/logger');

const router = express.Router();

// POST /api/player/create-with-referrer - –°–û–ó–î–ê–ù–ò–ï –ò–ì–†–û–ö–ê –° –†–ï–§–ï–†–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
router.post('/create-with-referrer', async (req, res) => {
  console.log('üéØüéØüéØ –ù–û–í–´–ô ENDPOINT –í–´–ó–í–ê–ù! üéØüéØüéØ');
  console.log('üì¶ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
  
  const { telegramId, referralData } = req.body;
  if (!telegramId) {
    console.log('‚ùå –ù–µ—Ç telegramId –≤ –∑–∞–ø—Ä–æ—Å–µ');
    return res.status(400).json({ error: 'Telegram ID is required' });
  }

  console.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${telegramId}`);
  console.log(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(referralData, null, 2));

  try {
    // üî• –ò–ó–í–õ–ï–ö–ê–ï–ú –†–ï–§–ï–†–ï–†–ê –ò–ó –î–ê–ù–ù–´–•
    let referrerId = '1222791281'; // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π

    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞...');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º referralData?.tgWebAppStartParam:', referralData?.tgWebAppStartParam);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º referralData?.start_param:', referralData?.start_param);
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: tgWebAppStartParam –∏–∑ URL
    if (referralData?.tgWebAppStartParam) {
      referrerId = referralData.tgWebAppStartParam;
      console.log(`üéØüéØ –ù–ê–ô–î–ï–ù –†–ï–§–ï–†–ï–† –≤ tgWebAppStartParam: ${referrerId} üéØüéØ`);
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: start_param –∏–∑ Telegram WebApp
    else if (referralData?.start_param) {
      referrerId = referralData.start_param;
      console.log(`üéØ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ start_param: ${referrerId}`);
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    else if (referralData?.startapp || referralData?.ref) {
      referrerId = referralData.startapp || referralData.ref;
      console.log(`üéØ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: ${referrerId}`);
    } else {
      console.log('‚ö†Ô∏è –†–µ—Ñ–µ—Ä–µ—Ä –ù–ï –ù–ê–ô–î–ï–ù –≤ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π');
      console.log('‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ referralData:', Object.keys(referralData || {}));
    }

    console.log(`üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–§–ï–†–ï–†: ${referrerId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingPlayer = await pool.query('SELECT telegram_id FROM players WHERE telegram_id = $1', [telegramId]);
    if (existingPlayer.rows.length > 0) {
      console.log(`‚ùå –ò–≥—Ä–æ–∫ ${telegramId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      const player = await getPlayer(telegramId);
      return res.json(player);
    }

    // üî• –°–û–ó–î–ê–ï–ú –ù–û–í–û–ì–û –ò–ì–†–û–ö–ê –í –ë–î
    console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const referralLink = `https://t.me/CosmoClickBot?startapp=${telegramId}`;
    
    const initialCollectedBySystem = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });
    
    const initialLastCollectionTime = JSON.stringify({
      "1": new Date().toISOString(),
      "2": new Date().toISOString(), 
      "3": new Date().toISOString(),
      "4": new Date().toISOString(),
      "5": new Date().toISOString(),
      "6": new Date().toISOString(),
      "7": new Date().toISOString()
    });

    const initialMiningSpeedData = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });

    const initialAsteroidTotalData = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });

    const initialMaxCargoCapacityData = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });

    // üî• –°–û–ó–î–ê–ï–ú –ò–ì–†–û–ö–ê –°–†–ê–ó–£ –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –†–ï–§–ï–†–ï–†–û–ú
    const insertQuery = `
      INSERT INTO players (
        telegram_id, username, first_name, ccc, cs, ton, referral_link, color, 
        collected_by_system, cargo_levels, drones, asteroids, 
        last_collection_time, language, unlocked_systems, current_system,
        mining_speed_data, asteroid_total_data, max_cargo_capacity_data,
        referrer_id, referrals_count, created_at
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, NOW())
      RETURNING *;
    `;
    
    const insertValues = [
      telegramId,
      `user_${telegramId}`,
      `User${telegramId.slice(-4)}`,
      0, // ccc
      0, // cs  
      0, // ton
      referralLink,
      '#61dafb',
      initialCollectedBySystem,
      JSON.stringify([]),
      JSON.stringify([]),
      JSON.stringify([]),
      initialLastCollectionTime,
      null, // language
      JSON.stringify([1]),
      1,
      initialMiningSpeedData,
      initialAsteroidTotalData,
      initialMaxCargoCapacityData,
      referrerId, // üéØ –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ï–§–ï–†–ï–†!
      0 // referrals_count
    ];
    
    const newPlayerResult = await pool.query(insertQuery, insertValues);
    const player = newPlayerResult.rows[0];

    console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} —Å–æ–∑–¥–∞–Ω —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º ${referrerId}`);

// üéØ –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –†–ï–§–ï–†–ï–†–ê (–≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º)
if (referrerId !== telegramId) {
        try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const referrerCheck = await pool.query('SELECT telegram_id FROM players WHERE telegram_id = $1', [referrerId]);
        if (referrerCheck.rows.length > 0) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
          await pool.query('UPDATE players SET referrals_count = referrals_count + 1 WHERE telegram_id = $1', [referrerId]);
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
          await pool.query(
            'INSERT INTO referrals (referrer_id, referred_id, cs_earned, ton_earned, created_at) VALUES ($1, $2, $3, $4, NOW())', 
            [referrerId, telegramId, 0, 0]
          );
          
          console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${referrerId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (+1 —Ä–µ—Ñ–µ—Ä–∞–ª)`);
        } else {
          console.log(`‚ö†Ô∏è –†–µ—Ñ–µ—Ä ${referrerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
      } catch (referralErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:', referralErr);
        // –ù–ï –ø–∞–¥–∞–µ–º - –∏–≥—Ä–æ–∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ getPlayer
    const fullPlayer = await getPlayer(telegramId);
    
    console.log(`‚úÖ –û–¢–í–ï–¢: –ò–≥—Ä–æ–∫ –≥–æ—Ç–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º: ${fullPlayer.referrer_id}`);
    res.json(fullPlayer);

  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ create-with-referrer:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// POST /api/player/create - –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ò–ì–†–û–ö–ê –° –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –õ–û–ì–ò–ö–û–ô
router.post('/create', async (req, res) => {
  const { telegramId, referralData } = req.body;
  if (!telegramId) return res.status(400).json({ error: 'Telegram ID is required' });

  console.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ${telegramId}`);
  console.log(`üîó –î–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:`, referralData);

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingPlayer = await client.query('SELECT telegram_id FROM players WHERE telegram_id = $1', [telegramId]);
    if (existingPlayer.rows.length > 0) {
      await client.query('ROLLBACK');
      console.log(`‚ùå –ò–≥—Ä–æ–∫ ${telegramId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return res.status(400).json({ error: 'Player already exists' });
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    let referrerId = '1222791281'; // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ò–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —É–∂–µ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–ª)
    if (referralData?.extractedReferrer) {
      referrerId = referralData.extractedReferrer;
      console.log(`üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: ${referrerId}`);
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ò–∑ start_param (–¥–ª—è Mini Apps)
    else if (referralData?.start_param) {
      referrerId = referralData.start_param;
      console.log(`üéØ –†–µ—Ñ–µ—Ä–µ—Ä –∏–∑ start_param: ${referrerId}`);
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü–∞—Ä—Å–∏–Ω–≥ initData
    else if (referralData?.initData) {
      try {
        const urlParams = new URLSearchParams(referralData.initData);
        const startParam = urlParams.get('start_param');
        if (startParam) {
          referrerId = startParam;
          console.log(`üéØ –†–µ—Ñ–µ—Ä–µ—Ä –∏–∑ initData: ${referrerId}`);
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', err);
      }
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ü–∞—Ä—Å–∏–Ω–≥ URL
    else if (referralData?.url) {
      const referrerFromUrl = extractReferrerFromUrl(referralData.url);
      if (referrerFromUrl) {
        referrerId = referrerFromUrl;
        console.log(`üéØ –†–µ—Ñ–µ—Ä–µ—Ä –∏–∑ URL: ${referrerId}`);
      }
    }

    console.log(`üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ—Ä: ${referrerId}`);

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
    const referralLink = `https://t.me/CosmoClickBot?startapp=${telegramId}`;
    
    const initialCollectedBySystem = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });
    
    const initialLastCollectionTime = JSON.stringify({
      "1": new Date().toISOString(),
      "2": new Date().toISOString(), 
      "3": new Date().toISOString(),
      "4": new Date().toISOString(),
      "5": new Date().toISOString(),
      "6": new Date().toISOString(),
      "7": new Date().toISOString()
    });

    const initialMiningSpeedData = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });

    const initialAsteroidTotalData = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });

    const initialMaxCargoCapacityData = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });

    // üî• –°–û–ó–î–ê–ï–ú –ò–ì–†–û–ö–ê –°–†–ê–ó–£ –° –†–ï–§–ï–†–ï–†–û–ú
    const insertQuery = `
      INSERT INTO players (
        telegram_id, username, first_name, ccc, cs, ton, referral_link, color, 
        collected_by_system, cargo_levels, drones, asteroids, 
        last_collection_time, language, unlocked_systems, current_system,
        mining_speed_data, asteroid_total_data, max_cargo_capacity_data,
        referrer_id, referrals_count, created_at
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, NOW())
      RETURNING *;
    `;
    
    const insertValues = [
      telegramId,
      `user_${telegramId}`,
      `User${telegramId.slice(-4)}`,
      0, // ccc
      0, // cs  
      0, // ton
      referralLink,
      '#61dafb',
      initialCollectedBySystem,
      JSON.stringify([]),
      JSON.stringify([]),
      JSON.stringify([]),
      initialLastCollectionTime,
      null, // language
      JSON.stringify([1]),
      1,
      initialMiningSpeedData,
      initialAsteroidTotalData,
      initialMaxCargoCapacityData,
      referrerId, // üéØ –†–ï–§–ï–†–ï–†!
      0 // referrals_count
    ];
    
    const newPlayerResult = await client.query(insertQuery, insertValues);
    let player = newPlayerResult.rows[0];

    console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} —Å–æ–∑–¥–∞–Ω —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º ${referrerId}`);

    // üéØ –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –†–ï–§–ï–†–ï–†–ê
    if (referrerId && referrerId !== telegramId) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const referrerCheck = await client.query('SELECT telegram_id FROM players WHERE telegram_id = $1', [referrerId]);
        if (referrerCheck.rows.length > 0) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
          await client.query('UPDATE players SET referrals_count = referrals_count + 1 WHERE telegram_id = $1', [referrerId]);
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–ë–ï–ó –ù–ê–ì–†–ê–î)
          await client.query(
            'INSERT INTO referrals (referrer_id, referred_id, cs_earned, ton_earned, created_at) VALUES ($1, $2, $3, $4, NOW())', 
            [referrerId, telegramId, 0, 0]
          );
          
          console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ ${referrerId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (+1 —Ä–µ—Ñ–µ—Ä–∞–ª)`);
        } else {
          console.log(`‚ö†Ô∏è –†–µ—Ñ–µ—Ä ${referrerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
      } catch (referralErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:', referralErr);
        // –ù–ï –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é - –∏–≥—Ä–æ–∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω
      }
    }

    await client.query('COMMIT');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const fullPlayer = await getPlayer(telegramId);
    
    console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º ${referrerId}`);
    console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞: referrer_id –≤ –ë–î = ${fullPlayer?.referrer_id}`);
    
    res.json(fullPlayer);

  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ URL
function extractReferrerFromUrl(url) {
  try {
    const patterns = [
      /[?&]start=([^&]+)/,
      /[?&]startapp=([^&]+)/,
      /[?&]startApp=([^&]+)/,
      /[?&]ref=([^&]+)/,
      /[?&]referrer=([^&]+)/,
      /[?&]tgWebAppStartParam=([^&]+)/
    ];
    
    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match && match[1]) {
        console.log(`üîó –ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä –≤ URL: ${match[1]}`);
        return match[1];
      }
    }
    
    console.log(`üîó –†–µ—Ñ–µ—Ä–µ—Ä –≤ URL –Ω–µ –Ω–∞–π–¥–µ–Ω: ${url}`);
    return null;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL:', err);
    return null;
  }
}

// POST /api/player/language
router.post('/language', async (req, res) => {
  const { telegramId, language, isFirstLanguageSelection } = req.body;
  
  if (!telegramId || !language) return res.status(400).json({ error: 'Telegram ID and language are required' });

  try {
    const player = await getPlayer(telegramId);
    if (!player) return res.status(404).json({ error: 'Player not found' });

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º registration_language –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–±–æ—Ä–µ
    if (isFirstLanguageSelection) {
      await pool.query(
        'UPDATE players SET language = $1, registration_language = $2 WHERE telegram_id = $3',
        [language, language, telegramId]
      );
    } else {
      await pool.query(
        'UPDATE players SET language = $1 WHERE telegram_id = $2',
        [language, telegramId]
      );
    }

    const updatedPlayer = await getPlayer(telegramId);
    res.json(updatedPlayer);
  } catch (err) {
    console.error('Error updating language:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/player/color
router.post('/color', async (req, res) => {
  const { telegramId, color } = req.body;
  if (!telegramId || !color) return res.status(400).json({ error: 'Telegram ID and color are required' });

  try {
    const player = await getPlayer(telegramId);
    if (!player) return res.status(404).json({ error: 'Player not found' });

    await pool.query(
      'UPDATE players SET color = $1 WHERE telegram_id = $2',
      [color, telegramId]
    );

    const updatedPlayer = await getPlayer(telegramId);
    res.json({ color: updatedPlayer.color });
  } catch (err) {
    console.error('Error updating color:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// GET /api/player/:telegramId
router.get('/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const player = await getPlayer(telegramId);
    if (!player) {
      console.log(`‚ùå GET /api/player/${telegramId} - –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404`);
      return res.status(404).json({ error: 'Player not found' });
    }
    res.json(player);
  } catch (err) {
    console.error('Error fetching player data:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/player/:telegramId
router.post('/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  const updates = req.body;
  if (!telegramId || !updates) return res.status(400).json({ error: 'Telegram ID and updates are required' });
  try {
    const player = await getPlayer(telegramId);
    if (!player) return res.status(404).json({ error: 'Player not found' });

    const updateFields = [];
    const updateValues = [];
    let paramIndex = 1;

    for (const key in updates) {
      if (updates.hasOwnProperty(key)) {
        updateFields.push(`${key} = $${paramIndex}`);
        updateValues.push(updates[key]);
        paramIndex++;
      }
    }

    if (updateFields.length === 0) return res.status(400).json({ error: 'No valid fields to update' });

    const updateQuery = `UPDATE players SET ${updateFields.join(', ')} WHERE telegram_id = $${paramIndex} RETURNING *`;
    updateValues.push(telegramId);

    const result = await pool.query(updateQuery, updateValues);
    const updatedPlayer = result.rows[0];
    const finalPlayer = await getPlayer(updatedPlayer.telegram_id);
    res.json(finalPlayer);
  } catch (err) {
    console.error('Error updating player:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// GET /api/player/stats/:telegramId - ENDPOINT –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
router.get('/stats/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    if (!telegramId) {
      return res.status(400).json({ error: 'telegramId is required' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
    const player = await getPlayer(telegramId);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    let logStats = { weekly: [], total: {} };
    try {
      logStats = await getPlayerStatistics(telegramId);
    } catch (err) {
      console.log('Player actions table not found, using calculated stats');
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalResourcesCollected = {
      ccc: player.ccc_lifetime || parseFloat(player.ccc) || 0,
      cs: player.cs_lifetime || parseFloat(player.cs) || 0,
      ton: player.ton_lifetime || parseFloat(player.ton) || 0
    };

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
    const registrationDate = new Date(player.created_at || Date.now());
    const now = new Date();
    const totalPlayTime = Math.max(1, Math.floor((now - registrationDate) / (1000 * 60))); // –≤ –º–∏–Ω—É—Ç–∞—Ö

    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ä–µ—Å—É—Ä—Å—ã –≤ —á–∞—Å)
    const hoursPlayed = Math.max(1, totalPlayTime / 60);
    const resourcesPerHour = {
      ccc: Math.round(totalResourcesCollected.ccc / hoursPlayed),
      cs: Math.round(totalResourcesCollected.cs / hoursPlayed),
      ton: Math.round((totalResourcesCollected.ton / hoursPlayed) * 100) / 100
    };

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–∏—Å—Ç–µ–º–∞–º
    const systemProgress = {};
    for (let systemId = 1; systemId <= 7; systemId++) {
      const systemDrones = player.drones.filter(d => d.system === systemId);
      const systemCargo = player.cargo_levels.filter(c => c.system === systemId);
      const systemAsteroids = player.asteroids.filter(a => a.system === systemId);
      
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ä–≥–æ
      const maxCargoLevel = systemCargo.reduce((max, c) => Math.max(max, c.id || 0), 0);
      
      systemProgress[systemId] = {
        cargoLevel: maxCargoLevel,
        dronesCount: systemDrones.length,
        asteroidsOwned: systemAsteroids.length,
        systemUnlocked: player.unlocked_systems.includes(systemId)
      };
    }

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const totalDrones = Object.values(systemProgress).reduce((sum, sys) => sum + sys.dronesCount, 0);
    const unlockedSystemsCount = Object.values(systemProgress).filter(sys => sys.systemUnlocked).length;
    
    const achievements = {
      firstMillion: totalResourcesCollected.ccc >= 1000000,
      hundredDrones: totalDrones >= 100,
      allSystemsUnlocked: unlockedSystemsCount >= 7,
      speedRunner: totalPlayTime < 1440 && totalResourcesCollected.ccc > 100000 // –º–µ–Ω—å—à–µ –¥–Ω—è, –Ω–æ –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤
    };

    // –†–µ–π—Ç–∏–Ω–≥–∏ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏, –Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    const ranking = {
      totalResources: Math.floor(Math.random() * 1000) + 1,
      efficiency: Math.floor(Math.random() * 1000) + 1,
      progress: Math.floor(Math.random() * 1000) + 1
    };

    // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalSpent = {
      ccc: player.ccc_spent || 0,
      cs: player.cs_spent || 0,
      ton: player.ton_spent || 0
    };

    // ROI - –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    const totalInvested = totalSpent.ccc + totalSpent.cs * 100 + totalSpent.ton * 10000;
    const currentValue = parseFloat(player.ccc) + parseFloat(player.cs) * 100 + parseFloat(player.ton) * 10000;
    const roi = totalInvested > 0 ? Math.round(((currentValue / totalInvested) - 1) * 100) : 0;

    // –ò—Å—Ç–æ—Ä–∏—è (–∏–∑ –ª–æ–≥–æ–≤ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞)
    let history = [];
    if (logStats.weekly.length > 0) {
      history = logStats.weekly.map(day => ({
        date: day.date,
        cccCollected: parseFloat(day.ccc_collected) || 0,
        csCollected: parseFloat(day.cs_collected) || 0,
        tonCollected: parseFloat(day.ton_collected) || 0,
        purchases: parseInt(day.purchases) || 0
      }));
    } else {
      // –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π
      for (let i = 6; i >= 0; i--) {
        const date = new Date();
        date.setDate(date.getDate() - i);
        history.push({
          date: date.toISOString().split('T')[0],
          cccCollected: 0,
          csCollected: 0,
          tonCollected: 0,
          purchases: 0
        });
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      totalPlayTime,
      totalResourcesCollected,
      totalPurchases: player.total_purchases || logStats.total.total_purchases || 0,
      resourcesPerHour,
      systemProgress,
      achievements,
      ranking,
      financial: {
        totalSpent,
        roi,
        bestInvestment: '–î—Ä–æ–Ω—ã' // –∑–∞–≥–ª—É—à–∫–∞
      },
      history
    };

    res.json(stats);

  } catch (error) {
    console.error('Error fetching player stats:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –ú–ê–†–®–†–£–¢ –í –§–ê–ô–õ–ï player.js

// POST /api/player/connect-wallet - –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï TELEGRAM WALLET
router.post('/connect-wallet', async (req, res) => {
  // üî• –®–ê–ì 1: –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ ID –ø—Ä–∏—Ö–æ–¥–∏—Ç
  console.log('--- Endpoint /connect-wallet –≤—ã–∑–≤–∞–Ω ---');
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body));
  
  const { telegram_id } = req.body;
  if (!telegram_id) {
    console.log('–û–®–ò–ë–ö–ê: telegram_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞.');
    return res.status(400).json({ error: 'Telegram ID is required' });
  }

  console.log(`üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${telegram_id}`);
  console.log(`–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö telegram_id: ${typeof telegram_id}`);

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // üî• –®–ê–ì 2: –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º getPlayer
    console.log(`–í—ã–∑—ã–≤–∞–µ–º getPlayer —Å ID: ${telegram_id}`);
    const player = await getPlayer(telegram_id); // –§—É–Ω–∫—Ü–∏—è getPlayer –∏—â–µ—Ç –∏–≥—Ä–æ–∫–∞

    // üî• –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç getPlayer
    if (!player) {
      console.log(`–û–®–ò–ë–ö–ê: getPlayer –Ω–µ –Ω–∞—à–µ–ª –∏–≥—Ä–æ–∫–∞ —Å ID ${telegram_id}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404.`);
      await client.query('ROLLBACK');
      // –≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—à—É –æ—à–∏–±–∫—É
      return res.status(404).json({ error: 'Player not found' });
    }

    console.log(`–ò–≥—Ä–æ–∫ ${telegram_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...`);
    
    // –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram Wallet (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é)
    const walletAddress = `telegram_wallet_${telegram_id}_${Date.now()}`; // –ü—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
    await client.query(
      'UPDATE players SET telegram_wallet = $1 WHERE telegram_id = $2',
      [walletAddress, telegram_id]
    );

    await client.query('COMMIT');
    const updatedPlayer = await getPlayer(telegram_id);
    console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è ${telegram_id}: ${walletAddress}`);
    res.json(updatedPlayer);
  } catch (err) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ /connect-wallet:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

module.exports = router;