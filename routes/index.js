// cosmo-click-backend\routes
 
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const { logPlayerAction, detectSuspiciousActivity, updateLifetimeStats, logBalanceChange } = require('./shared/logger');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
const playerRoutes = require('./player');
const shopRoutes = require('./shop');
const questRoutes = require('./quests');
const referralRoutes = require('./referrals');
const exchangeRoutes = require('./exchange');
const adminRoutes = require('./admin');

const router = express.Router();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏ –∫ —Ä–æ—É—Ç–∞–º
router.use('/api/player', playerRoutes);
router.use('/api/shop', shopRoutes);
router.use('/api/quests', questRoutes);
router.use('/api/referrals', referralRoutes);
router.use('/api/exchange', exchangeRoutes);
router.use('/api/admin', adminRoutes);

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–æ—É—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
router.post('/api/collect', async (req, res) => {
  const { telegramId, systemId } = req.body;
  if (!telegramId || !systemId) return res.status(400).json({ error: 'Telegram ID and System ID are required' });
  
  console.log(`üí∞ –°–ë–û–† –†–ï–°–£–†–°–û–í: –∏–≥—Ä–æ–∫ ${telegramId}, —Å–∏—Å—Ç–µ–º–∞ ${systemId}`);
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // üîí SECURITY: Lock player row to prevent race conditions
    const playerResult = await client.query(`
      SELECT * FROM players WHERE telegram_id = $1 FOR UPDATE
    `, [telegramId]);

    if (playerResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const player = playerResult.rows[0];

    // üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–£–Æ –ê–ö–¢–ò–í–ù–û–°–¢–¨
    const suspicious = await detectSuspiciousActivity(telegramId, 'collect', 0, systemId);
    if (suspicious) {
      console.log(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–±–æ—Ä–µ: ${telegramId}`);
      // –ú–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
    }

    const currentSystemStr = String(systemId);
    const lastCollectionTimeMillis = new Date(player.last_collection_time[currentSystemStr]).getTime();
    const collectedAmount = player.collected_by_system[currentSystemStr] || 0;

    const miningSpeed = player.mining_speed_data?.[systemId] || 0;
    const maxCargoCapacity = player.max_cargo_capacity_data?.[systemId] || 0;
    const totalAsteroidResources = player.asteroid_total_data?.[systemId] || 0;

    console.log(`üí∞ –î–ê–ù–ù–´–ï –°–ë–û–†–ê –°–ò–°–¢–ï–ú–ê ${systemId}:`, {
      —É–∂–µ_—Å–æ–±—Ä–∞–Ω–æ: collectedAmount,
      —Å–∫–æ—Ä–æ—Å—Ç—å_–≤_—Å–µ–∫—É–Ω–¥—É: miningSpeed,
      –º–∞–∫—Å_–∫–∞—Ä–≥–æ: maxCargoCapacity,
      –≤—Å–µ–≥–æ_—Ä–µ—Å—É—Ä—Å–æ–≤: totalAsteroidResources
    });

    const currentTime = Date.now();
    const timeElapsed = (currentTime - lastCollectionTimeMillis) / 1000;

    let newResources = collectedAmount + (miningSpeed * timeElapsed);
    newResources = Math.min(newResources, maxCargoCapacity);
    newResources = Math.min(newResources, totalAsteroidResources);

    if (totalAsteroidResources === 0 && newResources > 0) newResources = 0;
    if (newResources <= 0) newResources = 0;

    // üìä –°–û–•–†–ê–ù–Ø–ï–ú –ë–ê–õ–ê–ù–° –î–û –û–ü–ï–†–ê–¶–ò–ò
    const balanceBefore = {
      ccc: parseFloat(player.ccc),
      cs: parseFloat(player.cs),
      ton: parseFloat(player.ton)
    };

    const updatedCollectedBySystem = { ...player.collected_by_system };
    updatedCollectedBySystem[currentSystemStr] = 0;

    const newLastCollectionTime = { ...player.last_collection_time };
    newLastCollectionTime[currentSystemStr] = new Date().toISOString();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Å—Ç–µ—Ä–æ–∏–¥—ã (–≤—ã—á–∏—Ç–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ)
    const updatedAsteroidTotal = { ...player.asteroid_total_data };
    updatedAsteroidTotal[currentSystemStr] = Math.max(0, (updatedAsteroidTotal[currentSystemStr] || 0) - newResources);

    let actionId = null;
    let balanceAfter = { ...balanceBefore };

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ CS –¥–ª—è —Å–∏—Å—Ç–µ–º—ã 4
    if (systemId === 4) {
      const updatedCs = parseFloat(player.cs) + newResources;
      balanceAfter.cs = updatedCs;
      
      console.log(`‚úÖ –°–ë–û–† CS: —Å–æ–±—Ä–∞–Ω–æ ${newResources} CS, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å ${updatedCs}`);
      
      await client.query(
        'UPDATE players SET cs = $1, collected_by_system = $2, last_collection_time = $3, asteroid_total_data = $4 WHERE telegram_id = $5',
        [updatedCs, updatedCollectedBySystem, newLastCollectionTime, updatedAsteroidTotal, telegramId]
      );

      // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
      actionId = await logPlayerAction(telegramId, 'collect_cs', newResources, systemId, null, {
        timeElapsed: timeElapsed,
        miningSpeed: miningSpeed,
        cargoCapacity: maxCargoCapacity
      }, req);

      // üìä –û–ë–ù–û–í–õ–Ø–ï–ú LIFETIME –°–¢–ê–¢–ò–°–¢–ò–ö–£
      await updateLifetimeStats(telegramId, 'collect_cs', newResources);

    } else {
      const updatedCcc = parseFloat(player.ccc) + newResources;
      balanceAfter.ccc = updatedCcc;
      
      console.log(`‚úÖ –°–ë–û–† CCC: —Å–æ–±—Ä–∞–Ω–æ ${newResources} CCC, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å ${updatedCcc}`);
      
      await client.query(
        'UPDATE players SET ccc = $1, collected_by_system = $2, last_collection_time = $3, asteroid_total_data = $4 WHERE telegram_id = $5',
        [updatedCcc, updatedCollectedBySystem, newLastCollectionTime, updatedAsteroidTotal, telegramId]
      );

      // üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
      actionId = await logPlayerAction(telegramId, 'collect_ccc', newResources, systemId, null, {
        timeElapsed: timeElapsed,
        miningSpeed: miningSpeed,
        cargoCapacity: maxCargoCapacity
      }, req);

      // üìä –û–ë–ù–û–í–õ–Ø–ï–ú LIFETIME –°–¢–ê–¢–ò–°–¢–ò–ö–£
      await updateLifetimeStats(telegramId, 'collect_ccc', newResources);
    }

    // üìä –õ–û–ì–ò–†–£–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê
    if (actionId) {
      await logBalanceChange(telegramId, actionId, balanceBefore, balanceAfter);
    }

    await client.query('COMMIT');
    const updatedPlayer = await getPlayer(telegramId);
    res.json(updatedPlayer);
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå Error collecting resources:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–æ—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ë–ï–ó –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
router.post('/api/safe/collect', async (req, res) => {
  console.log('üîç –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° /api/safe/collect:', req.body);
  
  const { telegramId, last_collection_time, system, collected_ccc, collected_cs } = req.body;
  
  console.log('üîç –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:', { telegramId, system, collected_ccc, collected_cs });
  
  const collectedAmount = system === 4 ? (collected_cs || 0) : (collected_ccc || 0);
  const currencyField = system === 4 ? 'cs' : 'ccc';
  const currencyName = system === 4 ? 'CS' : 'CCC';
  
  console.log('üîç –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:', { system, collectedAmount, currencyField, currencyName });
  
  if (!telegramId || !system || collectedAmount === undefined || collectedAmount === 0) {
    console.log('‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–®–õ–ê');
    return res.status(400).json({ error: 'Missing required fields' });
  }

  console.log('‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–®–õ–ê, –ü–†–û–î–û–õ–ñ–ê–ï–ú...');

  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const systemStr = String(system);
    const currentAsteroidTotal = player.asteroid_total_data?.[systemStr] || 0;
    const updatedAsteroidTotal = { 
      ...player.asteroid_total_data, 
      [systemStr]: Math.max(0, currentAsteroidTotal - parseFloat(collectedAmount)) 
    };
    
    const currentBalance = parseFloat(player[currencyField] || '0');
    const updatedBalance = (currentBalance + parseFloat(collectedAmount)).toFixed(5);
    
    console.log(`üí∞ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê: ${currencyName} ${currentBalance} + ${collectedAmount} = ${updatedBalance}`);
    
    const updatedCollectedBySystem = { ...player.collected_by_system, [systemStr]: 0 };
    const updatedLastCollectionTime = { ...last_collection_time, [systemStr]: new Date().toISOString() };

    const sqlQuery = `UPDATE players SET ${currencyField} = $1, collected_by_system = $2, asteroid_total_data = $3, last_collection_time = $4 WHERE telegram_id = $5`;
    console.log('üîç SQL –ó–ê–ü–†–û–°:', sqlQuery);
    console.log('üîç SQL –ü–ê–†–ê–ú–ï–¢–†–´:', [updatedBalance, updatedCollectedBySystem, updatedAsteroidTotal, updatedLastCollectionTime, telegramId]);
    
    await client.query(sqlQuery, [updatedBalance, updatedCollectedBySystem, updatedAsteroidTotal, updatedLastCollectionTime, telegramId]);

    await client.query('COMMIT');
    console.log(`‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ë–û–†: —Å–æ–±—Ä–∞–Ω–æ ${collectedAmount} ${currencyName}, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    
    // üî• –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const updatedPlayer = await getPlayer(telegramId);
    
    console.log('üéØ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –û–¢–í–ï–¢');
    res.json(updatedPlayer);
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå Error collecting from safe:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// üî• –î–û–ë–ê–í–õ–ï–ù–û: –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
router.get('/api/debug/player/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const player = await getPlayer(telegramId);
    if (!player) return res.status(404).json({ error: 'Player not found' });
    
    res.json({
      –æ—Å–Ω–æ–≤–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ: {
        telegram_id: player.telegram_id,
        cs: player.cs,
        ccc: player.ccc,
        ton: player.ton
      },
      —Å–∏—Å—Ç–µ–º–∞_4: {
        –¥—Ä–æ–Ω—ã: player.drones.filter(d => d.system === 4),
        –∞—Å—Ç–µ—Ä–æ–∏–¥—ã: player.asteroids.filter(a => a.system === 4),
        –∫–∞—Ä–≥–æ: player.cargo_levels.filter(c => c.system === 4),
        —Å–∫–æ—Ä–æ—Å—Ç—å_–¥–æ–±—ã—á–∏: player.mining_speed_data[4],
        –º–∞–∫—Å_–∫–∞—Ä–≥–æ: player.max_cargo_capacity_data[4],
        –≤—Å–µ–≥–æ_—Ä–µ—Å—É—Ä—Å–æ–≤: player.asteroid_total_data[4],
        –≤—Ä–µ–º—è_—Å–±–æ—Ä–∞: player.last_collection_time['4'],
        —Å–æ–±—Ä–∞–Ω–æ: player.collected_by_system['4']
      },
      –≤—Å–µ_—Å–∫–æ—Ä–æ—Å—Ç–∏: player.mining_speed_data,
      –≤—Å–µ_–∫–∞—Ä–≥–æ: player.max_cargo_capacity_data,
      –≤—Å–µ_—Ä–µ—Å—É—Ä—Å—ã: player.asteroid_total_data
    });
  } catch (err) {
    console.error('Error fetching debug data:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üî• –î–û–ë–ê–í–õ–ï–ù–û: –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
router.post('/api/test/update-balance', async (req, res) => {
  const { telegramId, cs, ccc, ton } = req.body;
  if (!telegramId) return res.status(400).json({ error: 'Telegram ID required' });

  try {
    const updates = [];
    const values = [telegramId];
    let paramIndex = 2;

    if (cs !== undefined) {
      updates.push(`cs = $${paramIndex}`);
      values.push(parseFloat(cs));
      paramIndex++;
    }
    if (ccc !== undefined) {
      updates.push(`ccc = $${paramIndex}`);
      values.push(parseFloat(ccc));
      paramIndex++;
    }
    if (ton !== undefined) {
      updates.push(`ton = $${paramIndex}`);
      values.push(parseFloat(ton));
      paramIndex++;
    }

    if (updates.length === 0) {
      return res.status(400).json({ error: 'No values to update' });
    }

    const query = `UPDATE players SET ${updates.join(', ')} WHERE telegram_id = $1`;
    await pool.query(query, values);

    console.log(`üß™ –¢–ï–°–¢: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}:`, { cs, ccc, ton });
    
    const updatedPlayer = await getPlayer(telegramId);
    res.json(updatedPlayer);
  } catch (err) {
    console.error('‚ùå Error updating balances:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// GET –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
router.get('/api/recalculate/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  try {
    const response = await fetch(`http://localhost:5000/api/shop/recalculate/${telegramId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    const result = await response.json();
    res.json(result);
  } catch (err) {
    console.error('Error in recalculate:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –î–û–ë–ê–í–¨–¢–ï –í –§–ê–ô–õ routes/index.js (–Ω–∞–π–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–æ—É—Ç /api/games/stats/:telegramId –∏ –∑–∞–º–µ–Ω–∏—Ç–µ):

router.get('/api/games/stats/:telegramId', async (req, res) => {
  try {
      console.log('üéÆ Getting game stats for:', req.params.telegramId);
      const { telegramId } = req.params;

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –º–∏–Ω–∏–∏–≥—Ä
      const statsResult = await pool.query(`
          SELECT 
              COALESCE(SUM(total_games), 0) as total_games,
              COALESCE(SUM(total_wins), 0) as total_wins,
              COALESCE(SUM(total_losses), 0) as total_losses,
              COALESCE(SUM(total_bet), 0) as total_bet,
              COALESCE(SUM(total_won), 0) as total_won
          FROM minigames_stats 
          WHERE telegram_id = $1
      `, [telegramId]);

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∂–µ–∫–ø–æ—Ç
      const jackpotResult = await pool.query(`
          SELECT current_amount FROM jackpot WHERE id = 1
      `);

      const stats = statsResult.rows[0] || {
          total_games: 0,
          total_wins: 0,
          total_losses: 0,
          total_bet: 0,
          total_won: 0
      };

      const jackpotAmount = jackpotResult.rows[0]?.current_amount || 0;

      console.log('üéÆ Game stats response:', {
          totalGames: parseInt(stats.total_games),
          totalWins: parseInt(stats.total_wins),
          totalLosses: parseInt(stats.total_losses),
          jackpotAmount: parseInt(jackpotAmount)
      });

      res.json({
          totalGames: parseInt(stats.total_games),
          totalWins: parseInt(stats.total_wins),
          totalLosses: parseInt(stats.total_losses),
          totalBet: parseInt(stats.total_bet),
          totalWon: parseInt(stats.total_won),
          jackpotAmount: parseInt(jackpotAmount)
      });

  } catch (error) {
      console.error('üéÆ‚ùå Game stats error:', error);
      res.status(500).json({ 
          totalGames: 0,
          totalWins: 0,
          totalLosses: 0,
          totalBet: 0,
          totalWon: 0,
          jackpotAmount: 0,
          error: 'Server error'
      });
  }
});

module.exports = router;