/**
 * üöÄ –†–û–£–¢–´ –î–õ–Ø –ö–û–†–ê–ë–õ–ï–ô - GALACTIC EMPIRE
 */

const express = require('express');
const router = express.Router();
const pool = require('../../db');
const shipsConfig = require('../../config/galactic-empire/ships.config');
const racesConfig = require('../../config/galactic-empire/races.config');

// =====================================================
// GET /api/galactic-empire/ships/available
// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
// =====================================================
router.get('/available', (req, res) => {
  const ships = Object.keys(shipsConfig).map(shipId => ({
    id: shipId,
    class: shipsConfig[shipId].class,
    tier: shipsConfig[shipId].tier,
    name: shipsConfig[shipId].name,
    nameRu: shipsConfig[shipId].nameRu,
    description: shipsConfig[shipId].description,
    descriptionRu: shipsConfig[shipId].descriptionRu,
    cost: shipsConfig[shipId].cost,
    baseStats: shipsConfig[shipId].baseStats,
    requirements: shipsConfig[shipId].requirements,
    limitPerFormation: shipsConfig[shipId].limitPerFormation,
    buildTime: shipsConfig[shipId].buildTime
  }));

  res.json(ships);
});

// =====================================================
// POST /api/galactic-empire/ships/buy
// –ö—É–ø–∏—Ç—å –∫–æ—Ä–∞–±–ª—å (–¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏)
// =====================================================
router.post('/buy', async (req, res) => {
  try {
    const { telegramId, shipId } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!telegramId || !shipId) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ—Ä–∞–±–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!shipsConfig[shipId]) {
      return res.status(400).json({ error: 'Invalid ship type' });
    }

    const shipConfig = shipsConfig[shipId];

    await pool.query('BEGIN');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const playerResult = await pool.query(`
      SELECT * FROM galactic_empire_players
      WHERE telegram_id = $1
    `, [telegramId]);

    if (playerResult.rows.length === 0) {
      await pool.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const player = playerResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - —É –Ω–∞—Å level –≤—Å–µ–≥–¥–∞ >= 1)
    // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É—Ä–æ–≤–Ω–µ–π –ø–æ–∑–∂–µ

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ Luminios
    if (player.luminios_balance < shipConfig.cost.luminios) {
      await pool.query('ROLLBACK');
      return res.status(400).json({
        error: 'Insufficient Luminios',
        required: shipConfig.cost.luminios,
        current: player.luminios_balance
      });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–º–∏—É–º –∫–æ—Ä–∞–±–ª—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if (shipConfig.limitPerFormation === 1) {
      const existingPremium = await pool.query(`
        SELECT COUNT(*) as count
        FROM galactic_empire_ships
        WHERE player_id = $1 AND ship_class = 'premium'
      `, [telegramId]);

      if (parseInt(existingPremium.rows[0].count) > 0) {
        await pool.query('ROLLBACK');
        return res.status(400).json({
          error: 'Premium ship limit reached. Only one premium ship per formation.'
        });
      }
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º Luminios
    await pool.query(`
      UPDATE galactic_empire_players
      SET luminios_balance = luminios_balance - $1
      WHERE telegram_id = $2
    `, [shipConfig.cost.luminios, telegramId]);

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    const buildTime = shipConfig.buildTime || 5; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥
    const finishAt = new Date(Date.now() + buildTime * 1000);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏
    const queueResult = await pool.query(`
      INSERT INTO galactic_empire_build_queue (
        player_id,
        ship_type,
        ship_class,
        tier,
        finish_at
      ) VALUES ($1, $2, $3, $4, $5)
      RETURNING *
    `, [
      telegramId,
      shipId,
      shipConfig.class,
      shipConfig.tier,
      finishAt
    ]);

    await pool.query('COMMIT');

    const buildQueueEntry = queueResult.rows[0];
    const timeRemaining = Math.floor((new Date(buildQueueEntry.finish_at) - Date.now()) / 1000);

    res.json({
      success: true,
      buildQueue: buildQueueEntry,
      buildTime: buildTime,
      timeRemaining: timeRemaining,
      newBalance: player.luminios_balance - shipConfig.cost.luminios
    });

  } catch (error) {
    await pool.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ä–∞–±–ª—è:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// =====================================================
// GET /api/galactic-empire/ships/build-queue/:telegramId
// –ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä–æ–∫–∞
// =====================================================
router.get('/build-queue/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    const result = await pool.query(`
      SELECT * FROM galactic_empire_build_queue
      WHERE player_id = $1
      ORDER BY finish_at ASC
    `, [telegramId]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const queue = result.rows.map(entry => {
      const now = Date.now();
      const finishTime = new Date(entry.finish_at).getTime();
      const timeRemaining = Math.max(0, Math.floor((finishTime - now) / 1000));
      const isReady = timeRemaining === 0;

      return {
        ...entry,
        timeRemaining,
        isReady
      };
    });

    res.json(queue);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// =====================================================
// POST /api/galactic-empire/ships/claim
// –ó–∞–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –∫–æ—Ä–∞–±–ª—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
// =====================================================
router.post('/claim', async (req, res) => {
  try {
    const { telegramId, queueId } = req.body;

    if (!telegramId || !queueId) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    await pool.query('BEGIN');

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    const queueResult = await pool.query(`
      SELECT * FROM galactic_empire_build_queue
      WHERE id = $1 AND player_id = $2
    `, [queueId, telegramId]);

    if (queueResult.rows.length === 0) {
      await pool.query('ROLLBACK');
      return res.status(404).json({ error: 'Build queue entry not found' });
    }

    const queueEntry = queueResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    const now = new Date();
    if (new Date(queueEntry.finish_at) > now) {
      await pool.query('ROLLBACK');
      const timeRemaining = Math.floor((new Date(queueEntry.finish_at) - now) / 1000);
      return res.status(400).json({
        error: 'Ship is not ready yet',
        timeRemaining
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫–æ—Ä–∞–±–ª—è
    const shipConfig = shipsConfig[queueEntry.ship_type];
    if (!shipConfig) {
      await pool.query('ROLLBACK');
      return res.status(400).json({ error: 'Invalid ship type' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –±–æ–Ω—É—Å–æ–≤ —Ä–∞—Å—ã
    const playerResult = await pool.query(`
      SELECT * FROM galactic_empire_players
      WHERE telegram_id = $1
    `, [telegramId]);

    if (playerResult.rows.length === 0) {
      await pool.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const player = playerResult.rows[0];
    const race = player.race;
    const raceBonuses = racesConfig[race].bonuses;

    // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —É—á—ë—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ —Ä–∞—Å—ã
    const finalStats = {
      hp: Math.floor(shipConfig.baseStats.hp * raceBonuses.hp),
      maxHp: Math.floor(shipConfig.baseStats.hp * raceBonuses.hp),
      attack: Math.floor(shipConfig.baseStats.attack * raceBonuses.attack),
      defense: Math.floor(shipConfig.baseStats.defense * raceBonuses.defense),
      speed: Math.floor(shipConfig.baseStats.speed * raceBonuses.speed)
    };

    // –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–∞–±–ª—å
    const shipResult = await pool.query(`
      INSERT INTO galactic_empire_ships (
        player_id,
        ship_type,
        ship_class,
        tier,
        race,
        current_hp,
        max_hp,
        attack,
        defense,
        speed
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
      RETURNING *
    `, [
      telegramId,
      queueEntry.ship_type,
      queueEntry.ship_class,
      queueEntry.tier,
      race,
      finalStats.hp,
      finalStats.maxHp,
      finalStats.attack,
      finalStats.defense,
      finalStats.speed
    ]);

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    await pool.query(`
      DELETE FROM galactic_empire_build_queue
      WHERE id = $1
    `, [queueId]);

    await pool.query('COMMIT');

    res.json({
      success: true,
      ship: shipResult.rows[0]
    });

  } catch (error) {
    await pool.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// =====================================================
// GET /api/galactic-empire/ships/:telegramId
// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∞–±–ª–∏ –∏–≥—Ä–æ–∫–∞
// =====================================================
router.get('/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    const result = await pool.query(`
      SELECT * FROM galactic_empire_ships
      WHERE player_id = $1
      ORDER BY
        CASE ship_class
          WHEN 'premium' THEN 1
          WHEN 'battleship' THEN 2
          WHEN 'cruiser' THEN 3
          WHEN 'destroyer' THEN 4
          WHEN 'frigate' THEN 5
        END,
        tier DESC,
        created_at DESC
    `, [telegramId]);

    res.json(result.rows);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª–µ–π:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;
