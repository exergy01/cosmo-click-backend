/**
 * üåå GALACTIC EMPIRE v2.0 - –û–°–ù–û–í–ù–´–ï API –†–û–£–¢–´
 */

const express = require('express');
const router = express.Router();
const pool = require('../../db');
const racesConfig = require('../../config/galactic-empire/races.config');
const gameConfig = require('../../config/galactic-empire/game.config');

// =====================================================
// GET /api/galactic-empire/player/:telegramId
// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
// =====================================================
router.get('/player/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    const result = await pool.query(`
      SELECT * FROM galactic_empire_players
      WHERE telegram_id = $1
    `, [telegramId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }

    const player = result.rows[0];

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∞–±–ª–∏
    const shipsResult = await pool.query(`
      SELECT * FROM galactic_empire_ships
      WHERE player_id = $1
      ORDER BY created_at DESC
    `, [telegramId]);

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ü–∏–∏
    const formationsResult = await pool.query(`
      SELECT * FROM galactic_empire_formations
      WHERE player_id = $1
    `, [telegramId]);

    res.json({
      player,
      ships: shipsResult.rows,
      formations: formationsResult.rows
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// =====================================================
// POST /api/galactic-empire/select-race
// –í—ã–±–æ—Ä —Ä–∞—Å—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
// =====================================================
router.post('/select-race', async (req, res) => {
  try {
    const { telegramId, race } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!telegramId || !race) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ä–∞—Å–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!racesConfig[race]) {
      return res.status(400).json({ error: 'Invalid race' });
    }

    await pool.query('BEGIN');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫–∞ –µ—â—ë –Ω–µ—Ç
    const existingPlayer = await pool.query(`
      SELECT telegram_id FROM galactic_empire_players
      WHERE telegram_id = $1
    `, [telegramId]);

    if (existingPlayer.rows.length > 0) {
      await pool.query('ROLLBACK');
      return res.status(400).json({ error: 'Player already exists' });
    }

    // –°–æ–∑–¥–∞—ë–º –∏–≥—Ä–æ–∫–∞
    await pool.query(`
      INSERT INTO galactic_empire_players (telegram_id, race, luminios_balance)
      VALUES ($1, $2, 1000)
    `, [telegramId, race]);

    // –°–æ–∑–¥–∞—ë–º —Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—ã
    await pool.query(`
      INSERT INTO galactic_empire_formations (player_id, race)
      VALUES ($1, $2)
    `, [telegramId, race]);

    // –î–ª—è Zerg - —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–≤–æ–º –ª–æ–≥–∏–Ω–µ
    if (race === 'zerg') {
      await pool.query(`
        INSERT INTO galactic_empire_daily_logins (player_id, login_date)
        VALUES ($1, CURRENT_DATE)
        ON CONFLICT (player_id, login_date) DO NOTHING
      `, [telegramId]);
    }

    await pool.query('COMMIT');

    res.json({
      success: true,
      message: `Welcome to ${racesConfig[race].name}!`,
      race
    });

  } catch (error) {
    await pool.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// =====================================================
// GET /api/galactic-empire/races
// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å
// =====================================================
router.get('/races', (req, res) => {
  const races = Object.keys(racesConfig).map(raceId => ({
    id: raceId,
    name: racesConfig[raceId].name,
    nameRu: racesConfig[raceId].nameRu,
    description: racesConfig[raceId].description,
    descriptionRu: racesConfig[raceId].descriptionRu,
    color: racesConfig[raceId].color,
    secondaryColor: racesConfig[raceId].secondaryColor,
    weaponType: racesConfig[raceId].weaponType,
    weaponName: racesConfig[raceId].weaponName,
    specialAbility: racesConfig[raceId].specialAbility
    // –ù–ï –æ—Ç–¥–∞—ë–º –±–æ–Ω—É—Å—ã –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!
  }));

  res.json(races);
});

// =====================================================
// GET /api/galactic-empire/config
// –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ (–ø—É–±–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
// =====================================================
router.get('/config', (req, res) => {
  res.json({
    repair: {
      autoRepair: {
        hpPerInterval: gameConfig.repair.autoRepair.hpPerInterval,
        intervalMinutes: gameConfig.repair.autoRepair.intervalMinutes
      },
      quickRepair: {
        fullRepairDiscount: gameConfig.repair.quickRepair.fullRepairDiscount,
        percentOptions: gameConfig.repair.quickRepair.percentOptions
      }
    },
    battle: {
      maxRounds: gameConfig.battle.maxRounds,
      modes: gameConfig.battle.modes
    },
    races: {
      changeCost: gameConfig.races.selection.changeCost,
      dualRaceCost: gameConfig.races.dualRace.cost
    }
  });
});

// =====================================================
// DELETE /api/galactic-empire/player/:telegramId
// –°–±—Ä–æ—Å –∏–≥—Ä–æ–∫–∞ (—Å–º–µ–Ω–∞ —Ä–∞—Å—ã)
// =====================================================
router.delete('/player/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    await pool.query('BEGIN');

    // –£–¥–∞–ª—è–µ–º –±–æ–∏
    await pool.query(`
      DELETE FROM galactic_empire_battles
      WHERE player1_id = $1 OR player2_id = $1
    `, [telegramId]);

    // –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏–Ω—ã (–¥–ª—è Zerg)
    await pool.query(`
      DELETE FROM galactic_empire_daily_logins
      WHERE player_id = $1
    `, [telegramId]);

    // –£–¥–∞–ª—è–µ–º –ª—É—Ç
    await pool.query(`
      DELETE FROM galactic_empire_loot
      WHERE player_id = $1
    `, [telegramId]);

    // –£–¥–∞–ª—è–µ–º –∫–æ—Ä–∞–±–ª–∏
    await pool.query(`
      DELETE FROM galactic_empire_ships
      WHERE player_id = $1
    `, [telegramId]);

    // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ü–∏–∏
    await pool.query(`
      DELETE FROM galactic_empire_formations
      WHERE player_id = $1
    `, [telegramId]);

    // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ GE
    await pool.query(`
      DELETE FROM galactic_empire_players
      WHERE telegram_id = $1
    `, [telegramId]);

    await pool.query('COMMIT');

    res.json({
      success: true,
      message: 'Player data reset successfully'
    });

  } catch (error) {
    await pool.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä–æ–∫–∞:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;
