// ===== routes/ton.js ===== –°–ï–†–í–ï–†–ù–´–ï –†–ê–°–ß–ï–¢–´ –í–†–ï–ú–ï–ù–ò
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');

const router = express.Router();

// üî• –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: true = 2/4 –º–∏–Ω—É—Ç—ã, false = 20/40 –¥–Ω–µ–π
const TEST_MODE = true;

// üßÆ –†–ê–°–ß–ï–¢ –ü–õ–ê–ù–û–í –°–¢–ï–ô–ö–ò–ù–ì–ê
router.get('/calculate/:amount', (req, res) => {
  console.log('üßÆ –ó–ê–ü–†–û–° –†–ê–°–ß–ï–¢–ê –ü–õ–ê–ù–û–í:', req.params.amount);
  
  const amount = parseFloat(req.params.amount);
  
  if (isNaN(amount) || amount < 15 || amount > 1000) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞:', amount);
    return res.status(400).json({ 
      success: false,
      error: 'Amount must be between 15 and 1000 TON' 
    });
  }
  
  const fastPlan = {
    type: 'fast',
    days: TEST_MODE ? 2 : 20,
    percent: 3,
    stake_amount: amount,
    return_amount: (amount * 1.03).toFixed(8),
    profit: (amount * 0.03).toFixed(8),
    time_unit: TEST_MODE ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'
  };
  
  const standardPlan = {
    type: 'standard',
    days: TEST_MODE ? 4 : 40,
    percent: 7,
    stake_amount: amount,
    return_amount: (amount * 1.07).toFixed(8),
    profit: (amount * 0.07).toFixed(8),
    time_unit: TEST_MODE ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'
  };
  
  console.log('‚úÖ –ü–õ–ê–ù–´ –†–ê–°–°–ß–ò–¢–ê–ù–´:', { fastPlan, standardPlan });
  
  res.json({
    success: true,
    amount: amount,
    plans: [fastPlan, standardPlan],
    test_mode: TEST_MODE
  });
});

// üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê
router.post('/stake', async (req, res) => {
  const { telegramId, systemId, stakeAmount, planType } = req.body;
  
  console.log('üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê - –ó–ê–ü–†–û–°:', { telegramId, systemId, stakeAmount, planType });
  
  if (!telegramId || !systemId || !stakeAmount || !planType) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  if (!['fast', 'standard'].includes(planType)) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞–Ω–∞:', planType);
    return res.status(400).json({ 
      success: false,
      error: 'Invalid plan type' 
    });
  }
  
  if (parseInt(systemId) !== 5) {
    console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞:', systemId);
    return res.status(400).json({ 
      success: false,
      error: 'Only system 5 is supported' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Å–∏—Å—Ç–µ–º–∞ ${systemId}, —Å—É–º–º–∞ ${stakeAmount}, –ø–ª–∞–Ω ${planType}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      console.log('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å TON
    const tonBalance = parseFloat(player.ton || 0);
    const stakeAmountNum = parseFloat(stakeAmount);
    
    if (tonBalance < stakeAmountNum) {
      await client.query('ROLLBACK');
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON:', { tonBalance, stakeAmountNum });
      return res.status(400).json({ 
        success: false,
        error: 'Insufficient TON balance' 
      });
    }
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∞
    const planPercent = planType === 'fast' ? 3 : 7;
    
    let planDaysForDB, timeUnit;
    
    if (TEST_MODE) {
      planDaysForDB = planType === 'fast' ? 2 : 4; // –º–∏–Ω—É—Ç—ã
      timeUnit = '–º–∏–Ω—É—Ç';
      console.log(`üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: ${planDaysForDB} –º–∏–Ω—É—Ç`);
    } else {
      planDaysForDB = planType === 'fast' ? 20 : 40; // –¥–Ω–∏
      timeUnit = '–¥–Ω–µ–π';
      console.log(`üè≠ –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú: ${planDaysForDB} –¥–Ω–µ–π`);
    }
    
    const returnAmount = (stakeAmountNum * (1 + planPercent / 100)).toFixed(8);
    
    // üî• –°–ï–†–í–ï–†–ù–û–ï –í–†–ï–ú–Ø
    const startDateUTC = new Date();
    let endDateUTC;
    
    if (TEST_MODE) {
      endDateUTC = new Date(startDateUTC.getTime() + (planDaysForDB * 60 * 1000));
    } else {
      endDateUTC = new Date(startDateUTC.getTime() + (planDaysForDB * 24 * 60 * 60 * 1000));
    }
    
    console.log(`üìÖ –°–ï–†–í–ï–†–ù–û–ï –í–†–ï–ú–Ø:`);
    console.log(`   –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ UTC: ${startDateUTC.toISOString()}`);
    console.log(`   –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è UTC: ${endDateUTC.toISOString()}`);
    console.log(`   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${planDaysForDB} ${timeUnit}`);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º TON —Å –±–∞–ª–∞–Ω—Å–∞
    const newTonBalance = (tonBalance - stakeAmountNum).toFixed(8);
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É 5 –Ω–∞–≤—Å–µ–≥–¥–∞
    if (!player.unlocked_systems.includes(systemId)) {
      const updatedUnlockedSystems = [...player.unlocked_systems, systemId];
      console.log(`üîì –†–ê–ó–ë–õ–û–ö–ò–†–£–ï–ú –°–ò–°–¢–ï–ú–£ 5 –ù–ê–í–°–ï–ì–î–ê`);
      
      await client.query(
        'UPDATE players SET unlocked_systems = $1 WHERE telegram_id = $2',
        [JSON.stringify(updatedUnlockedSystems), telegramId]
      );
    } else {
      console.log(`üîì –°–ò–°–¢–ï–ú–ê 5 –£–ñ–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ê –ù–ê–í–°–ï–ì–î–ê`);
    }
    
    // üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê
    console.log('üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê –í –ë–î...');
    
    const stakeResult = await client.query(
      `INSERT INTO ton_staking (
        telegram_id, system_id, stake_amount, plan_type, plan_percent, plan_days, 
        return_amount, start_date, end_date, status
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, 'active') RETURNING *`,
      [telegramId, systemId, stakeAmountNum, planType, planPercent, planDaysForDB, returnAmount, startDateUTC, endDateUTC]
    );
    
    const createdStake = stakeResult.rows[0];
    console.log(`‚úÖ –°–¢–ï–ô–ö –°–û–ó–î–ê–ù –í –ë–î: ID ${createdStake.id}`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    
    res.json({
      success: true,
      message: 'Stake created successfully',
      stake: {
        id: createdStake.id,
        system_id: systemId,
        stake_amount: stakeAmount,
        plan_type: planType,
        plan_days: planDaysForDB,
        plan_percent: planPercent,
        return_amount: returnAmount,
        start_date: createdStake.start_date,
        end_date: createdStake.end_date,
        time_unit: timeUnit,
        test_mode: TEST_MODE
      },
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –°–¢–ï–ô–ö–û–í - üî• –í–°–ï –†–ê–°–ß–ï–¢–´ –ù–ê –°–ï–†–í–ï–†–ï
router.get('/stakes/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    console.log(`üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ï–ô–ö–û–í –î–õ–Ø –ò–ì–†–û–ö–ê: ${telegramId}`);
    
    const result = await pool.query(
      `SELECT 
        id, system_id, stake_amount, plan_type, plan_percent, plan_days,
        return_amount, start_date, end_date, status, created_at
      FROM ton_staking 
      WHERE telegram_id = $1 AND status = 'active'
      ORDER BY created_at DESC`,
      [telegramId]
    );
    
    console.log(`üìã –ù–ê–ô–î–ï–ù–û –ê–ö–¢–ò–í–ù–´–• –°–¢–ï–ô–ö–û–í: ${result.rows.length}`);
    
    // üî• –°–ï–†–í–ï–†–ù–û–ï –í–†–ï–ú–Ø –ò –†–ê–°–ß–ï–¢–´
    const currentTimeUTC = new Date();
    console.log(`‚è∞ –°–ï–†–í–ï–†–ù–û–ï –≤—Ä–µ–º—è UTC: ${currentTimeUTC.toISOString()}`);
    
    const stakes = result.rows.map(stake => {
      const startTimeUTC = new Date(stake.start_date);
      
      let endTimeUTC;
      if (TEST_MODE) {
        endTimeUTC = new Date(startTimeUTC.getTime() + (stake.plan_days * 60 * 1000));
      } else {
        endTimeUTC = new Date(startTimeUTC.getTime() + (stake.plan_days * 24 * 60 * 60 * 1000));
      }
      
      const timeLeftMs = endTimeUTC.getTime() - currentTimeUTC.getTime();
      const totalDurationMs = endTimeUTC.getTime() - startTimeUTC.getTime();
      const elapsedTimeMs = currentTimeUTC.getTime() - startTimeUTC.getTime();
      
      // üî• –°–ï–†–í–ï–† –°–ß–ò–¢–ê–ï–¢ –í–°–ï –°–†–ê–ó–£
      const progress = Math.min(100, Math.max(0, (elapsedTimeMs / totalDurationMs) * 100));
      const isReady = timeLeftMs <= 0;
      
      let timeLeftText;
      if (isReady) {
        timeLeftText = '–ì–æ—Ç–æ–≤–æ –∫ —Å–±–æ—Ä—É!';
      } else {
        if (TEST_MODE) {
          const totalSeconds = Math.floor(timeLeftMs / 1000);
          const minutes = Math.floor(totalSeconds / 60);
          const seconds = totalSeconds % 60;
          timeLeftText = `${minutes}–º ${seconds}—Å`;
        } else {
          const days = Math.floor(timeLeftMs / (1000 * 60 * 60 * 24));
          const hours = Math.floor((timeLeftMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          const minutes = Math.floor((timeLeftMs % (1000 * 60 * 60)) / (1000 * 60));
          
          if (days > 0) {
            timeLeftText = `${days}–¥ ${hours}—á ${minutes}–º`;
          } else if (hours > 0) {
            timeLeftText = `${hours}—á ${minutes}–º`;
          } else {
            timeLeftText = `${minutes}–º`;
          }
        }
      }
      
      console.log(`üìä –°–¢–ï–ô–ö ${stake.id}: –æ—Å—Ç–∞–ª–æ—Å—å ${timeLeftMs}–º—Å, –ø—Ä–æ–≥—Ä–µ—Å—Å ${progress.toFixed(1)}%, –≥–æ—Ç–æ–≤: ${isReady}`);
      
      return {
        ...stake,
        // üî• –°–ï–†–í–ï–† –û–¢–î–ê–ï–¢ –ì–û–¢–û–í–´–ï –î–ê–ù–ù–´–ï
        time_left_text: timeLeftText,
        progress_percent: progress,
        is_ready: isReady,
        remaining_time_ms: Math.max(0, timeLeftMs),
        test_mode: TEST_MODE,
        server_time_utc: currentTimeUTC.toISOString()
      };
    });
    
    console.log(`üìã –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ö–õ–ò–ï–ù–¢–£: ${stakes.length} —Å—Ç–µ–π–∫–æ–≤ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏`);
    res.json(stakes);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–µ–π–∫–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üí∏ –í–´–í–û–î –ó–ê–í–ï–†–®–ï–ù–ù–û–ì–û –°–¢–ï–ô–ö–ê
router.post('/withdraw', async (req, res) => {
  const { telegramId, stakeId } = req.body;
  
  console.log(`üí∏ –ó–ê–ü–†–û–° –í–´–í–û–î–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Å—Ç–µ–π–∫ ${stakeId}`);
  
  if (!telegramId || !stakeId) {
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–µ–π–∫
    const stakeResult = await client.query(
      `SELECT * FROM ton_staking 
       WHERE id = $1 AND telegram_id = $2 AND status = $3`,
      [stakeId, telegramId, 'active']
    );
    
    if (stakeResult.rows.length === 0) {
      await client.query('ROLLBACK');
      console.log('‚ùå –°—Ç–µ–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω');
      return res.status(404).json({ 
        success: false,
        error: 'Stake not found or already withdrawn' 
      });
    }
    
    const stake = stakeResult.rows[0];
    const currentTimeUTC = new Date();
    const startTimeUTC = new Date(stake.start_date);
    
    // üî• –°–ï–†–í–ï–†–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    let endTimeUTC;
    if (TEST_MODE) {
      endTimeUTC = new Date(startTimeUTC.getTime() + (stake.plan_days * 60 * 1000));
    } else {
      endTimeUTC = new Date(startTimeUTC.getTime() + (stake.plan_days * 24 * 60 * 60 * 1000));
    }
    
    const timeLeftMs = endTimeUTC.getTime() - currentTimeUTC.getTime();
    
    console.log(`üí∏ –°–ï–†–í–ï–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –°–¢–ï–ô–ö–ê ${stakeId}:`);
    console.log(`   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: ${currentTimeUTC.toISOString()}`);
    console.log(`   –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è UTC: ${endTimeUTC.toISOString()}`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${timeLeftMs} –º—Å`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫
    if (timeLeftMs > 0) {
      await client.query('ROLLBACK');
      
      let timeLeftText;
      if (TEST_MODE) {
        const minutesLeft = Math.ceil(timeLeftMs / (1000 * 60));
        timeLeftText = `${minutesLeft} –º–∏–Ω—É—Ç`;
      } else {
        const daysLeft = Math.ceil(timeLeftMs / (1000 * 60 * 60 * 24));
        timeLeftText = `${daysLeft} –¥–Ω–µ–π`;
      }
      
      console.log(`‚ùå –°—Ç–µ–π–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤: –æ—Å—Ç–∞–ª–æ—Å—å ${timeLeftText}`);
      return res.status(400).json({ 
        success: false,
        error: 'Stake period not completed',
        time_left: timeLeftText
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É
    const currentTon = parseFloat(player.ton || 0);
    const returnAmount = parseFloat(stake.return_amount);
    const newTonBalance = (currentTon + returnAmount).toFixed(8);
    
    console.log(`üí∞ –í–´–í–û–î –°–¢–ï–ô–ö–ê:`);
    console.log(`   –ë—ã–ª–æ TON: ${currentTon}`);
    console.log(`   –í–æ–∑–≤—Ä–∞—Ç: ${returnAmount}`);
    console.log(`   –°—Ç–∞–Ω–µ—Ç TON: ${newTonBalance}`);
    
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫–∞
    await client.query(
      'UPDATE ton_staking SET status = $1, withdrawn_at = NOW() WHERE id = $2',
      ['withdrawn', stakeId]
    );
    
    console.log(`‚úÖ –°–¢–ï–ô–ö ${stakeId} –£–°–ü–ï–®–ù–û –í–´–í–ï–î–ï–ù`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    
    res.json({
      success: true,
      message: 'Stake withdrawn successfully',
      withdrawn_amount: returnAmount,
      new_ton_balance: newTonBalance,
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üí∏ –û–¢–ú–ï–ù–ê –°–¢–ï–ô–ö–ê –°–û –®–¢–†–ê–§–û–ú 10%
router.post('/cancel', async (req, res) => {
  const { telegramId, stakeId } = req.body;
  
  console.log('üîç –ó–ê–ü–†–û–° –û–¢–ú–ï–ù–´ –°–¢–ï–ô–ö–ê:', { telegramId, stakeId });
  
  if (!telegramId || !stakeId) {
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∞
    const stakeResult = await client.query(
      'SELECT * FROM ton_staking WHERE id = $1 AND telegram_id = $2 AND status = $3',
      [stakeId, telegramId, 'active']
    );
    
    if (stakeResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Stake not found or already processed' 
      });
    }
    
    const stake = stakeResult.rows[0];
    const currentTimeUTC = new Date();
    const startTimeUTC = new Date(stake.start_date);
    
    // üî• –°–ï–†–í–ï–†–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–µ–π–∫
    let endTimeUTC;
    if (TEST_MODE) {
      endTimeUTC = new Date(startTimeUTC.getTime() + (stake.plan_days * 60 * 1000));
    } else {
      endTimeUTC = new Date(startTimeUTC.getTime() + (stake.plan_days * 24 * 60 * 60 * 1000));
    }
    
    const timeLeftMs = endTimeUTC.getTime() - currentTimeUTC.getTime();
    
    console.log(`üîç –°–ï–†–í–ï–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –û–¢–ú–ï–ù–´ –°–¢–ï–ô–ö–ê ${stakeId}:`);
    console.log(`   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: ${currentTimeUTC.toISOString()}`);
    console.log(`   –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è UTC: ${endTimeUTC.toISOString()}`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${timeLeftMs} –º—Å`);
    
    // üî• –ó–ê–©–ò–¢–ê: –ù–ï–õ–¨–ó–Ø –û–¢–ú–ï–ù–ò–¢–¨ –ó–ê–í–ï–†–®–ï–ù–ù–´–ô –°–¢–ï–ô–ö
    if (timeLeftMs <= 0) {
      await client.query('ROLLBACK');
      console.log(`‚ùå –°–¢–ï–ô–ö –ó–ê–í–ï–†–®–ï–ù - –û–¢–ú–ï–ù–ê –ù–ï–í–û–ó–ú–û–ñ–ù–ê`);
      return res.status(400).json({ 
        success: false,
        error: 'Cannot cancel completed stake. Please withdraw instead.',
        message: '–°—Ç–µ–π–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å"'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å —à—Ç—Ä–∞—Ñ–æ–º 10%
    const stakeAmount = parseFloat(stake.stake_amount);
    const penalty = stakeAmount * 0.1;
    const returnAmount = stakeAmount - penalty;
    
    console.log(`üí∞ –†–ê–°–ß–ï–¢ –û–¢–ú–ï–ù–´: –≤–ª–æ–∂–µ–Ω–æ ${stakeAmount}, —à—Ç—Ä–∞—Ñ ${penalty}, –≤–æ–∑–≤—Ä–∞—Ç ${returnAmount}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É (—Å —É—á–µ—Ç–æ–º —à—Ç—Ä–∞—Ñ–∞)
    const currentTon = parseFloat(player.ton || 0);
    const newTonBalance = (currentTon + returnAmount).toFixed(8);
    
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π–∫
    await client.query(
      `UPDATE ton_staking SET 
        status = $1, 
        withdrawn_at = NOW(),
        return_amount = $2,
        penalty_amount = $3
      WHERE id = $4`,
      ['withdrawn', returnAmount, penalty, stakeId]
    );
    
    console.log(`‚úÖ –°–¢–ï–ô–ö ${stakeId} –û–¢–ú–ï–ù–ï–ù –° –®–¢–†–ê–§–û–ú`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    
    res.json({
      success: true,
      message: 'Stake cancelled with penalty',
      returned_amount: returnAmount,
      penalty_amount: penalty,
      new_ton_balance: newTonBalance,
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üìö –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –°–¢–ï–ô–ö–û–í –ò–ì–†–û–ö–ê
router.get('/stakes/history/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    console.log(`üìö –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –°–¢–ï–ô–ö–û–í –î–õ–Ø –ò–ì–†–û–ö–ê: ${telegramId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∏
    const result = await pool.query(
      `SELECT 
        id, system_id, stake_amount, plan_type, plan_percent, plan_days,
        return_amount, start_date, end_date, status, created_at, withdrawn_at,
        penalty_amount
      FROM ton_staking 
      WHERE telegram_id = $1 AND status = 'withdrawn'
      ORDER BY withdrawn_at DESC`,
      [telegramId]
    );
    
    console.log(`üìö –ù–ê–ô–î–ï–ù–û –ó–ê–í–ï–†–®–ï–ù–ù–´–• –°–¢–ï–ô–ö–û–í: ${result.rows.length}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∫ –∫–∞–∂–¥–æ–º—É —Å—Ç–µ–π–∫—É
    const stakesWithTestMode = result.rows.map(stake => ({
      ...stake,
      test_mode: TEST_MODE
    }));
    
    res.json(stakesWithTestMode);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–µ–π–∫–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;