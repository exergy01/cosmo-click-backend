// ===== routes/ton.js ===== –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');

const router = express.Router();

// üî• –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: false = –æ–±—ã—á–Ω—ã–µ —Å—Ä–æ–∫–∏ (20/40 –¥–Ω–µ–π)
const TEST_MODE = true;

// üßÆ –†–ê–°–ß–ï–¢ –ü–õ–ê–ù–û–í –°–¢–ï–ô–ö–ò–ù–ì–ê
router.get('/calculate/:amount', (req, res) => {
  console.log('üßÆ –ó–ê–ü–†–û–° –†–ê–°–ß–ï–¢–ê –ü–õ–ê–ù–û–í:', req.params.amount);
  
  const amount = parseFloat(req.params.amount);
  
  if (isNaN(amount) || amount < 15 || amount > 1000) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞:', amount);
    return res.status(400).json({ 
      success: false,
      error: 'Amount must be between 15 and 1000 TON' 
    });
  }
  
  const fastPlan = {
    type: 'fast',
    days: TEST_MODE ? 2 : 20,
    percent: 3,
    stake_amount: amount,
    return_amount: (amount * 1.03).toFixed(8),
    profit: (amount * 0.03).toFixed(8),
    time_unit: TEST_MODE ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'
  };
  
  const standardPlan = {
    type: 'standard',
    days: TEST_MODE ? 4 : 40,
    percent: 7,
    stake_amount: amount,
    return_amount: (amount * 1.07).toFixed(8),
    profit: (amount * 0.07).toFixed(8),
    time_unit: TEST_MODE ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'
  };
  
  console.log('‚úÖ –ü–õ–ê–ù–´ –†–ê–°–°–ß–ò–¢–ê–ù–´:', { fastPlan, standardPlan });
  
  res.json({
    success: true,
    amount: amount,
    plans: [fastPlan, standardPlan],
    test_mode: TEST_MODE
  });
});

// üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê (–≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Å–∏—Å—Ç–µ–º—ã)
router.post('/stake', async (req, res) => {
  const { telegramId, systemId, stakeAmount, planType } = req.body;
  
  console.log('üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê - –ó–ê–ü–†–û–°:', { telegramId, systemId, stakeAmount, planType });
  
  if (!telegramId || !systemId || !stakeAmount || !planType) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  if (!['fast', 'standard'].includes(planType)) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞–Ω–∞:', planType);
    return res.status(400).json({ 
      success: false,
      error: 'Invalid plan type' 
    });
  }
  
  // üî• –¢–û–õ–¨–ö–û –°–ò–°–¢–ï–ú–ê 5 –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø
  if (parseInt(systemId) !== 5) {
    console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞:', systemId);
    return res.status(400).json({ 
      success: false,
      error: 'Only system 5 is supported' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Å–∏—Å—Ç–µ–º–∞ ${systemId}, —Å—É–º–º–∞ ${stakeAmount}, –ø–ª–∞–Ω ${planType}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      console.log('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å TON
    const tonBalance = parseFloat(player.ton || 0);
    const stakeAmountNum = parseFloat(stakeAmount);
    
    if (tonBalance < stakeAmountNum) {
      await client.query('ROLLBACK');
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON:', { tonBalance, stakeAmountNum });
      return res.status(400).json({ 
        success: false,
        error: 'Insufficient TON balance' 
      });
    }
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∞
    const planPercent = planType === 'fast' ? 3 : 7;
    let planDays = planType === 'fast' ? 20 : 40;
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å—Ä–æ–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö, –≤ –æ–±—ã—á–Ω–æ–º - –≤ –¥–Ω—è—Ö
    let timeUnit = '–¥–Ω–µ–π';
    let actualDuration = planDays; // –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    
    if (TEST_MODE) {
      actualDuration = planType === 'fast' ? 2 : 4; // 2 –∏–ª–∏ 4 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      timeUnit = '–º–∏–Ω—É—Ç';
      console.log(`üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: ${actualDuration} –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ ${planDays} –¥–Ω–µ–π`);
    }
    
    const returnAmount = (stakeAmountNum * (1 + planPercent / 100)).toFixed(8);
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UTC
    const startDate = new Date(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    const endDate = new Date(); // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–Ω—Ü–∞

    if (TEST_MODE) {
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –ú–ò–ù–£–¢–´ –∏—Å–ø–æ–ª—å–∑—É—è setTime()
      const currentTime = startDate.getTime(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      const minutesToAdd = actualDuration; // 2 –∏–ª–∏ 4 –º–∏–Ω—É—Ç—ã
      const millisecondsToAdd = minutesToAdd * 60 * 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      endDate.setTime(currentTime + millisecondsToAdd); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
      
      console.log(`üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –¥–æ–±–∞–≤–ª—è–µ–º ${actualDuration} –º–∏–Ω—É—Ç (${millisecondsToAdd} –º—Å)`);
      console.log(`üß™ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime}, –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: ${currentTime + millisecondsToAdd}`);
    } else {
      // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –î–ù–ò
      endDate.setDate(endDate.getDate() + actualDuration);
      console.log(`üè≠ –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú: –¥–æ–±–∞–≤–ª—è–µ–º ${actualDuration} –¥–Ω–µ–π`);
    }

    console.log(`üìÖ –î–ê–¢–´ (UTC):`);
    console.log(`   –°—Ç–∞—Ä—Ç: ${startDate.toISOString()}`);
    console.log(`   –ö–æ–Ω–µ—Ü: ${endDate.toISOString()}`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞ –≤ –º—Å: ${endDate.getTime() - startDate.getTime()}`);
    console.log(`üí∞ –†–ê–°–ß–ï–¢: ${stakeAmount} TON * ${planPercent}% = ${returnAmount} TON`);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º TON —Å –±–∞–ª–∞–Ω—Å–∞
    const newTonBalance = (tonBalance - stakeAmountNum).toFixed(8);
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï–ì–î–ê —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É 5 –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–µ–π–∫–µ
    // –°–∏—Å—Ç–µ–º–∞ 5 –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ù–ê–í–°–ï–ì–î–ê –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏
    if (!player.unlocked_systems.includes(systemId)) {
      const updatedUnlockedSystems = [...player.unlocked_systems, systemId];
      console.log(`üîì –†–ê–ó–ë–õ–û–ö–ò–†–£–ï–ú –°–ò–°–¢–ï–ú–£ 5 –ù–ê–í–°–ï–ì–î–ê: –±—ã–ª–æ ${JSON.stringify(player.unlocked_systems)}, —Å—Ç–∞–Ω–µ—Ç ${JSON.stringify(updatedUnlockedSystems)}`);
      
      await client.query(
        'UPDATE players SET unlocked_systems = $1 WHERE telegram_id = $2',
        [JSON.stringify(updatedUnlockedSystems), telegramId]
      );
    } else {
      console.log(`üîì –°–ò–°–¢–ï–ú–ê 5 –£–ñ–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ê –ù–ê–í–°–ï–ì–î–ê`);
    }
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–µ–π–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    const stakeResult = await client.query(
      `INSERT INTO ton_staking (
        telegram_id, system_id, stake_amount, plan_type, plan_percent, plan_days, 
        return_amount, start_date, end_date
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *`,
      [telegramId, systemId, stakeAmountNum, planType, planPercent, actualDuration, returnAmount, startDate.toISOString(), endDate.toISOString()]
    );
    
    console.log(`‚úÖ –°–¢–ï–ô–ö –°–û–ó–î–ê–ù: ID ${stakeResult.rows[0].id}, –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è ${endDate.toISOString()}`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    const createdStake = stakeResult.rows[0];
    
    res.json({
      success: true,
      message: 'Stake created successfully',
      stake: {
        id: createdStake.id,
        system_id: systemId,
        stake_amount: stakeAmount,
        plan_type: planType,
        plan_days: actualDuration, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        plan_percent: planPercent,
        return_amount: returnAmount,
        end_date: endDate.toISOString(),
        days_left: actualDuration,
        time_unit: timeUnit // üî• –î–û–ë–ê–í–õ–ï–ù–û: —É–∫–∞–∑—ã–≤–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏
      },
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –°–¢–ï–ô–ö–û–í –ò–ì–†–û–ö–ê - –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô
router.get('/stakes/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    console.log(`üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ï–ô–ö–û–í –î–õ–Ø –ò–ì–†–û–ö–ê: ${telegramId}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –í–°–ï —Å—Ç–µ–π–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const allStakesResult = await pool.query(
      `SELECT 
        id, system_id, stake_amount, plan_type, plan_percent, plan_days,
        return_amount, start_date, end_date, status, created_at,
        penalty_amount
      FROM ton_staking 
      WHERE telegram_id = $1 
      ORDER BY created_at DESC`,
      [telegramId]
    );
    
    console.log(`üìã –í–°–ï–ì–û –°–¢–ï–ô–ö–û–í –í –ë–î: ${allStakesResult.rows.length}`);
    allStakesResult.rows.forEach(stake => {
      console.log(`   - –°—Ç–µ–π–∫ ${stake.id}: —Å–∏—Å—Ç–µ–º–∞ ${stake.system_id}, —Å—Ç–∞—Ç—É—Å ${stake.status}, —Å–æ–∑–¥–∞–Ω ${stake.created_at}`);
    });
    
    // –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    const result = await pool.query(
      `SELECT 
        id, system_id, stake_amount, plan_type, plan_percent, plan_days,
        return_amount, start_date, end_date, status, created_at,
        penalty_amount
      FROM ton_staking 
      WHERE telegram_id = $1 AND status = 'active'
      ORDER BY created_at DESC`,
      [telegramId]
    );
    
    console.log(`üìã –ù–ê–ô–î–ï–ù–û –ê–ö–¢–ò–í–ù–´–• –°–¢–ï–ô–ö–û–í: ${result.rows.length}`);
    result.rows.forEach(stake => {
      console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–µ–π–∫ ${stake.id}: —Å–∏—Å—Ç–µ–º–∞ ${stake.system_id}, —Å—É–º–º–∞ ${stake.stake_amount}`);
    });
    
    const stakes = result.rows.map(stake => {
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
      const now = new Date(); // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
      const endDate = new Date(stake.end_date); // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç–µ–π–∫–∞
      const timeLeftMs = endDate.getTime() - now.getTime(); // –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      
      let daysLeft;
      let timeUnitForDisplay;
      
      if (TEST_MODE) {
        // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã
        daysLeft = Math.max(0, Math.ceil(timeLeftMs / (1000 * 60))); // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã -> –º–∏–Ω—É—Ç—ã
        timeUnitForDisplay = '–º–∏–Ω—É—Ç';
      } else {
        // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏  
        daysLeft = Math.max(0, Math.ceil(timeLeftMs / (1000 * 60 * 60 * 24))); // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã -> –¥–Ω–∏
        timeUnitForDisplay = '–¥–Ω–µ–π';
      }
      
      console.log(`   üìä –°—Ç–µ–π–∫ ${stake.id}: timeLeftMs=${timeLeftMs}, –æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} ${timeUnitForDisplay}`);
      
      return {
        ...stake,
        days_left: daysLeft,
        is_ready: timeLeftMs <= 0, // –ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        end_date: endDate.toISOString(),
        start_date: new Date(stake.start_date).toISOString(),
        test_mode: TEST_MODE,
        time_unit: timeUnitForDisplay
      };
    });
    
    console.log(`üìã –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ö–õ–ò–ï–ù–¢–£: ${stakes.length} —Å—Ç–µ–π–∫–æ–≤`);
    res.json(stakes);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–µ–π–∫–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üí∏ –í–´–í–û–î –ó–ê–í–ï–†–®–ï–ù–ù–û–ì–û –°–¢–ï–ô–ö–ê
router.post('/withdraw', async (req, res) => {
  const { telegramId, stakeId } = req.body;
  
  if (!telegramId || !stakeId) {
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üí∏ –í–´–í–û–î –°–¢–ï–ô–ö–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Å—Ç–µ–π–∫ ${stakeId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∞
    const stakeResult = await client.query(
      'SELECT * FROM ton_staking WHERE id = $1 AND telegram_id = $2 AND status = $3',
      [stakeId, telegramId, 'active']
    );
    
    if (stakeResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Stake not found or already withdrawn' 
      });
    }
    
    const stake = stakeResult.rows[0];
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è
    const now = new Date(); // UTC –≤—Ä–µ–º—è
    const endDate = new Date(stake.end_date); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫
    if (now < endDate) {
      await client.query('ROLLBACK');
      const timeLeft = endDate - now;
      
      let timeLeftText;
      if (TEST_MODE) {
        const minutesLeft = Math.ceil(timeLeft / (1000 * 60));
        timeLeftText = `${minutesLeft} –º–∏–Ω—É—Ç`;
      } else {
        const daysLeft = Math.ceil(timeLeft / (1000 * 60 * 60 * 24));
        timeLeftText = `${daysLeft} –¥–Ω–µ–π`;
      }
      
      return res.status(400).json({ 
        success: false,
        error: 'Stake period not completed',
        time_left: timeLeftText
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É
    const currentTon = parseFloat(player.ton || 0);
    const returnAmount = parseFloat(stake.return_amount);
    const newTonBalance = (currentTon + returnAmount).toFixed(8);
    
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫–∞ —Å UTC –≤—Ä–µ–º–µ–Ω–µ–º
    await client.query(
      'UPDATE ton_staking SET status = $1, withdrawn_at = $2 WHERE id = $3',
      ['withdrawn', new Date().toISOString(), stakeId]
    );
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ò–ö–û–ì–î–ê –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú –°–ò–°–¢–ï–ú–£ 5 –ü–û–°–õ–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò!
    // –°–∏—Å—Ç–µ–º–∞ 5 –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –∑–∞ 15 TON
    console.log(`üîì –°–ò–°–¢–ï–ú–ê 5 –û–°–¢–ê–ï–¢–°–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ô –ù–ê–í–°–ï–ì–î–ê - –≤—ã–≤–æ–¥ —Å—Ç–µ–π–∫–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É`);
    
    console.log(`‚úÖ –°–¢–ï–ô–ö –í–´–í–ï–î–ï–ù: ${returnAmount} TON –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –±–∞–ª–∞–Ω—Å—É`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    
    res.json({
      success: true,
      message: 'Stake withdrawn successfully',
      withdrawn_amount: returnAmount,
      new_ton_balance: newTonBalance,
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üí∏ –û–¢–ú–ï–ù–ê –°–¢–ï–ô–ö–ê –°–û –®–¢–†–ê–§–û–ú 10%
router.post('/cancel', async (req, res) => {
  const { telegramId, stakeId } = req.body;
  
  console.log('üîç –û–¢–ú–ï–ù–ê –°–¢–ï–ô–ö–ê –ó–ê–ü–†–û–°:', { telegramId, stakeId });
  
  if (!telegramId || !stakeId) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üí∏ –û–¢–ú–ï–ù–ê –°–¢–ï–ô–ö–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Å—Ç–µ–π–∫ ${stakeId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∞
    const stakeResult = await client.query(
      'SELECT * FROM ton_staking WHERE id = $1 AND telegram_id = $2 AND status = $3',
      [stakeId, telegramId, 'active']
    );
    
    if (stakeResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Stake not found or already processed' 
      });
    }
    
    const stake = stakeResult.rows[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å —à—Ç—Ä–∞—Ñ–æ–º 10%
    const stakeAmount = parseFloat(stake.stake_amount);
    const penalty = stakeAmount * 0.1; // 10% —à—Ç—Ä–∞—Ñ
    const returnAmount = stakeAmount - penalty;
    
    console.log(`üí∞ –†–ê–°–ß–ï–¢ –û–¢–ú–ï–ù–´: –≤–ª–æ–∂–µ–Ω–æ ${stakeAmount}, —à—Ç—Ä–∞—Ñ ${penalty}, –≤–æ–∑–≤—Ä–∞—Ç ${returnAmount}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É (—Å —É—á–µ—Ç–æ–º —à—Ç—Ä–∞—Ñ–∞)
    const currentTon = parseFloat(player.ton || 0);
    const newTonBalance = (currentTon + returnAmount).toFixed(8);
    
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π–∫ —Å UTC –≤—Ä–µ–º–µ–Ω–µ–º
    await client.query(
      `UPDATE ton_staking SET 
        status = $1, 
        withdrawn_at = $2,
        return_amount = $3,
        penalty_amount = $4
      WHERE id = $5`,
      ['withdrawn', new Date().toISOString(), returnAmount, penalty, stakeId]
    );
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ò–ö–û–ì–î–ê –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú –°–ò–°–¢–ï–ú–£ 5 –ü–û–°–õ–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò!
    // –°–∏—Å—Ç–µ–º–∞ 5 –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –∑–∞ 15 TON
    console.log(`üîì –°–ò–°–¢–ï–ú–ê 5 –û–°–¢–ê–ï–¢–°–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ô –ù–ê–í–°–ï–ì–î–ê - –æ—Ç–º–µ–Ω–∞ —Å—Ç–µ–π–∫–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É`);
    
    console.log(`‚úÖ –°–¢–ï–ô–ö –û–¢–ú–ï–ù–ï–ù: –≤–æ–∑–≤—Ä–∞—Ç ${returnAmount} TON, —à—Ç—Ä–∞—Ñ ${penalty} TON`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    
    res.json({
      success: true,
      message: 'Stake cancelled with penalty',
      returned_amount: returnAmount,
      penalty_amount: penalty,
      new_ton_balance: newTonBalance,
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üî• –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–û–ó–î–ê–ù–ò–Ø –°–¢–ï–ô–ö–ê –í –°–ò–°–¢–ï–ú–ï 5
router.post('/check-system-5', async (req, res) => {
  const { telegramId } = req.body;
  
  if (!telegramId) {
    return res.status(400).json({ 
      success: false,
      error: 'Missing telegram ID' 
    });
  }
  
  try {
    const player = await getPlayer(telegramId);
    
    if (!player) {
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ 5
    const isSystem5Unlocked = player.unlocked_systems?.includes(5);
    
    if (isSystem5Unlocked) {
      // –°–∏—Å—Ç–µ–º–∞ 5 —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–µ–π–∫–∏
      res.json({
        success: true,
        status: 'choose_amount',
        system_id: 5,
        min_amount: 15,
        max_amount: 1000,
        current_ton_balance: parseFloat(player.ton || 0),
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫–∞ (15-1000 TON)'
      });
    } else {
      // –°–∏—Å—Ç–µ–º–∞ 5 –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ 15 TON
      res.json({
        success: true,
        status: 'need_unlock',
        system_id: 5,
        price: 15,
        currency: 'ton',
        message: '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É 5 –∑–∞ 15 TON'
      });
    }
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã 5:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  }
});

module.exports = router;