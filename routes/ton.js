// ===== routes/ton.js ===== –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï - –í–†–ï–ú–Ø –ö–ê–ö –ß–ò–°–õ–ê
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');

const router = express.Router();

// üî• –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: true = 2/4 –º–∏–Ω—É—Ç—ã, false = 20/40 –¥–Ω–µ–π
const TEST_MODE = true;

// üßÆ –†–ê–°–ß–ï–¢ –ü–õ–ê–ù–û–í –°–¢–ï–ô–ö–ò–ù–ì–ê
router.get('/calculate/:amount', (req, res) => {
  console.log('üßÆ –ó–ê–ü–†–û–° –†–ê–°–ß–ï–¢–ê –ü–õ–ê–ù–û–í:', req.params.amount);
  
  const amount = parseFloat(req.params.amount);
  
  if (isNaN(amount) || amount < 15 || amount > 1000) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞:', amount);
    return res.status(400).json({ 
      success: false,
      error: 'Amount must be between 15 and 1000 TON' 
    });
  }
  
  const fastPlan = {
    type: 'fast',
    days: TEST_MODE ? 2 : 20,
    percent: 3,
    stake_amount: amount,
    return_amount: (amount * 1.03).toFixed(8),
    profit: (amount * 0.03).toFixed(8),
    time_unit: TEST_MODE ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'
  };
  
  const standardPlan = {
    type: 'standard',
    days: TEST_MODE ? 4 : 40,
    percent: 7,
    stake_amount: amount,
    return_amount: (amount * 1.07).toFixed(8),
    profit: (amount * 0.07).toFixed(8),
    time_unit: TEST_MODE ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'
  };
  
  console.log('‚úÖ –ü–õ–ê–ù–´ –†–ê–°–°–ß–ò–¢–ê–ù–´:', { fastPlan, standardPlan });
  
  res.json({
    success: true,
    amount: amount,
    plans: [fastPlan, standardPlan],
    test_mode: TEST_MODE
  });
});

// üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê - –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï
router.post('/stake', async (req, res) => {
  const { telegramId, systemId, stakeAmount, planType } = req.body;
  
  console.log('üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê - –ó–ê–ü–†–û–°:', { telegramId, systemId, stakeAmount, planType });
  
  if (!telegramId || !systemId || !stakeAmount || !planType) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  if (!['fast', 'standard'].includes(planType)) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞–Ω–∞:', planType);
    return res.status(400).json({ 
      success: false,
      error: 'Invalid plan type' 
    });
  }
  
  if (parseInt(systemId) !== 5) {
    console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞:', systemId);
    return res.status(400).json({ 
      success: false,
      error: 'Only system 5 is supported' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Å–∏—Å—Ç–µ–º–∞ ${systemId}, —Å—É–º–º–∞ ${stakeAmount}, –ø–ª–∞–Ω ${planType}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      console.log('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å TON
    const tonBalance = parseFloat(player.ton || 0);
    const stakeAmountNum = parseFloat(stakeAmount);
    
    if (tonBalance < stakeAmountNum) {
      await client.query('ROLLBACK');
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON:', { tonBalance, stakeAmountNum });
      return res.status(400).json({ 
        success: false,
        error: 'Insufficient TON balance' 
      });
    }
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∞
    const planPercent = planType === 'fast' ? 3 : 7;
    
    // üî• –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –í—Å–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    let actualDurationForDB, timeUnit, millisecondsToAdd;
    
    if (TEST_MODE) {
      actualDurationForDB = planType === 'fast' ? 2 : 4; // –º–∏–Ω—É—Ç—ã
      timeUnit = '–º–∏–Ω—É—Ç';
      millisecondsToAdd = actualDurationForDB * 60 * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      console.log(`üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: ${actualDurationForDB} –º–∏–Ω—É—Ç = ${millisecondsToAdd} –º—Å`);
    } else {
      actualDurationForDB = planType === 'fast' ? 20 : 40; // –¥–Ω–∏
      timeUnit = '–¥–Ω–µ–π';
      millisecondsToAdd = actualDurationForDB * 24 * 60 * 60 * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      console.log(`üè≠ –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú: ${actualDurationForDB} –¥–Ω–µ–π = ${millisecondsToAdd} –º—Å`);
    }
    
    const returnAmount = (stakeAmountNum * (1 + planPercent / 100)).toFixed(8);
    
    // üî• –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –∫–∞–∫ —á–∏—Å–ª–∞ (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
    const startTimeMs = Date.now();
    const endTimeMs = startTimeMs + millisecondsToAdd;
    
    console.log(`üìÖ –ü–†–û–°–¢–û–ô –†–ê–°–ß–ï–¢ –í–†–ï–ú–ï–ù–ò:`);
    console.log(`   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${startTimeMs} –º—Å`);
    console.log(`   –î–æ–±–∞–≤–ª—è–µ–º: ${millisecondsToAdd} –º—Å`);
    console.log(`   –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${endTimeMs} –º—Å`);
    console.log(`   –°—Ç–∞—Ä—Ç: ${new Date(startTimeMs).toISOString()}`);
    console.log(`   –ö–æ–Ω–µ—Ü: ${new Date(endTimeMs).toISOString()}`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${endTimeMs - startTimeMs} –º—Å`);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º TON —Å –±–∞–ª–∞–Ω—Å–∞
    const newTonBalance = (tonBalance - stakeAmountNum).toFixed(8);
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É 5 –Ω–∞–≤—Å–µ–≥–¥–∞
    if (!player.unlocked_systems.includes(systemId)) {
      const updatedUnlockedSystems = [...player.unlocked_systems, systemId];
      console.log(`üîì –†–ê–ó–ë–õ–û–ö–ò–†–£–ï–ú –°–ò–°–¢–ï–ú–£ 5 –ù–ê–í–°–ï–ì–î–ê`);
      
      await client.query(
        'UPDATE players SET unlocked_systems = $1 WHERE telegram_id = $2',
        [JSON.stringify(updatedUnlockedSystems), telegramId]
      );
    } else {
      console.log(`üîì –°–ò–°–¢–ï–ú–ê 5 –£–ñ–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ê –ù–ê–í–°–ï–ì–î–ê`);
    }
    
    // üî• –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è start_time_ms –∏ end_time_ms + –æ—Ç–ª–∞–¥–∫–∞
    console.log('üî• –ü–û–ü–´–¢–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–¢–ï–ô–ö–ê –í –ë–î...');
    console.log('üî• –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', {
      telegramId, systemId, stakeAmountNum, planType, planPercent, 
      actualDurationForDB, returnAmount, startTimeMs, endTimeMs
    });
    
    const stakeResult = await client.query(
      `INSERT INTO ton_staking (
        telegram_id, system_id, stake_amount, plan_type, plan_percent, plan_days, 
        return_amount, start_date, end_date, start_time_ms, end_time_ms
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW(), $8, $9) RETURNING *`,
      [telegramId, systemId, stakeAmountNum, planType, planPercent, actualDurationForDB, returnAmount, startTimeMs, endTimeMs]
    ).catch(err => {
      console.error('‚ùå –û–®–ò–ë–ö–ê –í–°–¢–ê–í–ö–ò –í –ë–î:', err);
      throw err;
    });
    
    console.log(`‚úÖ –°–¢–ï–ô–ö –°–û–ó–î–ê–ù –í –ë–î:`);
    console.log(`   ID: ${stakeResult.rows[0].id}`);
    console.log(`   start_time_ms: ${stakeResult.rows[0].start_time_ms}`);
    console.log(`   end_time_ms: ${stakeResult.rows[0].end_time_ms}`);
    console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ—Å—Ç–∏: ${stakeResult.rows[0].end_time_ms - stakeResult.rows[0].start_time_ms} –º—Å`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    const createdStake = stakeResult.rows[0];
    
    res.json({
      success: true,
      message: 'Stake created successfully',
      stake: {
        id: createdStake.id,
        system_id: systemId,
        stake_amount: stakeAmount,
        plan_type: planType,
        plan_days: actualDurationForDB,
        plan_percent: planPercent,
        return_amount: returnAmount,
        end_date: new Date(endTimeMs).toISOString(),
        days_left: actualDurationForDB,
        time_unit: timeUnit
      },
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –°–¢–ï–ô–ö–û–í - –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï
router.get('/stakes/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    console.log(`üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ï–ô–ö–û–í –î–õ–Ø –ò–ì–†–û–ö–ê: ${telegramId}`);
    
    // üî• –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –ß–∏—Ç–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
    const result = await pool.query(
      `SELECT 
        id, system_id, stake_amount, plan_type, plan_percent, plan_days,
        return_amount, start_date, end_date, status, created_at,
        start_time_ms, end_time_ms
      FROM ton_staking 
      WHERE telegram_id = $1 AND status = 'active'
      ORDER BY created_at DESC`,
      [telegramId]
    );
    
    console.log(`üìã –ù–ê–ô–î–ï–ù–û –ê–ö–¢–ò–í–ù–´–• –°–¢–ï–ô–ö–û–í: ${result.rows.length}`);
    
    const currentTimeMs = Date.now();
    console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTimeMs} (${new Date(currentTimeMs).toISOString()})`);
    
    const stakes = result.rows.map(stake => {
      // üî• –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
      const endTimeMs = parseInt(stake.end_time_ms);
      const timeLeftMs = endTimeMs - currentTimeMs;
      
      console.log(`üìä –°–¢–ï–ô–ö ${stake.id}:`);
      console.log(`   –ö–æ–Ω–µ—Ü: ${endTimeMs} (${new Date(endTimeMs).toISOString()})`);
      console.log(`   –¢–µ–∫—É—â–µ–µ: ${currentTimeMs} (${new Date(currentTimeMs).toISOString()})`);
      console.log(`   –û—Å—Ç–∞–ª–æ—Å—å: ${timeLeftMs} –º—Å`);
      
      let daysLeft, timeUnitForDisplay;
      
      if (TEST_MODE) {
        daysLeft = Math.max(0, Math.ceil(timeLeftMs / (1000 * 60)));
        timeUnitForDisplay = '–º–∏–Ω—É—Ç';
        console.log(`   üß™ –¢–µ—Å—Ç —Ä–µ–∂–∏–º: ${daysLeft} –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è`);
      } else {
        daysLeft = Math.max(0, Math.ceil(timeLeftMs / (1000 * 60 * 60 * 24)));
        timeUnitForDisplay = '–¥–Ω–µ–π';
        console.log(`   üè≠ –ü—Ä–æ–¥ —Ä–µ–∂–∏–º: ${daysLeft} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è`);
      }
      
      const isReady = timeLeftMs <= 0;
      console.log(`   ‚úÖ –ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É: ${isReady}`);
      
      return {
        ...stake,
        days_left: daysLeft,
        is_ready: isReady,
        end_date: stake.end_date,
        start_date: stake.start_date,
        test_mode: TEST_MODE,
        time_unit: timeUnitForDisplay
      };
    });
    
    console.log(`üìã –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ö–õ–ò–ï–ù–¢–£: ${stakes.length} —Å—Ç–µ–π–∫–æ–≤`);
    res.json(stakes);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–µ–π–∫–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üí∏ –í–´–í–û–î –ó–ê–í–ï–†–®–ï–ù–ù–û–ì–û –°–¢–ï–ô–ö–ê - –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï
router.post('/withdraw', async (req, res) => {
  const { telegramId, stakeId } = req.body;
  
  console.log(`üí∏ –ó–ê–ü–†–û–° –í–´–í–û–î–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Å—Ç–µ–π–∫ ${stakeId}`);
  
  if (!telegramId || !stakeId) {
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    // üî• –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –ß–∏—Ç–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
    const stakeResult = await client.query(
      `SELECT *, start_time_ms, end_time_ms
       FROM ton_staking 
       WHERE id = $1 AND telegram_id = $2 AND status = $3`,
      [stakeId, telegramId, 'active']
    );
    
    if (stakeResult.rows.length === 0) {
      await client.query('ROLLBACK');
      console.log('‚ùå –°—Ç–µ–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω');
      return res.status(404).json({ 
        success: false,
        error: 'Stake not found or already withdrawn' 
      });
    }
    
    const stake = stakeResult.rows[0];
    const currentTimeMs = Date.now();
    const endTimeMs = parseInt(stake.end_time_ms);
    const timeLeftMs = endTimeMs - currentTimeMs;
    
    console.log(`üí∏ –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –°–¢–ï–ô–ö–ê ${stakeId}:`);
    console.log(`   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTimeMs} (${new Date(currentTimeMs).toISOString()})`);
    console.log(`   –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${endTimeMs} (${new Date(endTimeMs).toISOString()})`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${timeLeftMs} –º—Å`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫
    if (timeLeftMs > 0) {
      await client.query('ROLLBACK');
      
      let timeLeftText;
      if (TEST_MODE) {
        const minutesLeft = Math.ceil(timeLeftMs / (1000 * 60));
        timeLeftText = `${minutesLeft} –º–∏–Ω—É—Ç`;
      } else {
        const daysLeft = Math.ceil(timeLeftMs / (1000 * 60 * 60 * 24));
        timeLeftText = `${daysLeft} –¥–Ω–µ–π`;
      }
      
      console.log(`‚ùå –°—Ç–µ–π–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤: –æ—Å—Ç–∞–ª–æ—Å—å ${timeLeftText}`);
      return res.status(400).json({ 
        success: false,
        error: 'Stake period not completed',
        time_left: timeLeftText
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É
    const currentTon = parseFloat(player.ton || 0);
    const returnAmount = parseFloat(stake.return_amount);
    const newTonBalance = (currentTon + returnAmount).toFixed(8);
    
    console.log(`üí∞ –í–´–í–û–î –°–¢–ï–ô–ö–ê:`);
    console.log(`   –ë—ã–ª–æ TON: ${currentTon}`);
    console.log(`   –í–æ–∑–≤—Ä–∞—Ç: ${returnAmount}`);
    console.log(`   –°—Ç–∞–Ω–µ—Ç TON: ${newTonBalance}`);
    
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫–∞
    await client.query(
      'UPDATE ton_staking SET status = $1, withdrawn_at = NOW() WHERE id = $2',
      ['withdrawn', stakeId]
    );
    
    // üî• –°–ò–°–¢–ï–ú–ê 5 –û–°–¢–ê–ï–¢–°–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ô –ù–ê–í–°–ï–ì–î–ê
    console.log(`üîì –°–ò–°–¢–ï–ú–ê 5 –û–°–¢–ê–ï–¢–°–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ô –ù–ê–í–°–ï–ì–î–ê`);
    
    console.log(`‚úÖ –°–¢–ï–ô–ö ${stakeId} –£–°–ü–ï–®–ù–û –í–´–í–ï–î–ï–ù`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    
    res.json({
      success: true,
      message: 'Stake withdrawn successfully',
      withdrawn_amount: returnAmount,
      new_ton_balance: newTonBalance,
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üí∏ –û–¢–ú–ï–ù–ê –°–¢–ï–ô–ö–ê –°–û –®–¢–†–ê–§–û–ú 10%
router.post('/cancel', async (req, res) => {
  const { telegramId, stakeId } = req.body;
  
  console.log('üîç –ó–ê–ü–†–û–° –û–¢–ú–ï–ù–´ –°–¢–ï–ô–ö–ê:', { telegramId, stakeId });
  
  if (!telegramId || !stakeId) {
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∞
    const stakeResult = await client.query(
      'SELECT * FROM ton_staking WHERE id = $1 AND telegram_id = $2 AND status = $3',
      [stakeId, telegramId, 'active']
    );
    
    if (stakeResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Stake not found or already processed' 
      });
    }
    
    const stake = stakeResult.rows[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å —à—Ç—Ä–∞—Ñ–æ–º 10%
    const stakeAmount = parseFloat(stake.stake_amount);
    const penalty = stakeAmount * 0.1;
    const returnAmount = stakeAmount - penalty;
    
    console.log(`üí∞ –†–ê–°–ß–ï–¢ –û–¢–ú–ï–ù–´: –≤–ª–æ–∂–µ–Ω–æ ${stakeAmount}, —à—Ç—Ä–∞—Ñ ${penalty}, –≤–æ–∑–≤—Ä–∞—Ç ${returnAmount}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É (—Å —É—á–µ—Ç–æ–º —à—Ç—Ä–∞—Ñ–∞)
    const currentTon = parseFloat(player.ton || 0);
    const newTonBalance = (currentTon + returnAmount).toFixed(8);
    
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π–∫
    await client.query(
      `UPDATE ton_staking SET 
        status = $1, 
        withdrawn_at = NOW(),
        return_amount = $2,
        penalty_amount = $3
      WHERE id = $4`,
      ['withdrawn', returnAmount, penalty, stakeId]
    );
    
    // üî• –°–ò–°–¢–ï–ú–ê 5 –û–°–¢–ê–ï–¢–°–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ô –ù–ê–í–°–ï–ì–î–ê
    console.log(`üîì –°–ò–°–¢–ï–ú–ê 5 –û–°–¢–ê–ï–¢–°–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ô –ù–ê–í–°–ï–ì–î–ê`);
    
    console.log(`‚úÖ –°–¢–ï–ô–ö ${stakeId} –û–¢–ú–ï–ù–ï–ù –° –®–¢–†–ê–§–û–ú`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    
    res.json({
      success: true,
      message: 'Stake cancelled with penalty',
      returned_amount: returnAmount,
      penalty_amount: penalty,
      new_ton_balance: newTonBalance,
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üî• –ü–†–û–í–ï–†–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–û–ó–î–ê–ù–ò–Ø –°–¢–ï–ô–ö–ê –í –°–ò–°–¢–ï–ú–ï 5
router.post('/check-system-5', async (req, res) => {
  const { telegramId } = req.body;
  
  if (!telegramId) {
    return res.status(400).json({ 
      success: false,
      error: 'Missing telegram ID' 
    });
  }
  
  try {
    const player = await getPlayer(telegramId);
    
    if (!player) {
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ 5
    const isSystem5Unlocked = player.unlocked_systems?.includes(5);
    
    if (isSystem5Unlocked) {
      // –°–∏—Å—Ç–µ–º–∞ 5 —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–µ–π–∫–∏
      res.json({
        success: true,
        status: 'choose_amount',
        system_id: 5,
        min_amount: 15,
        max_amount: 1000,
        current_ton_balance: parseFloat(player.ton || 0),
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–π–∫–∞ (15-1000 TON)'
      });
    } else {
      // –°–∏—Å—Ç–µ–º–∞ 5 –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ 15 TON
      res.json({
        success: true,
        status: 'need_unlock',
        system_id: 5,
        price: 15,
        currency: 'ton',
        message: '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É 5 –∑–∞ 15 TON'
      });
    }
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã 5:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  }
});

module.exports = router;