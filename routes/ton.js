// ===== routes/ton.js ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–°–û–í–´–• –ü–û–Ø–°–û–í
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');

// FORCE DEPLOY: 2025-06-30-14:55
console.log('üî•üî•üî• TON.JS VERSION 14:55 DEPLOYED üî•üî•üî•');

const router = express.Router();

// üî• –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: true = 2/4 –º–∏–Ω—É—Ç—ã, false = 20/40 –¥–Ω–µ–π
const TEST_MODE = true;

// üïê –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø UTC –í–†–ï–ú–ï–ù–ò (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤)
const getUTCTimestamp = () => {
  return Date.now(); // –í—Å–µ–≥–¥–∞ UTC –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
};

// üïê –§–£–ù–ö–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í–†–ï–ú–ï–ù–ò
const logTime = (label, timestamp) => {
  console.log(`‚è∞ ${label}: ${timestamp} (${new Date(timestamp).toISOString()})`);
};

// üßÆ –†–ê–°–ß–ï–¢ –ü–õ–ê–ù–û–í –°–¢–ï–ô–ö–ò–ù–ì–ê
router.get('/calculate/:amount', (req, res) => {
  console.log('üßÆ –ó–ê–ü–†–û–° –†–ê–°–ß–ï–¢–ê –ü–õ–ê–ù–û–í:', req.params.amount);
  
  const amount = parseFloat(req.params.amount);
  
  if (isNaN(amount) || amount < 15 || amount > 1000) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞:', amount);
    return res.status(400).json({ 
      success: false,
      error: 'Amount must be between 15 and 1000 TON' 
    });
  }
  
  const fastPlan = {
    type: 'fast',
    days: TEST_MODE ? 2 : 20,
    percent: 3,
    stake_amount: amount,
    return_amount: (amount * 1.03).toFixed(8),
    profit: (amount * 0.03).toFixed(8),
    time_unit: TEST_MODE ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'
  };
  
  const standardPlan = {
    type: 'standard',
    days: TEST_MODE ? 4 : 40,
    percent: 7,
    stake_amount: amount,
    return_amount: (amount * 1.07).toFixed(8),
    profit: (amount * 0.07).toFixed(8),
    time_unit: TEST_MODE ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'
  };
  
  console.log('‚úÖ –ü–õ–ê–ù–´ –†–ê–°–°–ß–ò–¢–ê–ù–´:', { fastPlan, standardPlan });
  
  res.json({
    success: true,
    amount: amount,
    plans: [fastPlan, standardPlan],
    test_mode: TEST_MODE
  });
});

// üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–°–û–í–´–• –ü–û–Ø–°–û–í
router.post('/stake', async (req, res) => {
  const { telegramId, systemId, stakeAmount, planType } = req.body;
  
  console.log('üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê - –ó–ê–ü–†–û–°:', { telegramId, systemId, stakeAmount, planType });
  
  if (!telegramId || !systemId || !stakeAmount || !planType) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  if (!['fast', 'standard'].includes(planType)) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞–Ω–∞:', planType);
    return res.status(400).json({ 
      success: false,
      error: 'Invalid plan type' 
    });
  }
  
  if (parseInt(systemId) !== 5) {
    console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞:', systemId);
    return res.status(400).json({ 
      success: false,
      error: 'Only system 5 is supported' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üî• –°–û–ó–î–ê–ù–ò–ï –°–¢–ï–ô–ö–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Å–∏—Å—Ç–µ–º–∞ ${systemId}, —Å—É–º–º–∞ ${stakeAmount}, –ø–ª–∞–Ω ${planType}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      console.log('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å TON
    const tonBalance = parseFloat(player.ton || 0);
    const stakeAmountNum = parseFloat(stakeAmount);
    
    if (tonBalance < stakeAmountNum) {
      await client.query('ROLLBACK');
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON:', { tonBalance, stakeAmountNum });
      return res.status(400).json({ 
        success: false,
        error: 'Insufficient TON balance' 
      });
    }
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∞
    const planPercent = planType === 'fast' ? 3 : 7;
    
    // üïê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC
    let actualDurationForDB, timeUnit, millisecondsToAdd;
    
    if (TEST_MODE) {
      actualDurationForDB = planType === 'fast' ? 2 : 4; // –º–∏–Ω—É—Ç—ã
      timeUnit = '–º–∏–Ω—É—Ç';
      millisecondsToAdd = actualDurationForDB * 60 * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      console.log(`üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: ${actualDurationForDB} –º–∏–Ω—É—Ç = ${millisecondsToAdd} –º—Å`);
    } else {
      actualDurationForDB = planType === 'fast' ? 20 : 40; // –¥–Ω–∏
      timeUnit = '–¥–Ω–µ–π';
      millisecondsToAdd = actualDurationForDB * 24 * 60 * 60 * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      console.log(`üè≠ –ü–†–û–î–ê–ö–®–ù –†–ï–ñ–ò–ú: ${actualDurationForDB} –¥–Ω–µ–π = ${millisecondsToAdd} –º—Å`);
    }
    
    const returnAmount = (stakeAmountNum * (1 + planPercent / 100)).toFixed(8);
    
    // üïê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: UTC –≤—Ä–µ–º—è –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
    const startTimeMs = getUTCTimestamp();
    const endTimeMs = startTimeMs + millisecondsToAdd;
    
    console.log(`üïê UTC –†–ê–°–ß–ï–¢ –í–†–ï–ú–ï–ù–ò:`);
    logTime('–¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è', startTimeMs);
    logTime('–î–æ–±–∞–≤–ª—è–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥', millisecondsToAdd);
    logTime('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è UTC', endTimeMs);
    console.log(`‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${endTimeMs - startTimeMs} –º—Å`);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º TON —Å –±–∞–ª–∞–Ω—Å–∞
    const newTonBalance = (tonBalance - stakeAmountNum).toFixed(8);
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É 5 –Ω–∞–≤—Å–µ–≥–¥–∞
    if (!player.unlocked_systems.includes(systemId)) {
      const updatedUnlockedSystems = [...player.unlocked_systems, systemId];
      console.log(`üîì –†–ê–ó–ë–õ–û–ö–ò–†–£–ï–ú –°–ò–°–¢–ï–ú–£ 5 –ù–ê–í–°–ï–ì–î–ê`);
      
      await client.query(
        'UPDATE players SET unlocked_systems = $1 WHERE telegram_id = $2',
        [JSON.stringify(updatedUnlockedSystems), telegramId]
      );
    } else {
      console.log(`üîì –°–ò–°–¢–ï–ú–ê 5 –£–ñ–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–ê –ù–ê–í–°–ï–ì–î–ê`);
    }
    
    // üïê –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤—Å—Ç–∞–≤–∫–∞ - –ü–†–û–°–¢–ê–Ø –°–•–ï–ú–ê –ë–ï–ó –õ–ò–®–ù–ò–• –ü–ê–†–ê–ú–ï–¢–†–û–í
    console.log('üî• –ü–û–ü–´–¢–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–¢–ï–ô–ö–ê –í –ë–î...');
    console.log('üî• –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', {
      telegramId, systemId, stakeAmountNum, planType, planPercent, 
      actualDurationForDB, returnAmount, startTimeMs, endTimeMs
    });
    
    let stakeResult;
    try {
      // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (9 —à—Ç—É–∫)
      stakeResult = await client.query(
        `INSERT INTO ton_staking (
          telegram_id, system_id, stake_amount, plan_type, plan_percent, plan_days, 
          return_amount, start_date, end_date
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, 
          TO_TIMESTAMP($8 / 1000.0) AT TIME ZONE 'UTC',
          TO_TIMESTAMP($9 / 1000.0) AT TIME ZONE 'UTC'
        ) RETURNING *`,
        [telegramId, systemId, stakeAmountNum, planType, planPercent, actualDurationForDB, 
         returnAmount, Math.floor(startTimeMs/1000), Math.floor(endTimeMs/1000)]
      );
      console.log('‚úÖ –°–¢–ï–ô–ö –°–û–ó–î–ê–ù –° UTC –í–†–ï–ú–ï–ù–ï–ú (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞)');
    } catch (err) {
      await client.query('ROLLBACK');
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–π–∫–∞:', err);
      return res.status(500).json({ 
        success: false,
        error: 'Database error: ' + err.message 
      });
    }
    
    console.log(`‚úÖ –°–¢–ï–ô–ö –°–û–ó–î–ê–ù –í –ë–î:`);
    console.log(`   ID: ${stakeResult.rows[0].id}`);
    logTime('   start_date', new Date(stakeResult.rows[0].start_date).getTime());
    logTime('   end_date', new Date(stakeResult.rows[0].end_date).getTime());
    const dbStartTime = new Date(stakeResult.rows[0].start_date).getTime();
    const dbEndTime = new Date(stakeResult.rows[0].end_date).getTime();
    console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –ë–î: ${dbEndTime - dbStartTime} –º—Å`);
    console.log(`   –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å: ${endTimeMs - startTimeMs} –º—Å`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    const createdStake = stakeResult.rows[0];
    
    res.json({
      success: true,
      message: 'Stake created successfully',
      stake: {
        id: createdStake.id,
        system_id: systemId,
        stake_amount: stakeAmount,
        plan_type: planType,
        plan_days: actualDurationForDB,
        plan_percent: planPercent,
        return_amount: returnAmount,
        end_date: new Date(endTimeMs).toISOString(),
        days_left: actualDurationForDB,
        time_unit: timeUnit
      },
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –°–¢–ï–ô–ö–û–í - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–°–û–í–´–• –ü–û–Ø–°–û–í
router.get('/stakes/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    console.log(`üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ï–ô–ö–û–í –î–õ–Ø –ò–ì–†–û–ö–ê: ${telegramId}`);
    
    // üïê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —á—Ç–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π
    let result;
    try {
      // –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
      result = await pool.query(
        `SELECT 
          id, system_id, stake_amount, plan_type, plan_percent, plan_days,
          return_amount, start_date, end_date, status, created_at
        FROM ton_staking 
        WHERE telegram_id = $1 AND status = 'active'
        ORDER BY created_at DESC`,
        [telegramId]
      );
      console.log('‚úÖ –°—Ç–µ–π–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –∏–∑ –ë–î');
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–µ–π–∫–æ–≤:', err.message);
      return res.status(500).json({ error: 'Database error' });
    }
    
    console.log(`üìã –ù–ê–ô–î–ï–ù–û –ê–ö–¢–ò–í–ù–´–• –°–¢–ï–ô–ö–û–í: ${result.rows.length}`);
    
    // üïê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è
    const currentTimeMs = getUTCTimestamp();
    logTime('–¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞', currentTimeMs);
    
    const stakes = result.rows.map(stake => {
      // üïê –£–ü–†–û–©–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ start_date/end_date
      const endTimeMs = new Date(stake.end_date).getTime();
      const timeLeftMs = endTimeMs - currentTimeMs;
      
      console.log(`üìä –°–¢–ï–ô–ö ${stake.id}:`);
      logTime('   –ö–æ–Ω–µ—Ü –∏–∑ –ë–î', endTimeMs);
      logTime('   –¢–µ–∫—É—â–µ–µ UTC', currentTimeMs);
      console.log(`   –û—Å—Ç–∞–ª–æ—Å—å –º—Å: ${timeLeftMs}`);
      
      let daysLeft, timeUnitForDisplay;
      
      if (TEST_MODE) {
        daysLeft = Math.max(0, Math.ceil(timeLeftMs / (1000 * 60)));
        timeUnitForDisplay = '–º–∏–Ω—É—Ç';
        console.log(`   üß™ –¢–µ—Å—Ç —Ä–µ–∂–∏–º: ${daysLeft} –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è`);
      } else {
        daysLeft = Math.max(0, Math.ceil(timeLeftMs / (1000 * 60 * 60 * 24)));
        timeUnitForDisplay = '–¥–Ω–µ–π';
        console.log(`   üè≠ –ü—Ä–æ–¥ —Ä–µ–∂–∏–º: ${daysLeft} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è`);
      }
      
      const isReady = timeLeftMs <= 0;
      console.log(`   ‚úÖ –ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É: ${isReady}`);
      
      return {
        ...stake,
        days_left: daysLeft,
        is_ready: isReady,
        end_date: stake.end_date,
        start_date: stake.start_date,
        test_mode: TEST_MODE,
        time_unit: timeUnitForDisplay
      };
    });
    
    console.log(`üìã –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ö–õ–ò–ï–ù–¢–£: ${stakes.length} —Å—Ç–µ–π–∫–æ–≤`);
    res.json(stakes);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–µ–π–∫–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üí∏ –í–´–í–û–î –ó–ê–í–ï–†–®–ï–ù–ù–û–ì–û –°–¢–ï–ô–ö–ê - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–°–û–í–´–• –ü–û–Ø–°–û–í
router.post('/withdraw', async (req, res) => {
  const { telegramId, stakeId } = req.body;
  
  console.log(`üí∏ –ó–ê–ü–†–û–° –í–´–í–û–î–ê: –∏–≥—Ä–æ–∫ ${telegramId}, —Å—Ç–µ–π–∫ ${stakeId}`);
  
  if (!telegramId || !stakeId) {
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    // üïê –£–ü–†–û–©–ï–ù–ù–û–ï —á—Ç–µ–Ω–∏–µ —Å—Ç–µ–π–∫–∞
    const stakeResult = await client.query(
      `SELECT * FROM ton_staking 
       WHERE id = $1 AND telegram_id = $2 AND status = $3`,
      [stakeId, telegramId, 'active']
    );
    
    if (stakeResult.rows.length === 0) {
      await client.query('ROLLBACK');
      console.log('‚ùå –°—Ç–µ–π–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω');
      return res.status(404).json({ 
        success: false,
        error: 'Stake not found or already withdrawn' 
      });
    }
    
    const stake = stakeResult.rows[0];
    
    // üïê –£–ü–†–û–©–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ start_date/end_date
    const currentTimeMs = getUTCTimestamp();
    const endTimeMs = new Date(stake.end_date).getTime();
    const timeLeftMs = endTimeMs - currentTimeMs;
    
    console.log(`üí∏ UTC –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ò –°–¢–ï–ô–ö–ê ${stakeId}:`);
    logTime('   –¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è', currentTimeMs);
    logTime('   –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑ –ë–î', endTimeMs);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞ –º—Å: ${timeLeftMs}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫
    if (timeLeftMs > 0) {
      await client.query('ROLLBACK');
      
      let timeLeftText;
      if (TEST_MODE) {
        const minutesLeft = Math.ceil(timeLeftMs / (1000 * 60));
        timeLeftText = `${minutesLeft} –º–∏–Ω—É—Ç`;
      } else {
        const daysLeft = Math.ceil(timeLeftMs / (1000 * 60 * 60 * 24));
        timeLeftText = `${daysLeft} –¥–Ω–µ–π`;
      }
      
      console.log(`‚ùå –°—Ç–µ–π–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤: –æ—Å—Ç–∞–ª–æ—Å—å ${timeLeftText}`);
      return res.status(400).json({ 
        success: false,
        error: 'Stake period not completed',
        time_left: timeLeftText
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É
    const currentTon = parseFloat(player.ton || 0);
    const returnAmount = parseFloat(stake.return_amount);
    const newTonBalance = (currentTon + returnAmount).toFixed(8);
    
    console.log(`üí∞ –í–´–í–û–î –°–¢–ï–ô–ö–ê:`);
    console.log(`   –ë—ã–ª–æ TON: ${currentTon}`);
    console.log(`   –í–æ–∑–≤—Ä–∞—Ç: ${returnAmount}`);
    console.log(`   –°—Ç–∞–Ω–µ—Ç TON: ${newTonBalance}`);
    
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–π–∫–∞
    await client.query(
      'UPDATE ton_staking SET status = $1, withdrawn_at = NOW() WHERE id = $2',
      ['withdrawn', stakeId]
    );
    
    console.log(`‚úÖ –°–¢–ï–ô–ö ${stakeId} –£–°–ü–ï–®–ù–û –í–´–í–ï–î–ï–ù`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    
    res.json({
      success: true,
      message: 'Stake withdrawn successfully',
      withdrawn_amount: returnAmount,
      new_ton_balance: newTonBalance,
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üí∏ –û–¢–ú–ï–ù–ê –°–¢–ï–ô–ö–ê –°–û –®–¢–†–ê–§–û–ú 10%
router.post('/cancel', async (req, res) => {
  const { telegramId, stakeId } = req.body;
  
  console.log('üîç –ó–ê–ü–†–û–° –û–¢–ú–ï–ù–´ –°–¢–ï–ô–ö–ê:', { telegramId, stakeId });
  
  if (!telegramId || !stakeId) {
    return res.status(400).json({ 
      success: false,
      error: 'Missing required fields' 
    });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∞
    const stakeResult = await client.query(
      'SELECT * FROM ton_staking WHERE id = $1 AND telegram_id = $2 AND status = $3',
      [stakeId, telegramId, 'active']
    );
    
    if (stakeResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Stake not found or already processed' 
      });
    }
    
    const stake = stakeResult.rows[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const player = await getPlayer(telegramId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ 
        success: false,
        error: 'Player not found' 
      });
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å —à—Ç—Ä–∞—Ñ–æ–º 10%
    const stakeAmount = parseFloat(stake.stake_amount);
    const penalty = stakeAmount * 0.1;
    const returnAmount = stakeAmount - penalty;
    
    console.log(`üí∞ –†–ê–°–ß–ï–¢ –û–¢–ú–ï–ù–´: –≤–ª–æ–∂–µ–Ω–æ ${stakeAmount}, —à—Ç—Ä–∞—Ñ ${penalty}, –≤–æ–∑–≤—Ä–∞—Ç ${returnAmount}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É (—Å —É—á–µ—Ç–æ–º —à—Ç—Ä–∞—Ñ–∞)
    const currentTon = parseFloat(player.ton || 0);
    const newTonBalance = (currentTon + returnAmount).toFixed(8);
    
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newTonBalance, telegramId]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π–∫
    await client.query(
      `UPDATE ton_staking SET 
        status = $1, 
        withdrawn_at = NOW(),
        return_amount = $2,
        penalty_amount = $3
      WHERE id = $4`,
      ['withdrawn', returnAmount, penalty, stakeId]
    );
    
    console.log(`‚úÖ –°–¢–ï–ô–ö ${stakeId} –û–¢–ú–ï–ù–ï–ù –° –®–¢–†–ê–§–û–ú`);
    
    await client.query('COMMIT');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedPlayer = await getPlayer(telegramId);
    
    res.json({
      success: true,
      message: 'Stake cancelled with penalty',
      returned_amount: returnAmount,
      penalty_amount: penalty,
      new_ton_balance: newTonBalance,
      player: updatedPlayer
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–µ–π–∫–∞:', err);
    res.status(500).json({ 
      success: false,
      error: 'Internal server error' 
    });
  } finally {
    client.release();
  }
});

// üìö –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –°–¢–ï–ô–ö–û–í –ò–ì–†–û–ö–ê
router.get('/stakes/history/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    console.log(`üìö –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –°–¢–ï–ô–ö–û–í –î–õ–Ø –ò–ì–†–û–ö–ê: ${telegramId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç–µ–π–∫–∏
    let result;
    try {
      result = await pool.query(
        `SELECT 
          id, system_id, stake_amount, plan_type, plan_percent, plan_days,
          return_amount, start_date, end_date, status, created_at, withdrawn_at,
          penalty_amount, start_time_ms, end_time_ms
        FROM ton_staking 
        WHERE telegram_id = $1 AND status = 'withdrawn'
        ORDER BY withdrawn_at DESC`,
        [telegramId]
      );
    } catch (err) {
      // –§–∞–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—É—é —Å—Ö–µ–º—É
      result = await pool.query(
        `SELECT 
          id, system_id, stake_amount, plan_type, plan_percent, plan_days,
          return_amount, start_date, end_date, status, created_at, withdrawn_at,
          penalty_amount
        FROM ton_staking 
        WHERE telegram_id = $1 AND status = 'withdrawn'
        ORDER BY withdrawn_at DESC`,
        [telegramId]
      );
    }
    
    console.log(`üìö –ù–ê–ô–î–ï–ù–û –ó–ê–í–ï–†–®–ï–ù–ù–´–• –°–¢–ï–ô–ö–û–í: ${result.rows.length}`);
    
    res.json(result.rows);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–µ–π–∫–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üî• –ù–û–í–´–ô ENDPOINT: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
router.get('/time/debug', (req, res) => {
  const now = getUTCTimestamp();
  
  res.json({
    server_utc_timestamp: now,
    server_utc_iso: new Date(now).toISOString(),
    test_mode: TEST_MODE,
    test_duration: {
      fast: TEST_MODE ? 2 : 20,
      standard: TEST_MODE ? 4 : 40,
      unit: TEST_MODE ? '–º–∏–Ω—É—Ç' : '–¥–Ω–µ–π'
    },
    timezone_info: {
      nodejs_timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
      process_env_tz: process.env.TZ || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
    }
  });
});

// –í –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ module.exports
router.get('/debug/all-stakes/:telegramId', async (req, res) => {
  try {
    const result = await pool.query(
      'SELECT id, start_date, end_date, plan_days, plan_type, created_at FROM ton_staking WHERE telegram_id = $1 ORDER BY created_at DESC',
      [req.params.telegramId]
    );
    
    const now = Date.now();
    
    const stakes = result.rows.map(stake => {
      const startTime = new Date(stake.start_date).getTime();
      const endTime = new Date(stake.end_date).getTime();
      const duration = endTime - startTime;
      const timeLeft = endTime - now;
      
      return {
        id: stake.id,
        created_at: stake.created_at,
        plan_days: stake.plan_days,
        plan_type: stake.plan_type,
        start_iso: stake.start_date,
        end_iso: stake.end_date,
        duration_ms: duration,
        duration_minutes: Math.round(duration / (1000 * 60)),
        time_left_ms: timeLeft,
        time_left_minutes: Math.round(timeLeft / (1000 * 60)),
        is_ready: timeLeft <= 0
      };
    });
    
    res.json({
      current_time: new Date(now).toISOString(),
      stakes: stakes
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;