// routes/admin/finance.js - –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
const express = require('express');
const pool = require('../../db');
const { isAdmin } = require('./auth');

const router = express.Router();

console.log('üè¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
router.get('/ton-deposits', async (req, res) => {
    const { admin_id, status = 'unidentified' } = req.query;

    try {
      console.log(`üìã –ó–∞–ø—Ä–æ—Å TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞ ${admin_id}, —Å—Ç–∞—Ç—É—Å: ${status}`);

      if (!isAdmin(admin_id)) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }

      let query = `
        SELECT
          id, player_id, amount, transaction_hash, status, created_at
        FROM ton_deposits
        WHERE 1=1
      `;
      const params = [];

      if (status && status !== 'all') {
        query += ' AND status = $1';
        params.push(status);
      }

      query += ' ORDER BY created_at DESC LIMIT 50';

      const result = await pool.query(query, params);

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);

      res.json({
        success: true,
        deposits: result.rows,
        count: result.rows.length
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
        details: error.message
      });
    }
  });

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TON
router.get('/ton-stats', async (req, res) => {
    const { admin_id } = req.query;

    try {
      console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TON –æ—Ç –∞–¥–º–∏–Ω–∞ ${admin_id}`);

      if (!isAdmin(admin_id)) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }

      const statsQuery = `
        SELECT
          COUNT(*) as total_deposits,
          COUNT(CASE WHEN status = 'unidentified' THEN 1 END) as unidentified_deposits,
          COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_deposits,
          COALESCE(SUM(amount), 0) as total_amount,
          COALESCE(SUM(CASE WHEN status = 'unidentified' THEN amount ELSE 0 END), 0) as pending_amount
        FROM ton_deposits
      `;

      const result = await pool.query(statsQuery);
      const stats = result.rows[0];

      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TON —Å–æ–±—Ä–∞–Ω–∞:', stats);

      res.json({
        success: true,
        total_deposits: parseInt(stats.total_deposits),
        unidentified_deposits: parseInt(stats.unidentified_deposits),
        completed_deposits: parseInt(stats.completed_deposits),
        total_amount: parseFloat(stats.total_amount),
        pending_amount: parseFloat(stats.pending_amount)
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TON:', error);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        details: error.message
      });
    }
  });

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
router.post('/process-ton-deposit', async (req, res) => {
    const { admin_id, deposit_id, player_id } = req.body;

    try {
      console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–∞: admin=${admin_id}, deposit=${deposit_id}, player=${player_id}`);

      if (!isAdmin(admin_id)) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }

      if (!deposit_id || !player_id) {
        return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã deposit_id –∏ player_id' });
      }

      const client = await pool.connect();

      try {
        await client.query('BEGIN');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç–∞
        const depositResult = await client.query(
          'SELECT * FROM ton_deposits WHERE id = $1 AND status = $2',
          [deposit_id, 'unidentified']
        );

        if (depositResult.rows.length === 0) {
          await client.query('ROLLBACK');
          return res.status(404).json({ error: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });
        }

        const deposit = depositResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        const playerResult = await client.query(
          'SELECT telegram_id, first_name, username, ton FROM players WHERE telegram_id = $1',
          [player_id]
        );

        if (playerResult.rows.length === 0) {
          await client.query('ROLLBACK');
          return res.status(404).json({ error: `–ò–≥—Ä–æ–∫ ${player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
        }

        const player = playerResult.rows[0];
        const currentBalance = parseFloat(player.ton || '0');
        const depositAmount = parseFloat(deposit.amount);
        const newBalance = currentBalance + depositAmount;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
        await client.query(
          'UPDATE ton_deposits SET player_id = $1, status = $2 WHERE id = $3',
          [player_id, 'completed', deposit_id]
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        await client.query(
          'UPDATE players SET ton = $1 WHERE telegram_id = $2',
          [newBalance, player_id]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
        await client.query(
          `INSERT INTO balance_history (
            telegram_id, currency, old_balance, new_balance,
            change_amount, reason, details, timestamp
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())`,
          [
            player_id,
            'ton',
            currentBalance,
            newBalance,
            depositAmount,
            'admin_manual_deposit',
            JSON.stringify({
              admin_id: admin_id,
              deposit_id: deposit_id,
              transaction_hash: deposit.transaction_hash
            })
          ]
        );

        await client.query('COMMIT');

        console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${player_id} +${depositAmount} TON (${currentBalance} ‚Üí ${newBalance})`);

        res.json({
          success: true,
          message: '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
          player_id: player_id,
          amount: depositAmount,
          new_balance: newBalance,
          old_balance: currentBalance
        });

      } catch (error) {
        await client.query('ROLLBACK');
        throw error;
      } finally {
        client.release();
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞',
        details: error.message
      });
    }
  });

console.log('‚úÖ –ú–æ–¥—É–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω');

module.exports = router;