// routes/admin/finance.js - –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TON –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
const express = require('express');
const pool = require('../../db');
const { isAdmin } = require('./auth');

const router = express.Router();

if (process.env.NODE_ENV === 'development') console.log('üè¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤
router.get('/ton-deposits', async (req, res) => {
    const { admin_id, status = 'unidentified' } = req.query;

    try {
      if (process.env.NODE_ENV === 'development') console.log(`üìã –ó–∞–ø—Ä–æ—Å TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞ ${admin_id}, —Å—Ç–∞—Ç—É—Å: ${status}`);

      if (!isAdmin(admin_id)) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }

      let query = `
        SELECT
          id, telegram_id, amount, transaction_hash, status, created_at
        FROM ton_deposits
        WHERE 1=1
      `;
      const params = [];

      if (status && status !== 'all') {
        query += ' AND status = $1';
        params.push(status);
      }

      query += ' ORDER BY created_at DESC LIMIT 50';

      const result = await pool.query(query, params);

      if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);

      res.json({
        success: true,
        deposits: result.rows,
        count: result.rows.length
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
        details: error.message
      });
    }
  });

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TON
router.get('/ton-stats', async (req, res) => {
    const { admin_id } = req.query;

    try {
      if (process.env.NODE_ENV === 'development') console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TON –æ—Ç –∞–¥–º–∏–Ω–∞ ${admin_id}`);

      if (!isAdmin(admin_id)) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }

      const statsQuery = `
        SELECT
          COUNT(*) as total_deposits,
          COUNT(CASE WHEN status = 'unidentified' THEN 1 END) as unidentified_deposits,
          COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_deposits,
          COALESCE(SUM(amount), 0) as total_amount,
          COALESCE(SUM(CASE WHEN status = 'unidentified' THEN amount ELSE 0 END), 0) as pending_amount
        FROM ton_deposits
      `;

      const result = await pool.query(statsQuery);
      const stats = result.rows[0];

      if (process.env.NODE_ENV === 'development') console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TON —Å–æ–±—Ä–∞–Ω–∞:', stats);

      res.json({
        success: true,
        total_deposits: parseInt(stats.total_deposits),
        unidentified_deposits: parseInt(stats.unidentified_deposits),
        completed_deposits: parseInt(stats.completed_deposits),
        total_amount: parseFloat(stats.total_amount),
        pending_amount: parseFloat(stats.pending_amount)
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ TON:', error);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        details: error.message
      });
    }
  });

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
router.post('/process-ton-deposit', async (req, res) => {
    const { admin_id, deposit_id, player_id } = req.body;

    try {
      if (process.env.NODE_ENV === 'development') console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ TON –¥–µ–ø–æ–∑–∏—Ç–∞: admin=${admin_id}, deposit=${deposit_id}, player=${player_id}`);

      if (!isAdmin(admin_id)) {
        return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
      }

      if (!deposit_id || !player_id) {
        return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã deposit_id –∏ player_id' });
      }

      const client = await pool.connect();

      try {
        await client.query('BEGIN');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç–∞
        const depositResult = await client.query(
          'SELECT * FROM ton_deposits WHERE id = $1 AND status = $2',
          [deposit_id, 'unidentified']
        );

        if (depositResult.rows.length === 0) {
          await client.query('ROLLBACK');
          return res.status(404).json({ error: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });
        }

        const deposit = depositResult.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        const playerResult = await client.query(
          'SELECT telegram_id, first_name, username, ton FROM players WHERE telegram_id = $1',
          [player_id]
        );

        if (playerResult.rows.length === 0) {
          await client.query('ROLLBACK');
          return res.status(404).json({ error: `–ò–≥—Ä–æ–∫ ${player_id} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
        }

        const player = playerResult.rows[0];
        const currentBalance = parseFloat(player.ton || '0');
        const depositAmount = parseFloat(deposit.amount);
        const newBalance = currentBalance + depositAmount;

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–ø–æ–∑–∏—Ç
        await client.query(
          'UPDATE ton_deposits SET telegram_id = $1, status = $2 WHERE id = $3',
          [player_id, 'completed', deposit_id]
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        await client.query(
          'UPDATE players SET ton = $1 WHERE telegram_id = $2',
          [newBalance, player_id]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
        await client.query(
          `INSERT INTO balance_history (
            telegram_id, currency, old_balance, new_balance,
            change_amount, reason, details, timestamp
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())`,
          [
            player_id,
            'ton',
            currentBalance,
            newBalance,
            depositAmount,
            'admin_manual_deposit',
            JSON.stringify({
              admin_id: admin_id,
              deposit_id: deposit_id,
              transaction_hash: deposit.transaction_hash
            })
          ]
        );

        await client.query('COMMIT');

        if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${player_id} +${depositAmount} TON (${currentBalance} ‚Üí ${newBalance})`);

        res.json({
          success: true,
          message: '–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
          player_id: player_id,
          amount: depositAmount,
          new_balance: newBalance,
          old_balance: currentBalance
        });

      } catch (error) {
        await client.query('ROLLBACK');
        throw error;
      } finally {
        client.release();
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ TON –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞',
        details: error.message
      });
    }
  });

// üÜï –°–ò–°–¢–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –í–´–í–û–î–û–í
// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤
router.get('/withdrawals/pending', async (req, res) => {
  const { admin_id } = req.query;

  try {
    if (process.env.NODE_ENV === 'development') console.log(`üí∏ –ó–∞–ø—Ä–æ—Å –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞ ${admin_id}`);

    if (!isAdmin(admin_id)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const query = `
      SELECT
        w.id, w.player_id as telegram_id, w.amount, w.recipient_address,
        w.status, w.created_at, w.transaction_hash,
        p.username, p.first_name, p.ton as current_balance,
        -- –†–∏—Å–∫-–∞–Ω–∞–ª–∏–∑
        (SELECT COUNT(*) FROM withdrawals w2 WHERE w2.player_id = w.player_id AND w2.created_at > NOW() - INTERVAL '24 hours') as withdrawals_24h,
        (SELECT COUNT(*) FROM ton_deposits td WHERE td.telegram_id = w.player_id) as total_deposits
      FROM withdrawals w
      JOIN players p ON w.player_id = p.telegram_id
      WHERE w.status IN ('pending', 'processing')
      ORDER BY
        CASE
          WHEN w.amount > 100 THEN 1  -- –ö—Ä—É–ø–Ω—ã–µ —Å—É–º–º—ã –ø–µ—Ä–≤—ã–º–∏
          WHEN w.amount > 50 THEN 2
          ELSE 3
        END,
        w.created_at ASC
      LIMIT 50
    `;

    const result = await pool.query(query);

    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤`);

    res.json({
      success: true,
      withdrawals: result.rows,
      count: result.rows.length
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤',
      details: error.message
    });
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥
router.post('/withdrawals/approve', async (req, res) => {
  const { admin_id, withdrawal_id, action, reason } = req.body;

  try {
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ ${action} –≤—ã–≤–æ–¥–∞ ${withdrawal_id} –∞–¥–º–∏–Ω–æ–º ${admin_id}`);

    if (!isAdmin(admin_id)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    if (!withdrawal_id || !action || !['approve', 'reject'].includes(action)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
    }

    const client = await pool.connect();

    try {
      await client.query('BEGIN');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–≤–æ–¥–µ
      const withdrawalResult = await client.query(
        'SELECT * FROM withdrawals WHERE id = $1 AND status = $2',
        [withdrawal_id, 'pending']
      );

      if (withdrawalResult.rows.length === 0) {
        await client.query('ROLLBACK');
        return res.status(404).json({ error: '–í—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' });
      }

      const withdrawal = withdrawalResult.rows[0];

      if (action === 'approve') {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–≤–æ–¥
        await client.query(
          'UPDATE withdrawals SET status = $1, admin_approved_by = $2, admin_approved_at = NOW() WHERE id = $3',
          ['approved', admin_id, withdrawal_id]
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
        await client.query(
          'INSERT INTO player_actions (telegram_id, admin_id, action_type, details, timestamp) VALUES ($1, $2, $3, $4, NOW())',
          [
            withdrawal.telegram_id,
            admin_id,
            'withdrawal_approved',
            JSON.stringify({
              withdrawal_id: withdrawal_id,
              amount: withdrawal.amount,
              address: withdrawal.recipient_address,
              reason: reason || '–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
            })
          ]
        );

      } else if (action === 'reject') {
        // –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—ã–≤–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        await client.query(
          'UPDATE withdrawals SET status = $1, admin_rejected_by = $2, admin_rejected_at = NOW(), rejection_reason = $3 WHERE id = $4',
          ['rejected', admin_id, reason || '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', withdrawal_id]
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º TON –Ω–∞ –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        await client.query(
          'UPDATE players SET ton = ton + $1 WHERE telegram_id = $2',
          [parseFloat(withdrawal.amount), withdrawal.telegram_id]
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
        await client.query(
          'INSERT INTO balance_history (telegram_id, currency, old_balance, new_balance, change_amount, reason, details, timestamp) VALUES (SELECT telegram_id, $1, ton - $2, ton, $2, $3, $4, NOW() FROM players WHERE telegram_id = $5)',
          [
            'ton',
            parseFloat(withdrawal.amount),
            'withdrawal_rejected_refund',
            JSON.stringify({
              withdrawal_id: withdrawal_id,
              admin_id: admin_id,
              reason: reason
            }),
            withdrawal.telegram_id
          ]
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
        await client.query(
          'INSERT INTO player_actions (telegram_id, admin_id, action_type, details, timestamp) VALUES ($1, $2, $3, $4, NOW())',
          [
            withdrawal.telegram_id,
            admin_id,
            'withdrawal_rejected',
            JSON.stringify({
              withdrawal_id: withdrawal_id,
              amount: withdrawal.amount,
              reason: reason || '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
            })
          ]
        );
      }

      await client.query('COMMIT');

      if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –í—ã–≤–æ–¥ ${withdrawal_id} ${action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}`);

      res.json({
        success: true,
        message: `–í—ã–≤–æ–¥ ${action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}`,
        withdrawal_id: withdrawal_id,
        action: action
      });

    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    } finally {
      client.release();
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞',
      details: error.message
    });
  }
});

// üÜï –ü–û–ò–°–ö –ü–û–¢–ï–†–Ø–ù–ù–´–• –î–ï–ü–û–ó–ò–¢–û–í
// –ù–∞–π—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç—ã –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (orphaned)
router.get('/deposits/orphaned', async (req, res) => {
  const { admin_id, min_amount = 0, time_hours = 24 } = req.query;

  try {
    if (process.env.NODE_ENV === 'development') console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–º ${admin_id}`);

    if (!isAdmin(admin_id)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const query = `
      SELECT
        td.id, td.amount, td.transaction_hash, td.created_at,
        td.from_address, td.status,
        -- –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        (
          SELECT ARRAY_AGG(p.telegram_id)
          FROM players p
          WHERE p.telegram_wallet = td.from_address
          OR p.created_at BETWEEN td.created_at - INTERVAL '1 hour' AND td.created_at + INTERVAL '1 hour'
        ) as potential_players,
        -- –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        (
          SELECT COUNT(*)
          FROM ton_deposits td2
          WHERE ABS(td2.amount - td.amount) < 0.001
          AND td2.created_at BETWEEN td.created_at - INTERVAL '1 hour' AND td.created_at + INTERVAL '1 hour'
          AND td2.id != td.id
        ) as similar_deposits
      FROM ton_deposits td
      WHERE td.status = 'unidentified'
      AND td.amount >= $1
      AND td.created_at > NOW() - INTERVAL '${parseInt(time_hours)} hours'
      ORDER BY td.amount DESC, td.created_at DESC
      LIMIT 100
    `;

    const result = await pool.query(query, [parseFloat(min_amount)]);

    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤`);

    res.json({
      success: true,
      orphaned_deposits: result.rows,
      count: result.rows.length,
      search_params: {
        min_amount: parseFloat(min_amount),
        time_hours: parseInt(time_hours)
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤',
      details: error.message
    });
  }
});

// –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ (–ø–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞)
router.post('/deposits/investigate', async (req, res) => {
  const { admin_id, deposit_id, search_params = {} } = req.body;

  try {
    if (process.env.NODE_ENV === 'development') console.log(`üïµÔ∏è –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ ${deposit_id} –∞–¥–º–∏–Ω–æ–º ${admin_id}`);

    if (!isAdmin(admin_id)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç–∞
    const depositResult = await pool.query(
      'SELECT * FROM ton_deposits WHERE id = $1',
      [deposit_id]
    );

    if (depositResult.rows.length === 0) {
      return res.status(404).json({ error: '–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const deposit = depositResult.rows[0];

    // –ú–Ω–æ–≥–æ–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    const investigations = await Promise.all([
      // 1. –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞
      pool.query(
        'SELECT telegram_id, username, first_name FROM players WHERE telegram_wallet = $1',
        [deposit.from_address]
      ),

      // 2. –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (¬±2 —á–∞—Å–∞ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞)
      pool.query(`
        SELECT telegram_id, username, first_name, created_at,
        ABS(EXTRACT(EPOCH FROM (created_at - $1))) as time_diff_seconds
        FROM players
        WHERE created_at BETWEEN $1 - INTERVAL '2 hours' AND $1 + INTERVAL '2 hours'
        ORDER BY time_diff_seconds
        LIMIT 10
      `, [deposit.created_at]),

      // 3. –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
      pool.query(`
        SELECT DISTINCT p.telegram_id, p.username, p.first_name,
        td.amount, td.created_at
        FROM players p
        JOIN ton_deposits td ON td.telegram_id = p.telegram_id
        WHERE ABS(td.amount - $1) < 0.001
        AND td.created_at BETWEEN $2 - INTERVAL '6 hours' AND $2 + INTERVAL '6 hours'
        ORDER BY td.created_at DESC
        LIMIT 5
      `, [deposit.amount, deposit.created_at]),

      // 4. –ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è (player_actions)
      pool.query(`
        SELECT DISTINCT p.telegram_id, p.username, p.first_name, pa.timestamp
        FROM players p
        JOIN player_actions pa ON pa.telegram_id = p.telegram_id
        WHERE pa.timestamp BETWEEN $1 - INTERVAL '1 hour' AND $1 + INTERVAL '1 hour'
        ORDER BY pa.timestamp DESC
        LIMIT 10
      `, [deposit.created_at])
    ]);

    const investigation_results = {
      deposit: deposit,
      wallet_matches: investigations[0].rows,
      time_correlations: investigations[1].rows,
      amount_similarities: investigations[2].rows,
      activity_correlations: investigations[3].rows,
      suggestions: []
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (investigation_results.wallet_matches.length > 0) {
      investigation_results.suggestions.push({
        confidence: 0.95,
        type: 'wallet_match',
        player_id: investigation_results.wallet_matches[0].telegram_id,
        reason: '–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞'
      });
    }

    if (investigation_results.time_correlations.length > 0) {
      const closest = investigation_results.time_correlations[0];
      if (closest.time_diff_seconds < 1800) { // –ú–µ–Ω—å—à–µ 30 –º–∏–Ω—É—Ç
        investigation_results.suggestions.push({
          confidence: 0.8,
          type: 'time_correlation',
          player_id: closest.telegram_id,
          reason: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ ${Math.round(closest.time_diff_seconds / 60)} –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞`
        });
      }
    }

    res.json({
      success: true,
      investigation: investigation_results
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
      details: error.message
    });
  }
});

// üÜï –°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í
// –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.get('/alerts/critical', async (req, res) => {
  const { admin_id } = req.query;

  try {
    if (process.env.NODE_ENV === 'development') console.log(`üö® –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ ${admin_id}`);

    if (!isAdmin(admin_id)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const alerts = await Promise.all([
      // 1. –ö—Ä—É–ø–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (>50 TON)
      pool.query(`
        SELECT 'large_orphaned_deposit' as type, 'critical' as priority,
        td.id, td.amount, td.created_at, td.transaction_hash,
        '–ö—Ä—É–ø–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞: ' || td.amount || ' TON' as message
        FROM ton_deposits td
        WHERE td.status = 'unidentified'
        AND td.amount > 50
        AND td.created_at > NOW() - INTERVAL '7 days'
      `),

      // 2. –û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–≤–æ–¥—ã –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
      pool.query(`
        SELECT 'pending_withdrawal_long' as type, 'high' as priority,
        w.id, w.amount, w.created_at, w.telegram_id,
        '–í—ã–≤–æ–¥ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ' || EXTRACT(HOUR FROM (NOW() - w.created_at)) || ' —á–∞—Å–æ–≤' as message
        FROM withdrawals w
        WHERE w.status = 'pending'
        AND w.created_at < NOW() - INTERVAL '24 hours'
      `),

      // 3. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–º–Ω–æ–≥–æ –≤—ã–≤–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å)
      pool.query(`
        SELECT 'suspicious_withdrawals' as type, 'medium' as priority,
        p.telegram_id, p.username, COUNT(*) as withdrawal_count,
        '–ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª ' || COUNT(*) || ' –≤—ã–≤–æ–¥–æ–≤ –∑–∞ 24 —á–∞—Å–∞' as message
        FROM players p
        JOIN withdrawals w ON w.telegram_id = p.telegram_id
        WHERE w.created_at > NOW() - INTERVAL '24 hours'
        GROUP BY p.telegram_id, p.username
        HAVING COUNT(*) > 5
      `),

      // 4. –ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ —Å –∫—Ä—É–ø–Ω—ã–º–∏ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
      pool.query(`
        SELECT 'new_player_large_deposit' as type, 'medium' as priority,
        p.telegram_id, p.username, p.created_at, td.amount,
        '–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –≤–Ω–µ—Å ' || td.amount || ' TON —á–µ—Ä–µ–∑ ' ||
        EXTRACT(HOUR FROM (td.created_at - p.created_at)) || ' —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' as message
        FROM players p
        JOIN ton_deposits td ON td.telegram_id = p.telegram_id
        WHERE p.created_at > NOW() - INTERVAL '7 days'
        AND td.amount > 20
        AND td.created_at < p.created_at + INTERVAL '6 hours'
      `)
    ]);

    const all_alerts = [
      ...alerts[0].rows,
      ...alerts[1].rows,
      ...alerts[2].rows,
      ...alerts[3].rows
    ].sort((a, b) => {
      const priority_order = { 'critical': 1, 'high': 2, 'medium': 3 };
      return priority_order[a.priority] - priority_order[b.priority];
    });

    if (process.env.NODE_ENV === 'development') console.log(`üö® –ù–∞–π–¥–µ–Ω–æ ${all_alerts.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤`);

    res.json({
      success: true,
      alerts: all_alerts,
      count: all_alerts.length,
      summary: {
        critical: all_alerts.filter(a => a.priority === 'critical').length,
        high: all_alerts.filter(a => a.priority === 'high').length,
        medium: all_alerts.filter(a => a.priority === 'medium').length
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤',
      details: error.message
    });
  }
});

if (process.env.NODE_ENV === 'development') console.log('‚úÖ –ú–æ–¥—É–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω');

module.exports = router;