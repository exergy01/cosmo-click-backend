// routes/admin/auth.js - –ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
const express = require('express');
const router = express.Router();

// üîê –ê–î–ú–ò–ù–°–ö–ò–ô ID –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID;

console.log('üîß –ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω. ADMIN_TELEGRAM_ID:', ADMIN_TELEGRAM_ID, '—Ç–∏–ø:', typeof ADMIN_TELEGRAM_ID);

// üõ°Ô∏è Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
const adminAuth = (req, res, next) => {
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º telegramId –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö URL
  let telegramId = req.params.telegramId;
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä—è–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –∏—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö URL
  if (!telegramId) {
    const urlParts = req.url.split('/');
    // –ò—â–µ–º —á–∏—Å–ª–æ –≤ URL (telegram ID –≤—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ–≤–æ–π)
    for (const part of urlParts) {
      // –£–±–∏—Ä–∞–µ–º query string –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä "1222791281?status=all" -> "1222791281")
      const cleanPart = part.split('?')[0];
      if (/^\d+$/.test(cleanPart)) {
        telegramId = cleanPart;
        break;
      }
    }
  }
  
  // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (!telegramId) {
    telegramId = req.params.adminId || req.query.telegramId || req.body.telegramId;
  }
  
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤:', { 
    telegramId, 
    telegramIdType: typeof telegramId,
    adminId: ADMIN_TELEGRAM_ID, 
    adminIdType: typeof ADMIN_TELEGRAM_ID,
    telegramIdStr: String(telegramId),
    adminIdStr: String(ADMIN_TELEGRAM_ID),
    stringMatch: String(telegramId) === String(ADMIN_TELEGRAM_ID),
    urlParams: req.params,
    urlPath: req.url,
    method: req.method,
    allUrlParts: req.url.split('/')
  });
  
  if (!telegramId) {
    console.log('üö´ Telegram ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏ –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –Ω–∏ –≤ —á–∞—Å—Ç—è—Ö URL');
    return res.status(400).json({ 
      error: 'Telegram ID is required',
      debug: {
        url: req.url,
        params: req.params,
        method: req.method,
        urlParts: req.url.split('/'),
        help: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç telegram ID'
      }
    });
  }
  
  // –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const telegramIdStr = String(telegramId).trim();
  const adminIdStr = String(ADMIN_TELEGRAM_ID).trim();
  
  if (telegramIdStr !== adminIdStr) {
    console.log('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –Ω–µ –∞–¥–º–∏–Ω:', {
      received: telegramIdStr,
      expected: adminIdStr,
      match: telegramIdStr === adminIdStr
    });
    return res.status(403).json({ 
      error: 'Access denied',
      debug: {
        receivedId: telegramIdStr,
        expectedId: adminIdStr.substring(0, 4) + '***', // –ß–∞—Å—Ç–∏—á–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º ID –≤ –ª–æ–≥–∞—Ö
        isMatch: telegramIdStr === adminIdStr
      }
    });
  }
  
  console.log('‚úÖ –ê–¥–º–∏–Ω –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è ID:', telegramIdStr);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π telegramId –≤ req.params –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  req.params.telegramId = telegramIdStr;
  
  next();
};

// üîç –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ (–±–µ–∑ middleware)
const isAdmin = (telegramId) => {
  if (!telegramId) return false;
  
  const telegramIdStr = String(telegramId).trim();
  const adminIdStr = String(ADMIN_TELEGRAM_ID).trim();
  return telegramIdStr === adminIdStr;
};

// üîç GET /check/:telegramId - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
router.get('/check/:telegramId', (req, res) => {
  const { telegramId } = req.params;
  
  const telegramIdStr = String(telegramId).trim();
  const adminIdStr = String(ADMIN_TELEGRAM_ID).trim();
  const isAdminUser = telegramIdStr === adminIdStr;
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', { 
    telegramId: telegramIdStr, 
    adminId: adminIdStr,
    isAdmin: isAdminUser,
    receivedType: typeof telegramId,
    adminType: typeof ADMIN_TELEGRAM_ID
  });
  
  res.json({ 
    isAdmin: isAdminUser,
    timestamp: new Date().toISOString(),
    debug: {
      receivedId: telegramIdStr,
      expectedId: adminIdStr,
      typesMatch: typeof telegramId === typeof ADMIN_TELEGRAM_ID,
      stringMatch: telegramIdStr === adminIdStr
    }
  });
});

// üîß GET /debug/:telegramId - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
router.get('/debug/:telegramId', (req, res) => {
  const { telegramId } = req.params;
  
  const debugInfo = {
    received_telegram_id: telegramId,
    received_type: typeof telegramId,
    admin_telegram_id: ADMIN_TELEGRAM_ID,
    admin_type: typeof ADMIN_TELEGRAM_ID,
    string_comparison: String(telegramId) === String(ADMIN_TELEGRAM_ID),
    direct_comparison: telegramId === ADMIN_TELEGRAM_ID,
    env_vars: {
      NODE_ENV: process.env.NODE_ENV,
      ADMIN_TELEGRAM_ID: process.env.ADMIN_TELEGRAM_ID
    },
    url_info: {
      full_url: req.url,
      params: req.params,
      query: req.query,
      method: req.method
    },
    timestamp: new Date().toISOString()
  };
  
  console.log('üîß Debug –∑–∞–ø—Ä–æ—Å:', debugInfo);
  
  res.json(debugInfo);
});

// üß™ GET /test-middleware/:telegramId - —Ç–µ—Å—Ç middleware
router.get('/test-middleware/:telegramId', adminAuth, (req, res) => {
  console.log('üß™ –¢–µ—Å—Ç middleware –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
  res.json({
    success: true,
    message: 'Middleware test passed',
    telegramId: req.params.telegramId,
    timestamp: new Date().toISOString()
  });
});

module.exports = {
  router,
  adminAuth,
  isAdmin,
  ADMIN_TELEGRAM_ID
};