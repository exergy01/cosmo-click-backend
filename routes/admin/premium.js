// routes/admin/premium.js - –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞–º–∏
const express = require('express');
const pool = require('../../db');
const { getPlayer } = require('../shared/getPlayer');
const { adminAuth } = require('./auth');

const router = express.Router();

// üõ°Ô∏è –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
router.use(adminAuth);

// üèÜ POST /grant-premium-30days/:telegramId - –í—ã–¥–∞—á–∞ 30-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞
router.post('/grant-premium-30days/:telegramId', async (req, res) => {
  const { playerId } = req.body;
  
  if (!playerId) {
    return res.status(400).json({ error: 'Player ID is required' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    if (process.env.NODE_ENV === 'development') console.log(`üèÜ –ê–¥–º–∏–Ω –≤—ã–¥–∞–µ—Ç 30-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫—É: ${playerId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(playerId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –í—ã–¥–∞–µ–º 30-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–µ–º–∏—É–º + verified = true
    await client.query(
      `UPDATE players SET 
       premium_no_ads_until = GREATEST(
         COALESCE(premium_no_ads_until, NOW()),
         NOW() + INTERVAL '30 days'
       ),
       verified = TRUE
       WHERE telegram_id = $1`,
      [playerId]
    );
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    const subscriptionResult = await client.query(
      `INSERT INTO premium_subscriptions (
        telegram_id, 
        subscription_type, 
        payment_method, 
        payment_amount,
        end_date,
        transaction_id,
        granted_by_admin
      ) VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING id`,
      [
        playerId,
        'no_ads_30_days',
        'admin_grant',
        0,
        new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
        `admin_${Date.now()}_${playerId}`,
        true
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query(
      `INSERT INTO premium_transactions (
        telegram_id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        payment_currency,
        description,
        metadata
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
      [
        playerId,
        'admin_grant',
        'no_ads_30_days',
        'admin_grant',
        0,
        'admin',
        'Premium 30 days granted by admin',
        JSON.stringify({
          admin_id: req.params.telegramId,
          subscription_id: subscriptionResult.rows[0].id,
          granted_timestamp: new Date().toISOString(),
          verified_granted: true
        })
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
    try {
      await client.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_premium_30days_grant',
        JSON.stringify({
          admin_id: req.params.telegramId,
          subscription_id: subscriptionResult.rows[0].id,
          verified_granted: true
        })
      ]);
    } catch (logError) {
      if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', logError.message);
    }
    
    await client.query('COMMIT');
    
    const updatedPlayer = await getPlayer(playerId);
    
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ 30-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${playerId} + verified = true`);
    
    res.json({
      success: true,
      message: '30-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–µ–º–∏—É–º –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      player: updatedPlayer,
      subscription_id: subscriptionResult.rows[0].id
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ 30-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// üèÜ POST /grant-premium-forever/:telegramId - –í—ã–¥–∞—á–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞
router.post('/grant-premium-forever/:telegramId', async (req, res) => {
  const { playerId } = req.body;
  
  if (!playerId) {
    return res.status(400).json({ error: 'Player ID is required' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    if (process.env.NODE_ENV === 'development') console.log(`üèÜ –ê–¥–º–∏–Ω –≤—ã–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫—É: ${playerId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(playerId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –í—ã–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º + verified = true
    await client.query(
      `UPDATE players SET 
       premium_no_ads_forever = TRUE,
       premium_no_ads_until = NULL,
       verified = TRUE
       WHERE telegram_id = $1`,
      [playerId]
    );
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    const subscriptionResult = await client.query(
      `INSERT INTO premium_subscriptions (
        telegram_id, 
        subscription_type, 
        payment_method, 
        payment_amount,
        end_date,
        transaction_id,
        granted_by_admin
      ) VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING id`,
      [
        playerId,
        'no_ads_forever',
        'admin_grant',
        0,
        null, // –ù–∞–≤—Å–µ–≥–¥–∞
        `admin_forever_${Date.now()}_${playerId}`,
        true
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query(
      `INSERT INTO premium_transactions (
        telegram_id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        payment_currency,
        description,
        metadata
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
      [
        playerId,
        'admin_grant',
        'no_ads_forever',
        'admin_grant',
        0,
        'admin',
        'Premium forever granted by admin',
        JSON.stringify({
          admin_id: req.params.telegramId,
          subscription_id: subscriptionResult.rows[0].id,
          granted_timestamp: new Date().toISOString(),
          verified_granted: true
        })
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
    try {
      await client.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_premium_forever_grant',
        JSON.stringify({
          admin_id: req.params.telegramId,
          subscription_id: subscriptionResult.rows[0].id,
          verified_granted: true
        })
      ]);
    } catch (logError) {
      if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', logError.message);
    }
    
    await client.query('COMMIT');
    
    const updatedPlayer = await getPlayer(playerId);
    
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${playerId} + verified = true`);
    
    res.json({
      success: true,
      message: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      player: updatedPlayer,
      subscription_id: subscriptionResult.rows[0].id
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// üö´ POST /revoke-premium/:telegramId - –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–æ–≤
router.post('/revoke-premium/:telegramId', async (req, res) => {
  const { playerId } = req.body;
  
  if (!playerId) {
    return res.status(400).json({ error: 'Player ID is required' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    if (process.env.NODE_ENV === 'development') console.log(`üö´ –ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å—ã –∏–≥—Ä–æ–∫–∞: ${playerId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(playerId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const currentStatus = {
      verified: player.verified,
      premium_no_ads_forever: player.premium_no_ads_forever,
      premium_no_ads_until: player.premium_no_ads_until
    };
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –í–°–ï —Å—Ç–∞—Ç—É—Å—ã: –ø—Ä–µ–º–∏—É–º + verified
    await client.query(
      `UPDATE players SET 
       premium_no_ads_forever = FALSE,
       premium_no_ads_until = NULL,
       verified = FALSE
       WHERE telegram_id = $1`,
      [playerId]
    );
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    await client.query(
      `UPDATE premium_subscriptions 
       SET status = 'admin_revoked' 
       WHERE telegram_id = $1 
         AND status = 'active'`,
      [playerId]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã
    await client.query(
      `INSERT INTO premium_transactions (
        telegram_id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        payment_currency,
        description,
        metadata
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
      [
        playerId,
        'admin_revoke',
        'all_premium',
        'admin_action',
        0,
        'admin',
        'All premium statuses revoked by admin',
        JSON.stringify({
          admin_id: req.params.telegramId,
          revoked_timestamp: new Date().toISOString(),
          previous_status: currentStatus,
          verified_revoked: true
        })
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
    try {
      await client.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_premium_revoke_all',
        JSON.stringify({
          admin_id: req.params.telegramId,
          previous_status: currentStatus,
          verified_revoked: true
        })
      ]);
    } catch (logError) {
      if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', logError.message);
    }
    
    await client.query('COMMIT');
    
    const updatedPlayer = await getPlayer(playerId);
    
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –í—Å–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} + verified = false`);
    
    res.json({
      success: true,
      message: '–í—Å–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å—ã –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã',
      player: updatedPlayer,
      previous_status: currentStatus
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// ‚úÖ POST /grant-basic-verification/:telegramId - –í—ã–¥–∞—á–∞ –¢–û–õ–¨–ö–û –±–∞–∑–æ–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.post('/grant-basic-verification/:telegramId', async (req, res) => {
  const { playerId } = req.body;
  
  if (!playerId) {
    return res.status(400).json({ error: 'Player ID is required' });
  }
  
  try {
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ê–¥–º–∏–Ω –≤—ã–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫—É: ${playerId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(playerId);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –í—ã–¥–∞–µ–º –¢–û–õ–¨–ö–û verified = true (–ë–ï–ó –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π)
    await pool.query(
      'UPDATE players SET verified = TRUE WHERE telegram_id = $1',
      [playerId]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
    try {
      await pool.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_basic_verification_grant',
        JSON.stringify({
          admin_id: req.params.telegramId,
          verification_type: 'basic_only',
          premium_granted: false
        })
      ]);
    } catch (logError) {
      if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:', logError.message);
    }
    
    const updatedPlayer = await getPlayer(playerId);
    
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ –∏–≥—Ä–æ–∫—É ${playerId} (–±–µ–∑ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π)`);
    
    res.json({
      success: true,
      message: '–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      player: updatedPlayer,
      verification_type: 'basic_only'
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// üìä GET /premium-overview/:telegramId - –û–±–∑–æ—Ä –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
router.get('/premium-overview/:telegramId', async (req, res) => {
  try {
    if (process.env.NODE_ENV === 'development') console.log('üìä –ê–¥–º–∏–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±–∑–æ—Ä –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫–æ–≤
    const premiumStats = await pool.query(`
      SELECT 
        COUNT(CASE WHEN verified = true THEN 1 END) as total_verified,
        COUNT(CASE WHEN premium_no_ads_forever = true THEN 1 END) as premium_forever,
        COUNT(CASE WHEN premium_no_ads_until > NOW() THEN 1 END) as premium_30days_active,
        COUNT(CASE WHEN premium_no_ads_until IS NOT NULL AND premium_no_ads_until <= NOW() THEN 1 END) as premium_expired,
        COUNT(CASE WHEN verified = true AND premium_no_ads_forever = false AND (premium_no_ads_until IS NULL OR premium_no_ads_until <= NOW()) THEN 1 END) as basic_verified_only
      FROM players
    `);
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–º–∏—É–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const recentTransactions = await pool.query(`
      SELECT 
        telegram_id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        description,
        created_at
      FROM premium_transactions 
      ORDER BY created_at DESC 
      LIMIT 20
    `);
    
    // –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —Å –ø—Ä–µ–º–∏—É–º–æ–º
    const premiumPlayers = await pool.query(`
      SELECT 
        telegram_id,
        first_name,
        username,
        verified,
        premium_no_ads_forever,
        premium_no_ads_until,
        created_at
      FROM players 
      WHERE verified = true 
      ORDER BY 
        premium_no_ads_forever DESC,
        premium_no_ads_until DESC NULLS LAST,
        created_at DESC
      LIMIT 15
    `);
    
    res.json({
      success: true,
      stats: premiumStats.rows[0],
      recent_transactions: recentTransactions.rows,
      premium_players: premiumPlayers.rows,
      timestamp: new Date().toISOString()
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –æ–±–∑–æ—Ä–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// üß™ POST /test-premium-cleanup/:telegramId - –¢–µ—Å—Ç–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–º–∏—É–º–∞
router.post('/test-premium-cleanup/:telegramId', async (req, res) => {
  try {
    if (process.env.NODE_ENV === 'development') console.log('üß™ –ê–¥–º–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫');
    
    const axios = require('axios');
    const apiUrl = process.env.NODE_ENV === 'production'
      ? 'https://cosmoclick-backend.onrender.com'
      : 'http://localhost:5000';
    
    // –í—ã–∑—ã–≤–∞–µ–º endpoint –æ—á–∏—Å—Ç–∫–∏
    const response = await axios.post(`${apiUrl}/api/admin/manual-cleanup-premium`, {
      admin_id: req.params.telegramId
    });
    
    res.json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      cleanup_result: response.data
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏:', err);
    res.status(500).json({ 
      error: 'Test cleanup failed', 
      details: err.response?.data?.error || err.message 
    });
  }
});

module.exports = router;