// routes/admin/messaging.js - –ú–æ–¥—É–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–∞—Å—Å—ã–ª–æ–∫
const express = require('express');
const pool = require('../../db');
const { getPlayer } = require('../shared/getPlayer');
const { adminAuth } = require('./auth');

const router = express.Router();

// üõ°Ô∏è –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
router.use(adminAuth);

// üì± POST /send-message/:telegramId - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É (—Å –æ—Ç–ª–∞–¥–∫–æ–π)
router.post('/send-message/:telegramId', async (req, res) => {
  const { playerId, message } = req.body;
  
  if (process.env.NODE_ENV === 'development') console.log('üîç === –û–¢–õ–ê–î–ö–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===');
  if (process.env.NODE_ENV === 'development') console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { playerId, message, adminId: req.params.telegramId });
  
  if (!playerId || !message?.trim()) {
    if (process.env.NODE_ENV === 'development') console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ error: 'Player ID and message are required' });
  }
  
  try {
    if (process.env.NODE_ENV === 'development') console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É ${playerId}: "${message}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (process.env.NODE_ENV === 'development') console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞...');
    const player = await getPlayer(playerId);
    if (process.env.NODE_ENV === 'development') console.log('üë§ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:', player ? {
      telegram_id: player.telegram_id,
      username: player.username,
      first_name: player.first_name
    } : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    if (!player) {
      if (process.env.NODE_ENV === 'development') console.log('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const fullMessage = `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ CosmoClick</b>\n\n${message}\n\nüïê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;
    if (process.env.NODE_ENV === 'development') console.log('üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', fullMessage);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
    if (process.env.NODE_ENV === 'development') console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try {
      const { sendTelegramMessage } = require('../telegramBot');
      if (process.env.NODE_ENV === 'development') console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è sendTelegramMessage –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë');
      await sendTelegramMessage(playerId, fullMessage);
      if (process.env.NODE_ENV === 'development') console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ sendTelegramMessage');
    } catch (telegramBotError) {
      if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ telegramBot:', telegramBotError.message);
      
      // –°–ø–æ—Å–æ–± 2: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram API
      if (process.env.NODE_ENV === 'development') console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram API...');
      
      const axios = require('axios');
      const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
      
      if (!BOT_TOKEN) {
        throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }
      
      if (process.env.NODE_ENV === 'development') console.log('üîë BOT_TOKEN –Ω–∞–π–¥–µ–Ω:', BOT_TOKEN ? '–î–ê (–¥–ª–∏–Ω–∞: ' + BOT_TOKEN.length + ')' : '–ù–ï–¢');
      
      const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
      const payload = {
        chat_id: playerId,
        text: fullMessage,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      };
      
      if (process.env.NODE_ENV === 'development') console.log('üåê URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', telegramUrl.replace(BOT_TOKEN, 'HIDDEN_TOKEN'));
      if (process.env.NODE_ENV === 'development') console.log('üì¶ Payload –¥–ª—è Telegram:', { ...payload, text: payload.text.substring(0, 50) + '...' });
      
      const telegramResponse = await axios.post(telegramUrl, payload, {
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      if (process.env.NODE_ENV === 'development') console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', {
        ok: telegramResponse.data.ok,
        message_id: telegramResponse.data.result?.message_id,
        error_code: telegramResponse.data.error_code,
        description: telegramResponse.data.description
      });
      
      if (!telegramResponse.data.ok) {
        throw new Error(`Telegram API –æ—à–∏–±–∫–∞: ${telegramResponse.data.description} (–∫–æ–¥: ${telegramResponse.data.error_code})`);
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await pool.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_message_sent',
        JSON.stringify({
          admin_id: req.params.telegramId,
          message: message.substring(0, 100) + (message.length > 100 ? '...' : ''),
          timestamp: new Date().toISOString(),
          success: true
        })
      ]);
      if (process.env.NODE_ENV === 'development') console.log('üìù –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    } catch (logError) {
      if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:', logError.message);
    }
    
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É ${playerId} (${player.first_name || player.username})`);
    
    res.json({
      success: true,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
      player: {
        telegram_id: playerId,
        first_name: player.first_name,
        username: player.username
      },
      debug: {
        message_length: message.length,
        full_message_length: fullMessage.length,
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (err) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É:', err);
    console.error('‚ùå Stack trace:', err.stack);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (process.env.NODE_ENV === 'development') console.log('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
    if (process.env.NODE_ENV === 'development') console.log('- Player ID —Ç–∏–ø:', typeof playerId);
    if (process.env.NODE_ENV === 'development') console.log('- Player ID –∑–Ω–∞—á–µ–Ω–∏–µ:', playerId);
    if (process.env.NODE_ENV === 'development') console.log('- Message —Ç–∏–ø:', typeof message);
    if (process.env.NODE_ENV === 'development') console.log('- Message –¥–ª–∏–Ω–∞:', message?.length);
    if (process.env.NODE_ENV === 'development') console.log('- BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.TELEGRAM_BOT_TOKEN);
    if (process.env.NODE_ENV === 'development') console.log('- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', new Date().toISOString());
    
    res.status(500).json({ 
      error: 'Internal server error', 
      details: err.message,
      debug: {
        player_id: playerId,
        message_length: message?.length,
        error_type: err.constructor.name,
        bot_token_exists: !!process.env.TELEGRAM_BOT_TOKEN
      }
    });
  }
});

// üì¢ POST /broadcast-message/:telegramId - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
router.post('/broadcast-message/:telegramId', async (req, res) => {
  const { message, onlyVerified = false } = req.body;
  
  if (!message?.trim()) {
    return res.status(400).json({ error: 'Message is required' });
  }
  
  try {
    if (process.env.NODE_ENV === 'development') console.log(`üì¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º${onlyVerified ? ' (—Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º)' : ''}: "${message}"`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    const playersQuery = onlyVerified 
      ? 'SELECT telegram_id, first_name, username FROM players WHERE verified = true ORDER BY created_at DESC'
      : 'SELECT telegram_id, first_name, username FROM players ORDER BY created_at DESC';
      
    const playersResult = await pool.query(playersQuery);
    const players = playersResult.rows;
    
    if (players.length === 0) {
      return res.status(400).json({ error: '–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏' });
    }
    
    if (process.env.NODE_ENV === 'development') console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    const { sendTelegramMessage } = require('../telegramBot');
    
    const fullMessage = `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ CosmoClick</b>\n\n${message}\n\nüïê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let sentCount = 0;
    let errorCount = 0;
    const errors = [];
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
    for (let i = 0; i < players.length; i++) {
      const player = players[i];
      
      try {
        await sendTelegramMessage(player.telegram_id, fullMessage);
        sentCount++;
        if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${i + 1}/${players.length}: ${player.telegram_id}`);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ 50ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
        if (i < players.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 50));
        }
        
      } catch (sendError) {
        errorCount++;
        errors.push({
          player_id: player.telegram_id,
          player_name: player.first_name || player.username,
          error: sendError.message
        });
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${i + 1}/${players.length} (${player.telegram_id}):`, sendError.message);
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await pool.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        req.params.telegramId,
        'admin_broadcast_sent',
        JSON.stringify({
          admin_id: req.params.telegramId,
          message: message.substring(0, 100) + (message.length > 100 ? '...' : ''),
          total_players: players.length,
          sent_count: sentCount,
          error_count: errorCount,
          only_verified: onlyVerified,
          timestamp: new Date().toISOString()
        })
      ]);
    } catch (logError) {
      if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:', logError.message);
    }
    
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}, –æ—à–∏–±–æ–∫: ${errorCount}`);
    
    res.json({
      success: true,
      message: '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      statistics: {
        total_players: players.length,
        sent_count: sentCount,
        error_count: errorCount,
        success_rate: Math.round((sentCount / players.length) * 100)
      },
      errors: errorCount > 0 ? errors.slice(0, 10) : [] // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
    res.status(500).json({ 
      error: 'Internal server error', 
      details: err.message 
    });
  }
});

module.exports = router;