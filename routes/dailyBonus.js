// routes/dailyBonus.js - –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const { logPlayerAction, updateLifetimeStats, logBalanceChange } = require('./shared/logger');

const router = express.Router();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ (CCC –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
const DAILY_BONUS_AMOUNTS = [10, 20, 30, 40, 50, 60, 100];

// GET /api/daily-bonus/status/:telegramId - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
router.get('/status/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    console.log(`üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –¥–ª—è ${telegramId}`);

    const player = await getPlayer(telegramId);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö
    const bonusResult = await pool.query(
      'SELECT * FROM daily_bonus_streaks WHERE telegram_id = $1',
      [telegramId]
    );

    let bonusData = bonusResult.rows[0];

    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if (!bonusData) {
      await pool.query(
        'INSERT INTO daily_bonus_streaks (telegram_id, current_streak, last_claim_date, total_claims) VALUES ($1, 0, NULL, 0)',
        [telegramId]
      );

      bonusData = {
        telegram_id: telegramId,
        current_streak: 0,
        last_claim_date: null,
        total_claims: 0
      };
    }

    const now = new Date();
    const today = now.toDateString();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
    let canClaim = true;
    let nextDay = 1;

    if (bonusData.last_claim_date) {
      const lastClaimDate = new Date(bonusData.last_claim_date).toDateString();
      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000).toDateString();

      if (lastClaimDate === today) {
        // –£–∂–µ –∑–∞–±—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è
        canClaim = false;
        nextDay = bonusData.current_streak < 7 ? bonusData.current_streak + 1 : 1;
      } else if (lastClaimDate === yesterday) {
        // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç—Ä–∏–∫
        nextDay = bonusData.current_streak < 7 ? bonusData.current_streak + 1 : 1;
      } else {
        // –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω
        nextDay = 1;
      }
    }

    const nextBonusAmount = DAILY_BONUS_AMOUNTS[nextDay - 1];

    console.log(`üìÖ –°—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–æ–≤: –¥–µ–Ω—å ${nextDay}, –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å: ${canClaim}, —Å—É–º–º–∞: ${nextBonusAmount} CCC`);

    res.json({
      can_claim: canClaim,
      current_streak: bonusData.current_streak,
      next_day: nextDay,
      next_bonus_amount: nextBonusAmount,
      last_claim_date: bonusData.last_claim_date,
      total_claims: bonusData.total_claims,
      bonus_schedule: DAILY_BONUS_AMOUNTS
    });

  } catch (err) {
    console.error('Error getting daily bonus status:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/daily-bonus/claim/:telegramId - –∑–∞–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
router.post('/claim/:telegramId', async (req, res) => {
  const { telegramId } = req.params;

  console.log(`üéÅ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: ${telegramId}`);

  console.log(`üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...`);
  const client = await pool.connect();
  console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...`);

  try {
    await client.query('BEGIN');
    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–∞...`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const playerResult = await client.query('SELECT * FROM players WHERE telegram_id = $1', [telegramId]);
    const player = playerResult.rows[0];
    console.log(`‚úÖ –ò–≥—Ä–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω: ${player ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –Ω–∞–π–¥–µ–Ω'}`);


    if (!player) {
      console.log(`‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é`);
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    console.log(`üéØ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤...`);
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–æ–≤
    const bonusResult = await client.query(
      'SELECT * FROM daily_bonus_streaks WHERE telegram_id = $1 FOR UPDATE',
      [telegramId]
    );
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω, –∑–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ: ${bonusResult.rows.length}`);

    let bonusData = bonusResult.rows[0];

    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º
    if (!bonusData) {
      console.log(`‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}...`);
      await client.query(
        'INSERT INTO daily_bonus_streaks (telegram_id, current_streak, last_claim_date, total_claims) VALUES ($1, 0, NULL, 0)',
        [telegramId]
      );
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞`);

      bonusData = {
        telegram_id: telegramId,
        current_streak: 0,
        last_claim_date: null,
        total_claims: 0
      };
    }

    const now = new Date();
    const today = now.toDateString();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∑–∞–±—Ä–∞—Ç—å
    if (bonusData.last_claim_date) {
      const lastClaimDate = new Date(bonusData.last_claim_date).toDateString();

      if (lastClaimDate === today) {
        await client.query('ROLLBACK');
        return res.status(400).json({ error: 'Daily bonus already claimed today' });
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫
    let newStreak = 1;

    if (bonusData.last_claim_date) {
      const lastClaimDate = new Date(bonusData.last_claim_date).toDateString();
      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000).toDateString();

      if (lastClaimDate === yesterday) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç—Ä–∏–∫
        newStreak = bonusData.current_streak < 7 ? bonusData.current_streak + 1 : 1;
      }
      // –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –¥–µ–Ω—å - —Å—Ç—Ä–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ 1
    }

    const bonusAmount = DAILY_BONUS_AMOUNTS[newStreak - 1];

    console.log(`üéÅ –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å: –¥–µ–Ω—å ${newStreak}, —Å—É–º–º–∞ ${bonusAmount} CCC`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const balanceBefore = {
      ccc: parseFloat(player.ccc),
      cs: parseFloat(player.cs),
      ton: parseFloat(player.ton)
    };

    // –ù–∞—á–∏—Å–ª—è–µ–º CCC
    const newCccBalance = parseFloat(player.ccc) + bonusAmount;

    await client.query(
      'UPDATE players SET ccc = $1 WHERE telegram_id = $2',
      [newCccBalance, telegramId]
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
    await client.query(
      'UPDATE daily_bonus_streaks SET current_streak = $1, last_claim_date = $2, total_claims = total_claims + 1 WHERE telegram_id = $3',
      [newStreak, now, telegramId]
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    const actionId = await logPlayerAction(
      telegramId,
      'daily_bonus_claim',
      bonusAmount,
      null,
      null,
      {
        streak_day: newStreak,
        bonus_amount: bonusAmount,
        was_streak_reset: newStreak === 1 && bonusData.current_streak > 0
      },
      req
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const balanceAfter = {
      ccc: newCccBalance,
      cs: parseFloat(player.cs),
      ton: parseFloat(player.ton)
    };

    if (actionId) {
      await logBalanceChange(telegramId, actionId, balanceBefore, balanceAfter);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await updateLifetimeStats(telegramId, 'daily_bonus_claim', 1);

    await client.query('COMMIT');

    console.log(`‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω: ${bonusAmount} CCC (–¥–µ–Ω—å ${newStreak})`);

    res.json({
      success: true,
      bonus_amount: bonusAmount,
      streak_day: newStreak,
      next_day: newStreak < 7 ? newStreak + 1 : 1,
      next_bonus_amount: DAILY_BONUS_AMOUNTS[newStreak < 7 ? newStreak : 0],
      is_max_streak: newStreak === 7
    });

  } catch (err) {
    await client.query('ROLLBACK');
    console.error('Error claiming daily bonus:', err);
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// GET /api/daily-bonus/leaderboard - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –±–æ–Ω—É—Å–∞–º
router.get('/leaderboard', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT
        p.telegram_id,
        p.first_name,
        p.username,
        dbs.current_streak,
        dbs.total_claims,
        dbs.last_claim_date
      FROM daily_bonus_streaks dbs
      JOIN players p ON dbs.telegram_id = p.telegram_id
      WHERE dbs.total_claims > 0
      ORDER BY dbs.current_streak DESC, dbs.total_claims DESC
      LIMIT 50
    `);

    res.json({
      leaderboard: result.rows
    });

  } catch (err) {
    console.error('Error getting daily bonus leaderboard:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;