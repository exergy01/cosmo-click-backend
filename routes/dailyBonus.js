// routes/dailyBonus.js - –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const { logPlayerAction, updateLifetimeStats, logBalanceChange } = require('./shared/logger');

const router = express.Router();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ (CCC –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
const DAILY_BONUS_AMOUNTS = [10, 20, 30, 40, 50, 60, 100];

// GET /api/daily-bonus/status/:telegramId - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
router.get('/status/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    const player = await getPlayer(telegramId);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }

    // ‚úÖ –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê –∫–∞–∫ –≤ –∑–∞–¥–∞–Ω–∏—è—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
    const currentTime = new Date();
    const today = currentTime.toDateString();

    let dailyBonusStreak = player.daily_bonus_streak || 0;
    let dailyBonusLastClaim = player.daily_bonus_last_claim;
    let canClaim = true;
    let nextDay = 1;

    // –õ–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ quest_ad —Å–∏—Å—Ç–µ–º–µ
    if (dailyBonusLastClaim) {
      const lastClaimDate = new Date(dailyBonusLastClaim).toDateString();
      const yesterday = new Date(currentTime.getTime() - 24 * 60 * 60 * 1000).toDateString();

      if (lastClaimDate === today) {
        // –£–∂–µ –∑–∞–±—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è
        canClaim = false;
        nextDay = dailyBonusStreak < 7 ? dailyBonusStreak + 1 : 1;
      } else if (lastClaimDate === yesterday) {
        // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç—Ä–∏–∫
        nextDay = dailyBonusStreak < 7 ? dailyBonusStreak + 1 : 1;
      } else {
        // –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω - –Ω–æ–≤—ã–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞
        nextDay = 1;
      }
    }

    const nextBonusAmount = DAILY_BONUS_AMOUNTS[nextDay - 1];

    res.json({
      can_claim: canClaim,
      current_streak: dailyBonusStreak,
      next_day: nextDay,
      next_bonus_amount: nextBonusAmount,
      last_claim_date: dailyBonusLastClaim,
      bonus_schedule: DAILY_BONUS_AMOUNTS
    });

  } catch (err) {
    console.error('Error getting daily bonus status:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/daily-bonus/test-simple/:telegramId - –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –±–µ–∑ –ë–î
router.post('/test-simple/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  console.log(`üß™ Simple test for ${telegramId}`);

  res.json({
    success: true,
    message: '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    telegramId: telegramId,
    timestamp: new Date().toISOString()
  });
});

// POST /api/daily-bonus/test-tomorrow/:telegramId - –¢–ï–°–¢ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
router.post('/test-tomorrow/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    console.log(`üß™ Tomorrow test for ${telegramId}`);

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'telegramId is required'
      });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∫–∞–∫ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    const tomorrowTime = new Date();
    tomorrowTime.setDate(tomorrowTime.getDate() + 1);

    console.log(`üß™ About to update DB for tomorrow test...`);
    await pool.query(`
      UPDATE players
      SET daily_bonus_last_claim = $1
      WHERE telegram_id = $2
    `, [tomorrowTime, telegramId]);
    console.log(`üß™ DB updated successfully for tomorrow test`);

    res.json({
      success: true,
      message: '–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      test_date: tomorrowTime.toISOString()
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ endpoint:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/daily-bonus/claim/:telegramId - –∑–∞–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
router.post('/claim/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        error: 'telegramId is required'
      });
    }

    console.log(`üéÅ Claim request for ${telegramId}`);

    // ‚úÖ –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê –∫–∞–∫ –≤ watch_ad –∏–∑ –∑–∞–¥–∞–Ω–∏–π
    const playerResult = await pool.query(
      'SELECT telegram_id, first_name, ccc, daily_bonus_streak, daily_bonus_last_claim FROM players WHERE telegram_id = $1',
      [telegramId]
    );

    console.log(`üìä Player query result: ${playerResult.rows.length} rows`);

    if (playerResult.rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    const player = playerResult.rows[0];
    console.log(`üë§ Player data:`, {
      telegram_id: player.telegram_id,
      daily_bonus_streak: player.daily_bonus_streak,
      daily_bonus_last_claim: player.daily_bonus_last_claim
    });

    const currentTime = new Date();
    console.log(`‚è∞ Current time:`, currentTime);

    const today = currentTime.toDateString();
    console.log(`üìÖ Today:`, today);

    const lastClaimDate = player.daily_bonus_last_claim ? new Date(player.daily_bonus_last_claim).toDateString() : null;
    console.log(`üìÖ Last claim date:`, lastClaimDate);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
    if (lastClaimDate === today) {
      console.log(`‚ùå Already claimed today`);
      return res.status(400).json({
        success: false,
        error: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è'
      });
    }

    console.log(`üßÆ Calculating streak...`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–∫
    let newStreak = 1;
    let currentStreak = player.daily_bonus_streak || 0;
    console.log(`üìä Current streak:`, currentStreak);

    if (lastClaimDate) {
      const yesterday = new Date(currentTime.getTime() - 24 * 60 * 60 * 1000).toDateString();
      console.log(`üìÖ Yesterday:`, yesterday);

      if (lastClaimDate === yesterday) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç—Ä–∏–∫
        newStreak = currentStreak < 7 ? currentStreak + 1 : 1;
        console.log(`‚úÖ Continuing streak to:`, newStreak);
      } else {
        console.log(`üîÑ Streak reset to 1`);
      }
      // –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –¥–µ–Ω—å - —Å—Ç—Ä–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ 1
    } else {
      console.log(`üÜï First time claiming`);
    }

    const bonusAmount = DAILY_BONUS_AMOUNTS[newStreak - 1];
    console.log(`üí∞ Bonus amount for day ${newStreak}:`, bonusAmount);

    console.log(`üí∞ –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å: –¥–µ–Ω—å ${newStreak}, —Å—É–º–º–∞ ${bonusAmount} CCC`);

    // ‚úÖ –ü–†–û–°–¢–û–ô UPDATE –ë–ï–ó –¢–†–ê–ù–ó–ê–ö–¶–ò–ô (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è!)
    try {
      console.log(`üîß About to execute UPDATE with params:`, {
        newStreak,
        currentTime: currentTime.toISOString(),
        bonusAmount,
        telegramId
      });

      console.log(`üîß Calling pool.query now...`);
      const updateResult = await pool.query(`
        UPDATE players
        SET daily_bonus_streak = $1,
            daily_bonus_last_claim = $2,
            ccc = ccc + $3
        WHERE telegram_id = $4
        RETURNING daily_bonus_streak, ccc
      `, [newStreak, currentTime, bonusAmount, telegramId]);

      console.log(`üîß pool.query completed successfully`);

      console.log(`‚úÖ Update successful:`, updateResult.rows[0]);

      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: –¥–µ–Ω—å ${newStreak}, ${bonusAmount} CCC`);

      res.json({
        success: true,
        message: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω',
        bonus_amount: bonusAmount,
        streak_day: newStreak,
        next_day: newStreak < 7 ? newStreak + 1 : 1,
        next_bonus_amount: DAILY_BONUS_AMOUNTS[newStreak < 7 ? newStreak : 0],
        is_max_streak: newStreak === 7
      });

    } catch (updateError) {
      console.error(`‚ùå Update failed:`, updateError);
      throw updateError;
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/daily-bonus/leaderboard - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –±–æ–Ω—É—Å–∞–º
router.get('/leaderboard', async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT
        telegram_id,
        first_name,
        username,
        daily_bonus_streak as current_streak,
        daily_bonus_last_claim as last_claim_date
      FROM players
      WHERE daily_bonus_streak > 0
      ORDER BY daily_bonus_streak DESC, daily_bonus_last_claim DESC
      LIMIT 50
    `);

    res.json({
      leaderboard: result.rows
    });

  } catch (err) {
    console.error('Error getting daily bonus leaderboard:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;