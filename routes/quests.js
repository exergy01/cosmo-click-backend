const express = require('express');
const router = express.Router();
const pool = require('../db');

// GET /api/quests/:telegramId - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
router.get('/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏
    const playerResult = await pool.query(
      'SELECT registration_language, quest_link_states, quest_ad_views, quest_ad_last_reset FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    const player = playerResult.rows[0];
    const registrationLanguage = player.registration_language || 'en';
    const questLinkStates = player.quest_link_states || {};
    
    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–∫–ª–∞–º—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –∑–∞–¥–∞–Ω–∏–π
    const currentTime = new Date();
    const today = currentTime.toDateString();
    const lastResetDate = player.quest_ad_last_reset ? new Date(player.quest_ad_last_reset).toDateString() : null;
    
    let questAdViews = player.quest_ad_views || 0;
    
    // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    if (lastResetDate !== today) {
      questAdViews = 0;
      console.log(`üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId} (${lastResetDate} ‚Üí ${today})`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await pool.query(
        'UPDATE players SET quest_ad_views = 0, quest_ad_last_reset = $1 WHERE telegram_id = $2',
        [currentTime, telegramId]
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    const questsResult = await pool.query(`
      SELECT quest_id, quest_name, quest_type, description, reward_cs, quest_data, is_active
      FROM quests 
      WHERE is_active = true 
      AND (
        quest_data IS NULL 
        OR quest_data->>'language' IS NULL 
        OR quest_data->>'language' = $1
      )
      ORDER BY quest_id
    `, [registrationLanguage]);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    const completedResult = await pool.query(
      'SELECT quest_id FROM player_quests WHERE telegram_id = $1 AND completed = true',
      [telegramId]
    );
    
    const completedQuestIds = completedResult.rows.map(row => row.quest_id);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    const updatedLinkStates = { ...questLinkStates };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    Object.keys(updatedLinkStates).forEach(questId => {
      const state = updatedLinkStates[questId];
      if (state.clicked_at) {
        const clickedTime = new Date(state.clicked_at);
        const elapsedSeconds = Math.floor((currentTime - clickedTime) / 1000);
        const isCompleted = elapsedSeconds >= 30;
        
        updatedLinkStates[questId] = {
          ...state,
          timer_remaining: Math.max(0, 30 - elapsedSeconds),
          can_claim: isCompleted
        };
      }
    });
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const quests = questsResult.rows.map(quest => ({
      ...quest,
      completed: completedQuestIds.includes(quest.quest_id)
    }));
    
    console.log(`üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId} (${quests.length} –Ω–∞–π–¥–µ–Ω–æ, —è–∑—ã–∫: ${registrationLanguage}), —Ä–µ–∫–ª–∞–º–∞ –∑–∞–¥–∞–Ω–∏–π: ${questAdViews}/5`);
    
    // ‚úÖ –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π quest_ad_views
    res.json({ 
      success: true, 
      quests,
      quest_ad_views: questAdViews // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
    });
    
  } catch (error) {
    console.error('Error fetching quests:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/quests/click_link - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞–¥–∞–Ω–∏—è
router.post('/click_link', async (req, res) => {
  try {
    const { telegramId, questId } = req.body;
    
    if (!telegramId || !questId) {
      return res.status(400).json({ 
        success: false, 
        error: 'telegramId and questId are required' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    const playerResult = await pool.query(
      'SELECT quest_link_states FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    const questLinkStates = playerResult.rows[0].quest_link_states || {};
    const currentTime = new Date();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    questLinkStates[questId.toString()] = {
      clicked_at: currentTime.toISOString(),
      timer_remaining: 30,
      can_claim: false
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await pool.query(
      'UPDATE players SET quest_link_states = $1 WHERE telegram_id = $2',
      [JSON.stringify(questLinkStates), telegramId]
    );
    
    console.log(`üîó –ò–≥—Ä–æ–∫ ${telegramId} –∫–ª–∏–∫–Ω—É–ª –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞–¥–∞–Ω–∏—è ${questId}`);
    
    res.json({
      success: true,
      message: '–°—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      link_state: questLinkStates[questId.toString()]
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// POST /api/quests/watch_ad - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
router.post('/watch_ad', async (req, res) => {
  try {
    const { telegramId } = req.body;
    
    if (!telegramId) {
      return res.status(400).json({ 
        success: false, 
        error: 'telegramId is required' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    const playerResult = await pool.query(
      'SELECT telegram_id, quest_ad_views, quest_ad_last_reset FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    const player = playerResult.rows[0];
    const currentTime = new Date();
    const today = currentTime.toDateString();
    const lastResetDate = player.quest_ad_last_reset ? new Date(player.quest_ad_last_reset).toDateString() : null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)
    let questAdViews = player.quest_ad_views || 0;
    if (lastResetDate !== today) {
      questAdViews = 0;
      console.log(`üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (5 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    if (questAdViews >= 5) {
      return res.status(400).json({ 
        success: false, 
        error: '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω' 
      });
    }
    
    const newQuestAdViews = questAdViews + 1;
    const reward = 10; // 10 CCC –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('BEGIN');
    
    try {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∫–ª–∞–º—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º CCC
      await pool.query(`
        UPDATE players 
        SET quest_ad_views = $1, 
            quest_ad_last_reset = $2,
            ccc = ccc + $3
        WHERE telegram_id = $4
      `, [newQuestAdViews, currentTime, reward, telegramId]);
      
      await pool.query('COMMIT');
      
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–ª–∞–º—É –∑–∞–¥–∞–Ω–∏–π ${newQuestAdViews}/5, –ø–æ–ª—É—á–∏–ª ${reward} CCC`);
      
      res.json({
        success: true,
        message: '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É –ø–æ–ª—É—á–µ–Ω–∞',
        quest_ad_views: newQuestAdViews,
        reward_ccc: reward
      });
      
    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// POST /api/quests/complete - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
router.post('/complete', async (req, res) => {
  try {
    const { telegramId, questId } = req.body;
    
    if (!telegramId || !questId) {
      return res.status(400).json({ error: 'telegramId and questId are required' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    const existingResult = await pool.query(
      'SELECT * FROM player_quests WHERE telegram_id = $1 AND quest_id = $2',
      [telegramId, questId]
    );
    
    if (existingResult.rows.length > 0) {
      return res.status(400).json({ error: 'Quest already completed' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
    const questResult = await pool.query(
      'SELECT reward_cs, quest_type FROM quests WHERE quest_id = $1',
      [questId]
    );
    
    if (questResult.rows.length === 0) {
      return res.status(404).json({ error: 'Quest not found' });
    }
    
    const { reward_cs: rewardCs, quest_type: questType } = questResult.rows[0];
    
    // –î–ª—è partner_link –∑–∞–¥–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    if (questType === 'partner_link') {
      const playerResult = await pool.query(
        'SELECT quest_link_states FROM players WHERE telegram_id = $1',
        [telegramId]
      );
      
      if (playerResult.rows.length === 0) {
        return res.status(404).json({ error: 'Player not found' });
      }
      
      const questLinkStates = playerResult.rows[0].quest_link_states || {};
      const linkState = questLinkStates[questId.toString()];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 30 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –∫–ª–∏–∫–∞
      if (!linkState || !linkState.clicked_at) {
        return res.status(400).json({ error: 'Link was not clicked yet' });
      }
      
      const clickedTime = new Date(linkState.clicked_at);
      const currentTime = new Date();
      const elapsedSeconds = Math.floor((currentTime - clickedTime) / 1000);
      
      if (elapsedSeconds < 30) {
        return res.status(400).json({ 
          error: `Link timer not completed yet. Wait ${30 - elapsedSeconds} more seconds.`,
          remainingSeconds: 30 - elapsedSeconds
        });
      }
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('BEGIN');
    
    try {
      // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
      await pool.query(
        'INSERT INTO player_quests (telegram_id, quest_id, completed, reward_cs) VALUES ($1, $2, true, $3)',
        [telegramId, questId, rewardCs]
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º CS –∏–≥—Ä–æ–∫—É
      await pool.query(
        'UPDATE players SET cs = cs + $1 WHERE telegram_id = $2',
        [rewardCs, telegramId]
      );
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ partner_link
      if (questType === 'partner_link') {
        const playerResult = await pool.query(
          'SELECT quest_link_states FROM players WHERE telegram_id = $1',
          [telegramId]
        );
        
        if (playerResult.rows.length > 0) {
          const questLinkStates = playerResult.rows[0].quest_link_states || {};
          
          // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ, –∞ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          questLinkStates[questId.toString()] = {
            ...questLinkStates[questId.toString()],
            completed: true,
            completed_at: new Date().toISOString()
          };
          
          await pool.query(
            'UPDATE players SET quest_link_states = $1 WHERE telegram_id = $2',
            [JSON.stringify(questLinkStates), telegramId]
          );
          
          console.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ ${questId} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ`);
        }
      }
      
      await pool.query('COMMIT');
      
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ ${questId}, –ø–æ–ª—É—á–∏–ª ${rewardCs} CS`);
      res.json({ success: true, reward_cs: rewardCs });
      
    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('Error completing quest:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –í–†–ï–ú–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò - —É–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
router.get('/debug/:telegramId/:questId', async (req, res) => {
  try {
    const { telegramId, questId } = req.params;
    
    const result = await pool.query(
      'SELECT quest_link_states FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (result.rows.length === 0) {
      return res.json({ error: 'Player not found' });
    }
    
    const questLinkStates = result.rows[0].quest_link_states || {};
    const linkState = questLinkStates[questId.toString()];
    
    if (!linkState) {
      return res.json({ 
        message: 'No link state found',
        allStates: questLinkStates
      });
    }
    
    const clickedTime = new Date(linkState.clicked_at);
    const currentTime = new Date();
    const elapsedSeconds = Math.floor((currentTime - clickedTime) / 1000);
    
    res.json({
      questId: questId,
      linkState: linkState,
      clickedTime: clickedTime.toISOString(),
      currentTime: currentTime.toISOString(),
      elapsedSeconds: elapsedSeconds,
      canClaim: elapsedSeconds >= 30,
      allStates: questLinkStates
    });
    
  } catch (error) {
    console.error('Debug error:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;