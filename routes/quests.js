const express = require('express');
const router = express.Router();
const pool = require('../db');

// GET /api/quests/:telegramId - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
router.get('/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –µ–≥–æ registration_language
    const playerResult = await pool.query(
      'SELECT registration_language FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    const registrationLanguage = playerResult.rows[0].registration_language || 'en';
    console.log(`üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}, —è–∑—ã–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registrationLanguage}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    const questsResult = await pool.query(`
      SELECT quest_id, quest_name, quest_type, description, reward_cs, quest_data, is_active
      FROM quests 
      WHERE is_active = true 
      AND (
        quest_data IS NULL 
        OR quest_data->>'language' IS NULL 
        OR quest_data->>'language' = $1
      )
      ORDER BY quest_id
    `, [registrationLanguage]);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    const completedResult = await pool.query(
      'SELECT quest_id FROM player_quests WHERE telegram_id = $1 AND completed = true',
      [telegramId]
    );
    
    const completedQuestIds = completedResult.rows.map(row => row.quest_id);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const quests = questsResult.rows.map(quest => ({
      ...quest,
      completed: completedQuestIds.includes(quest.quest_id)
    }));
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${quests.length} –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}`);
    res.json({ success: true, quests });
    
  } catch (error) {
    console.error('Error fetching quests:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/quests/watch_ad - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
router.post('/watch_ad', async (req, res) => {
  try {
    const { telegramId } = req.body;
    
    if (!telegramId) {
      return res.status(400).json({ 
        success: false, 
        error: 'telegramId is required' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    const playerResult = await pool.query(
      'SELECT telegram_id, quest_ad_views FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    const player = playerResult.rows[0];
    const questAdViews = player.quest_ad_views || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (5 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    if (questAdViews >= 5) {
      return res.status(400).json({ 
        success: false, 
        error: '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã –∏—Å—á–µ—Ä–ø–∞–Ω' 
      });
    }
    
    const newQuestAdViews = questAdViews + 1;
    const reward = 10; // 10 CCC –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('BEGIN');
    
    try {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∫–ª–∞–º—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º CCC
      await pool.query(`
        UPDATE players 
        SET quest_ad_views = $1, ccc = ccc + $2
        WHERE telegram_id = $3
      `, [newQuestAdViews, reward, telegramId]);
      
      await pool.query('COMMIT');
      
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–ª–∞–º—É –∑–∞–¥–∞–Ω–∏–π ${newQuestAdViews}/5, –ø–æ–ª—É—á–∏–ª ${reward} CCC`);
      
      res.json({
        success: true,
        message: '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É –ø–æ–ª—É—á–µ–Ω–∞',
        quest_ad_views: newQuestAdViews,
        reward_ccc: reward
      });
      
    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// POST /api/quests/complete - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
router.post('/complete', async (req, res) => {
  try {
    const { telegramId, questId } = req.body;
    
    if (!telegramId || !questId) {
      return res.status(400).json({ error: 'telegramId and questId are required' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    const existingResult = await pool.query(
      'SELECT * FROM player_quests WHERE telegram_id = $1 AND quest_id = $2',
      [telegramId, questId]
    );
    
    if (existingResult.rows.length > 0) {
      return res.status(400).json({ error: 'Quest already completed' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
    const questResult = await pool.query(
      'SELECT reward_cs FROM quests WHERE quest_id = $1',
      [questId]
    );
    
    if (questResult.rows.length === 0) {
      return res.status(404).json({ error: 'Quest not found' });
    }
    
    const rewardCs = questResult.rows[0].reward_cs;
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('BEGIN');
    
    try {
      // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
      await pool.query(
        'INSERT INTO player_quests (telegram_id, quest_id, completed, reward_cs) VALUES ($1, $2, true, $3)',
        [telegramId, questId, rewardCs]
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º CS –∏–≥—Ä–æ–∫—É
      await pool.query(
        'UPDATE players SET cs = cs + $1 WHERE telegram_id = $2',
        [rewardCs, telegramId]
      );
      
      await pool.query('COMMIT');
      
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ ${questId}, –ø–æ–ª—É—á–∏–ª ${rewardCs} CS`);
      res.json({ success: true, reward_cs: rewardCs });
      
    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('Error completing quest:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;