const express = require('express');
const router = express.Router();
const pool = require('../db');

// GET /api/quests/:telegramId - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
// –í quests.js - –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é GET /api/quests/:telegramId
// –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±—Ä–æ—Å–∞ —Ä–µ–∫–ª–∞–º—ã:

router.get('/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏
    const playerResult = await pool.query(
      'SELECT registration_language, quest_link_states, quest_ad_views, quest_ad_last_reset FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    const player = playerResult.rows[0];
    const registrationLanguage = player.registration_language || 'en';
    const questLinkStates = player.quest_link_states || {};
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–∫–ª–∞–º—ã
    const currentTime = new Date();
    const today = currentTime.toDateString();
    
    let questAdViews = player.quest_ad_views || 0;
    let needsReset = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ —Å–±—Ä–æ—Å
    if (!player.quest_ad_last_reset) {
      // –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ —Å–±—Ä–æ—Å–∞
      needsReset = true;
      console.log(`üîÑ –ü–µ—Ä–≤—ã–π —Å–±—Ä–æ—Å —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}`);
    } else {
      const lastResetDate = new Date(player.quest_ad_last_reset).toDateString();
      if (lastResetDate !== today) {
        needsReset = true;
        console.log(`üîÑ –°–±—Ä–æ—Å —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId} (${lastResetDate} ‚Üí ${today})`);
      }
    }
    
    // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–±—Ä–æ—Å - –≤—ã–ø–æ–ª–Ω—è–µ–º
    if (needsReset) {
      questAdViews = 0;
      
      await pool.query(
        'UPDATE players SET quest_ad_views = 0, quest_ad_last_reset = $1 WHERE telegram_id = $2',
        [currentTime, telegramId]
      );
      
      console.log(`‚úÖ –°–±—Ä–æ—Å —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    const questsResult = await pool.query(`
      SELECT quest_id, quest_name, quest_type, description, reward_cs, quest_data, is_active
      FROM quests 
      WHERE is_active = true 
      AND (
        quest_data IS NULL 
        OR quest_data->>'language' IS NULL 
        OR quest_data->>'language' = $1
      )
      ORDER BY quest_id
    `, [registrationLanguage]);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    const completedResult = await pool.query(
      'SELECT quest_id FROM player_quests WHERE telegram_id = $1 AND completed = true',
      [telegramId]
    );
    
    const completedQuestIds = completedResult.rows.map(row => row.quest_id);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    const updatedLinkStates = { ...questLinkStates };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    Object.keys(updatedLinkStates).forEach(questId => {
      const state = updatedLinkStates[questId];
      if (state.clicked_at) {
        const clickedTime = new Date(state.clicked_at);
        const elapsedSeconds = Math.floor((currentTime - clickedTime) / 1000);
        const isCompleted = elapsedSeconds >= 30;
        
        updatedLinkStates[questId] = {
          ...state,
          timer_remaining: Math.max(0, 30 - elapsedSeconds),
          can_claim: isCompleted
        };
      }
    });
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const quests = questsResult.rows.map(quest => ({
      ...quest,
      completed: completedQuestIds.includes(quest.quest_id)
    }));
    
    console.log(`üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId} (${quests.length} –Ω–∞–π–¥–µ–Ω–æ, —è–∑—ã–∫: ${registrationLanguage}), —Ä–µ–∫–ª–∞–º–∞ –∑–∞–¥–∞–Ω–∏–π: ${questAdViews}/5`);
    
    // ‚úÖ –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π quest_ad_views
    res.json({ 
      success: true, 
      quests,
      quest_ad_views: questAdViews // –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    });
    
  } catch (error) {
    console.error('Error fetching quests:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});



// –î–æ–±–∞–≤–ª—è–µ–º –≤ quests.js - –¢–ï–°–¢–û–í–´–ô endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±—Ä–æ—Å–∞
// (—É–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

// POST /api/quests/test-daily-reset - –¢–ï–°–¢–û–í–´–ô —Å–±—Ä–æ—Å —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π
router.post('/test-daily-reset', async (req, res) => {
  try {
    const { telegramId, adminId } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
    if (!adminId || adminId !== '1222791281') {
      return res.status(403).json({ error: 'Access denied - admin only' });
    }
    
    console.log('üß™ –¢–ï–°–¢–û–í–´–ô —Å–±—Ä–æ—Å —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω –∞–¥–º–∏–Ω–æ–º:', adminId);
    
    if (telegramId) {
      // –°–±—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      const beforeResult = await pool.query(
        'SELECT telegram_id, quest_ad_views, quest_ad_last_reset FROM players WHERE telegram_id = $1',
        [telegramId]
      );
      
      if (beforeResult.rows.length === 0) {
        return res.status(404).json({ error: 'Player not found' });
      }
      
      const before = beforeResult.rows[0];
      
      await pool.query(
        'UPDATE players SET quest_ad_views = 0, quest_ad_last_reset = NOW() WHERE telegram_id = $1',
        [telegramId]
      );
      
      const afterResult = await pool.query(
        'SELECT telegram_id, quest_ad_views, quest_ad_last_reset FROM players WHERE telegram_id = $1',
        [telegramId]
      );
      
      const after = afterResult.rows[0];
      
      res.json({
        success: true,
        message: 'Test reset completed for specific player',
        before: before,
        after: after
      });
      
    } else {
      // –°–±—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫–∞–∫ –≤ cron job)
      const beforeStats = await pool.query(
        'SELECT COUNT(*) as total, SUM(quest_ad_views) as total_views FROM players WHERE quest_ad_views > 0'
      );
      
      const resetResult = await pool.query(`
        UPDATE players 
        SET quest_ad_views = 0, 
            quest_ad_last_reset = NOW()
        WHERE quest_ad_views > 0 
           OR quest_ad_last_reset::date < CURRENT_DATE
           OR quest_ad_last_reset IS NULL
      `);
      
      const afterStats = await pool.query(
        'SELECT COUNT(*) as total_with_views FROM players WHERE quest_ad_views > 0'
      );
      
      res.json({
        success: true,
        message: 'Test reset completed for all players',
        before_stats: beforeStats.rows[0],
        reset_count: resetResult.rowCount,
        after_stats: afterStats.rows[0]
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞:', error);
    res.status(500).json({ 
      error: 'Test reset failed', 
      details: error.message 
    });
  }
});

// GET /api/quests/check-reset-status/:telegramId - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–±—Ä–æ—Å–∞
router.get('/check-reset-status/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    const result = await pool.query(
      'SELECT telegram_id, quest_ad_views, quest_ad_last_reset, first_name FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    const player = result.rows[0];
    const currentTime = new Date();
    const today = currentTime.toDateString();
    
    let resetStatus = 'up_to_date';
    let shouldReset = false;
    
    if (!player.quest_ad_last_reset) {
      resetStatus = 'never_reset';
      shouldReset = true;
    } else {
      const lastResetDate = new Date(player.quest_ad_last_reset).toDateString();
      if (lastResetDate !== today) {
        resetStatus = 'needs_reset';
        shouldReset = true;
      }
    }
    
    res.json({
      success: true,
      player: {
        telegram_id: player.telegram_id,
        name: player.first_name,
        quest_ad_views: player.quest_ad_views,
        quest_ad_last_reset: player.quest_ad_last_reset
      },
      current_time: currentTime.toISOString(),
      today: today,
      last_reset_date: player.quest_ad_last_reset ? new Date(player.quest_ad_last_reset).toDateString() : null,
      reset_status: resetStatus,
      should_reset: shouldReset
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ error: 'Check failed', details: error.message });
  }
});





// POST /api/quests/click_link - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞–¥–∞–Ω–∏—è
router.post('/click_link', async (req, res) => {
  try {
    const { telegramId, questId, quest_key } = req.body;

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (questId) –∏ –Ω–æ–≤—ã–π (quest_key)
    const questIdentifier = quest_key || questId;

    if (!telegramId || !questIdentifier) {
      return res.status(400).json({
        success: false,
        error: 'telegramId and (questId or quest_key) are required'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    const playerResult = await pool.query(
      'SELECT quest_link_states FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    const questLinkStates = playerResult.rows[0].quest_link_states || {};
    const currentTime = new Date();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º questIdentifier –∫–∞–∫ –∫–ª—é—á)
    questLinkStates[questIdentifier.toString()] = {
      clicked_at: currentTime.toISOString(),
      timer_remaining: 30,
      can_claim: false
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await pool.query(
      'UPDATE players SET quest_link_states = $1 WHERE telegram_id = $2',
      [JSON.stringify(questLinkStates), telegramId]
    );

    console.log(`üîó –ò–≥—Ä–æ–∫ ${telegramId} –∫–ª–∏–∫–Ω—É–ª –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞–¥–∞–Ω–∏—è ${questIdentifier}`);

    res.json({
      success: true,
      message: '–°—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      link_state: questLinkStates[questIdentifier.toString()]
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// POST /api/quests/watch_ad - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
router.post('/watch_ad', async (req, res) => {
  try {
    const { telegramId } = req.body;
    
    if (!telegramId) {
      return res.status(400).json({ 
        success: false, 
        error: 'telegramId is required' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    const playerResult = await pool.query(
      'SELECT telegram_id, quest_ad_views, quest_ad_last_reset FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    const player = playerResult.rows[0];
    const currentTime = new Date();
    const today = currentTime.toDateString();
    const lastResetDate = player.quest_ad_last_reset ? new Date(player.quest_ad_last_reset).toDateString() : null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ (–Ω–æ–≤—ã–π –¥–µ–Ω—å)
    let questAdViews = player.quest_ad_views || 0;
    if (lastResetDate !== today) {
      questAdViews = 0;
      console.log(`üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (5 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    if (questAdViews >= 5) {
      return res.status(400).json({ 
        success: false, 
        error: '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω' 
      });
    }
    
    const newQuestAdViews = questAdViews + 1;
    const reward = 10; // 10 CCC –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('BEGIN');
    
    try {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∫–ª–∞–º—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º CCC
      await pool.query(`
        UPDATE players 
        SET quest_ad_views = $1, 
            quest_ad_last_reset = $2,
            ccc = ccc + $3
        WHERE telegram_id = $4
      `, [newQuestAdViews, currentTime, reward, telegramId]);
      
      await pool.query('COMMIT');
      
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–ª–∞–º—É –∑–∞–¥–∞–Ω–∏–π ${newQuestAdViews}/5, –ø–æ–ª—É—á–∏–ª ${reward} CCC`);
      
      res.json({
        success: true,
        message: '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É –ø–æ–ª—É—á–µ–Ω–∞',
        quest_ad_views: newQuestAdViews,
        reward_ccc: reward
      });
      
    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞–¥–∞–Ω–∏–π:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// POST /api/quests/complete - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
router.post('/complete', async (req, res) => {
  try {
    const { telegramId, questId, quest_key } = req.body;

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (questId) –∏ –Ω–æ–≤—ã–π (quest_key)
    const questIdentifier = quest_key || questId;

    if (!telegramId || !questIdentifier) {
      return res.status(400).json({ error: 'telegramId and (questId or quest_key) are required' });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ (ID –∏–ª–∏ key)
    const isQuestKey = !!quest_key;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    let existingResult;
    if (isQuestKey) {
      existingResult = await pool.query(
        'SELECT * FROM player_quests WHERE telegram_id = $1 AND quest_key = $2',
        [telegramId, questIdentifier]
      );
    } else {
      existingResult = await pool.query(
        'SELECT * FROM player_quests WHERE telegram_id = $1 AND quest_id = $2',
        [telegramId, questIdentifier]
      );
    }

    if (existingResult.rows.length > 0) {
      return res.status(400).json({ error: 'Quest already completed' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ (–∏–∑ –Ω–æ–≤–æ–π –∏–ª–∏ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã)
    let questResult, rewardCs, questType, dbQuestId;

    if (isQuestKey) {
      // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ - quest_templates
      questResult = await pool.query(
        'SELECT id, reward_cs, quest_type FROM quest_templates WHERE quest_key = $1',
        [questIdentifier]
      );

      if (questResult.rows.length === 0) {
        return res.status(404).json({ error: 'Quest not found' });
      }

      dbQuestId = questResult.rows[0].id;
      rewardCs = questResult.rows[0].reward_cs;
      questType = questResult.rows[0].quest_type;
    } else {
      // –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ - quests
      questResult = await pool.query(
        'SELECT reward_cs, quest_type FROM quests WHERE quest_id = $1',
        [questIdentifier]
      );

      if (questResult.rows.length === 0) {
        return res.status(404).json({ error: 'Quest not found' });
      }

      dbQuestId = questIdentifier;
      rewardCs = questResult.rows[0].reward_cs;
      questType = questResult.rows[0].quest_type;
    }
    
    // –î–ª—è partner_link –∑–∞–¥–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    if (questType === 'partner_link') {
      const playerResult = await pool.query(
        'SELECT quest_link_states FROM players WHERE telegram_id = $1',
        [telegramId]
      );
      
      if (playerResult.rows.length === 0) {
        return res.status(404).json({ error: 'Player not found' });
      }
      
      const questLinkStates = playerResult.rows[0].quest_link_states || {};
      const linkState = questLinkStates[questIdentifier.toString()];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 30 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –∫–ª–∏–∫–∞
      if (!linkState || !linkState.clicked_at) {
        return res.status(400).json({ error: 'Link was not clicked yet' });
      }

      const clickedTime = new Date(linkState.clicked_at);
      const currentTime = new Date();
      const elapsedSeconds = Math.floor((currentTime - clickedTime) / 1000);

      if (elapsedSeconds < 30) {
        return res.status(400).json({
          error: `Link timer not completed yet. Wait ${30 - elapsedSeconds} more seconds.`,
          remainingSeconds: 30 - elapsedSeconds
        });
      }
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('BEGIN');

    try {
      // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ (—Å quest_key –µ—Å–ª–∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
      if (isQuestKey) {
        await pool.query(
          'INSERT INTO player_quests (telegram_id, quest_id, quest_key, completed, reward_cs) VALUES ($1, $2, $3, true, $4)',
          [telegramId, dbQuestId, questIdentifier, rewardCs]
        );
      } else {
        await pool.query(
          'INSERT INTO player_quests (telegram_id, quest_id, completed, reward_cs) VALUES ($1, $2, true, $3)',
          [telegramId, questId, rewardCs]
        );
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º CS –∏–≥—Ä–æ–∫—É
      await pool.query(
        'UPDATE players SET cs = cs + $1 WHERE telegram_id = $2',
        [rewardCs, telegramId]
      );
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ partner_link
      if (questType === 'partner_link') {
        const playerResult = await pool.query(
          'SELECT quest_link_states FROM players WHERE telegram_id = $1',
          [telegramId]
        );
        
        if (playerResult.rows.length > 0) {
          const questLinkStates = playerResult.rows[0].quest_link_states || {};

          // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ, –∞ –Ω–µ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          questLinkStates[questIdentifier.toString()] = {
            ...questLinkStates[questIdentifier.toString()],
            completed: true,
            completed_at: new Date().toISOString()
          };

          await pool.query(
            'UPDATE players SET quest_link_states = $1 WHERE telegram_id = $2',
            [JSON.stringify(questLinkStates), telegramId]
          );

          console.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ ${questIdentifier} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ`);
        }
      }

      await pool.query('COMMIT');

      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${telegramId} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ ${questIdentifier}, –ø–æ–ª—É—á–∏–ª ${rewardCs} CS`);
      res.json({ success: true, reward_cs: rewardCs });
      
    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('Error completing quest:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –≤ quests.js - –ù–û–í–´–ô API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π

// GET /api/quests/v2/:telegramId - –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å—é
router.get('/v2/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    const { force_language } = req.query; // –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫
    
    console.log(`üÜï V2 API: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏
    const playerResult = await pool.query(
      'SELECT registration_language, language, quest_link_states, quest_ad_views, quest_ad_last_reset FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    const player = playerResult.rows[0];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–´–ô —è–∑—ã–∫ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–æ–≤ (–í–ê–ñ–ù–û!)
    const registrationLanguage = player.registration_language || player.language || 'en';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –ü–ï–†–ï–í–û–î–û–í (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –∏–≥—Ä–æ–∫–æ–º)
    const translationLanguage = force_language || player.language || registrationLanguage;

    console.log(`üåç –Ø–∑—ã–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Ñ–∏–ª—å—Ç—Ä –∫–≤–µ—Å—Ç–æ–≤): ${registrationLanguage}`);
    console.log(`üåç –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${translationLanguage} ${force_language ? '(–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)' : ''}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å —Ä–µ–∫–ª–∞–º—ã (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º API)
    const currentTime = new Date();
    const today = currentTime.toDateString();
    let questAdViews = player.quest_ad_views || 0;
    let needsReset = false;
    
    if (!player.quest_ad_last_reset) {
      needsReset = true;
    } else {
      const lastResetDate = new Date(player.quest_ad_last_reset).toDateString();
      if (lastResetDate !== today) {
        needsReset = true;
      }
    }
    
    if (needsReset) {
      questAdViews = 0;
      await pool.query(
        'UPDATE players SET quest_ad_views = 0, quest_ad_last_reset = $1 WHERE telegram_id = $2',
        [currentTime, telegramId]
      );
      console.log(`üîÑ V2: –°–±—Ä–æ—Å —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId}`);
    }
    
    // üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    const questsResult = await pool.query(`
      SELECT
        qt.id,
        qt.quest_key,
        qt.quest_type,
        qt.reward_cs,
        qt.quest_data,
        qt.target_languages,
        qt.is_active,
        qt.sort_order,
        -- –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ ($1 = translationLanguage)
        COALESCE(
          qtr_user.quest_name,
          qtr_en.quest_name,
          qt.quest_key
        ) as quest_name,
        COALESCE(
          qtr_user.description,
          qtr_en.description,
          'No description available'
        ) as description,
        COALESCE(
          qtr_user.manual_check_user_instructions,
          qtr_en.manual_check_user_instructions
        ) as manual_check_user_instructions,
        -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        CASE
          WHEN qtr_user.language_code IS NOT NULL THEN qtr_user.language_code
          WHEN qtr_en.language_code IS NOT NULL THEN qtr_en.language_code
          ELSE 'no_translation'
        END as used_language
      FROM quest_templates qt
      -- –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è UI)
      LEFT JOIN quest_translations qtr_user ON qt.quest_key = qtr_user.quest_key
        AND qtr_user.language_code = $1
      -- –†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
      LEFT JOIN quest_translations qtr_en ON qt.quest_key = qtr_en.quest_key
        AND qtr_en.language_code = 'en'
      WHERE qt.is_active = true
        AND (
          qt.target_languages IS NULL
          OR $2 = ANY(qt.target_languages)
        )
      ORDER BY qt.sort_order, qt.id
    `, [translationLanguage, registrationLanguage]);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    const completedResult = await pool.query(
      'SELECT quest_id, quest_key FROM player_quests WHERE telegram_id = $1 AND completed = true',
      [telegramId]
    );
    
    const completedQuestIds = completedResult.rows.map(row => row.quest_id);
    const completedQuestKeys = completedResult.rows.map(row => row.quest_key).filter(Boolean);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º API)
    const questLinkStates = player.quest_link_states || {};
    const updatedLinkStates = { ...questLinkStates };
    
    Object.keys(updatedLinkStates).forEach(questId => {
      const state = updatedLinkStates[questId];
      if (state.clicked_at) {
        const clickedTime = new Date(state.clicked_at);
        const elapsedSeconds = Math.floor((currentTime - clickedTime) / 1000);
        const isCompleted = elapsedSeconds >= 30;
        
        updatedLinkStates[questId] = {
          ...state,
          timer_remaining: Math.max(0, 30 - elapsedSeconds),
          can_claim: isCompleted
        };
      }
    });
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    const quests = questsResult.rows.map(quest => ({
      // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
      quest_id: quest.id,
      quest_name: quest.quest_name,
      quest_type: quest.quest_type,
      description: quest.description,
      reward_cs: quest.reward_cs,
      quest_data: quest.quest_data,
      completed: completedQuestIds.includes(quest.id) || completedQuestKeys.includes(quest.quest_key),
      
      // –ù–æ–≤—ã–µ –ø–æ–ª—è
      quest_key: quest.quest_key,
      target_languages: quest.target_languages,
      used_language: quest.used_language,
      manual_check_user_instructions: quest.manual_check_user_instructions
    }));
    
    const stats = {
      total_quests: quests.length,
      completed_quests: quests.filter(q => q.completed).length,
      available_quests: quests.filter(q => !q.completed).length,
      by_type: quests.reduce((acc, quest) => {
        acc[quest.quest_type] = (acc[quest.quest_type] || 0) + 1;
        return acc;
      }, {}),
      by_language: quests.reduce((acc, quest) => {
        acc[quest.used_language] = (acc[quest.used_language] || 0) + 1;
        return acc;
      }, {})
    };
    
    console.log(`üéØ V2: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${quests.length} –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegramId} (—è–∑—ã–∫: ${translationLanguage})`);
    console.log(`üìä V2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, stats);

    res.json({
      success: true,
      version: 'v2',
      user_language: translationLanguage,
      registration_language: registrationLanguage,
      quests,
      quest_ad_views: questAdViews,
      stats
    });
    
  } catch (error) {
    console.error('‚ùå V2 Error fetching quests:', error);
    res.status(500).json({ error: 'Internal server error', details: error.message });
  }
});

// GET /api/quests/test-languages/:telegramId - —Ç–µ—Å—Ç –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
router.get('/test-languages/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    const supportedLanguages = ['en', 'ru', 'es', 'fr', 'de', 'zh', 'ja'];
    
    const results = {};
    
    for (const lang of supportedLanguages) {
      try {
        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ V2 API —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —è–∑—ã–∫–æ–º
        const questsResult = await pool.query(`
          SELECT 
            qt.quest_key,
            qt.quest_type,
            qt.target_languages,
            COALESCE(
              qtr_user.quest_name, 
              qtr_en.quest_name, 
              qt.quest_key
            ) as quest_name,
            CASE 
              WHEN qtr_user.language_code IS NOT NULL THEN qtr_user.language_code
              WHEN qtr_en.language_code IS NOT NULL THEN qtr_en.language_code
              ELSE 'no_translation'
            END as used_language
          FROM quest_templates qt
          LEFT JOIN quest_translations qtr_user ON qt.quest_key = qtr_user.quest_key 
            AND qtr_user.language_code = $1
          LEFT JOIN quest_translations qtr_en ON qt.quest_key = qtr_en.quest_key 
            AND qtr_en.language_code = 'en'
          WHERE qt.is_active = true
            AND (
              qt.target_languages IS NULL 
              OR $1 = ANY(qt.target_languages)
            )
          ORDER BY qt.sort_order
        `, [lang]);
        
        results[lang] = {
          total_quests: questsResult.rows.length,
          quests: questsResult.rows.map(q => ({
            quest_key: q.quest_key,
            quest_name: q.quest_name,
            used_language: q.used_language,
            target_languages: q.target_languages
          }))
        };
        
      } catch (langError) {
        results[lang] = { error: langError.message };
      }
    }
    
    res.json({
      success: true,
      player_id: telegramId,
      language_test_results: results
    });
    
  } catch (error) {
    console.error('‚ùå Error testing languages:', error);
    res.status(500).json({ error: 'Language test failed', details: error.message });
  }
});

// –í–†–ï–ú–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò - —É–¥–∞–ª–∏—Ç–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
router.get('/debug/:telegramId/:questId', async (req, res) => {
  try {
    const { telegramId, questId } = req.params;
    
    const result = await pool.query(
      'SELECT quest_link_states FROM players WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (result.rows.length === 0) {
      return res.json({ error: 'Player not found' });
    }
    
    const questLinkStates = result.rows[0].quest_link_states || {};
    const linkState = questLinkStates[questId.toString()];
    
    if (!linkState) {
      return res.json({ 
        message: 'No link state found',
        allStates: questLinkStates
      });
    }
    
    const clickedTime = new Date(linkState.clicked_at);
    const currentTime = new Date();
    const elapsedSeconds = Math.floor((currentTime - clickedTime) / 1000);
    
    res.json({
      questId: questId,
      linkState: linkState,
      clickedTime: clickedTime.toISOString(),
      currentTime: currentTime.toISOString(),
      elapsedSeconds: elapsedSeconds,
      canClaim: elapsedSeconds >= 30,
      allStates: questLinkStates
    });
    
  } catch (error) {
    console.error('Debug error:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;