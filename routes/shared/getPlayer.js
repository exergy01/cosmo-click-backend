// backend/routes/shared/getPlayer.js

const pool = require('../../db');

async function getPlayer(telegramId) {
  try {
    const playerResult = await pool.query('SELECT * FROM players WHERE telegram_id = $1', [telegramId]);
    let player = playerResult.rows[0];

    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ó–î–ï–°–¨ ---
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null.
    // –§—Ä–æ–Ω—Ç–µ–Ω–¥ (usePlayerData.ts) –∑–∞—Ç–µ–º –≤—ã–∑–æ–≤–µ—Ç POST /api/player/create
    // –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    if (!player) {
      return null;
    }
    // --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ù–ß–ò–í–ê–ï–¢–°–Ø –ó–î–ï–°–¨ ---

    // –î–∞–ª–µ–µ –∏–¥–µ—Ç –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ù–ï –ë–´–õ –∏–∑–º–µ–Ω–µ–Ω.
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω, –º—ã –º–æ–∂–µ–º –æ–±–æ–≥–∞—Ç–∏—Ç—å –µ–≥–æ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–æ–±—ã—á–∏.

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º—ã (—Å–∏—Å—Ç–µ–º—ã 1-7)
    const miningSpeedData = {};
    const maxCargoCapacityData = {};

    for (let system = 1; system <= 7; system++) {
      const hasCargo = player.cargo_levels && player.cargo_levels.some(c => c.system === system && c.level > 0);
      const hasAsteroid = player.asteroid_levels && player.asteroid_levels.some(a => a.system === system && a.level > 0);
      const hasDrone = player.drone_levels && player.drone_levels.some(d => d.system === system && d.level > 0);

      // –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±—ã—á–∏
      const systemDrones = player.drone_levels.filter(d => d.system === system && d.level > 0);
      const totalDroneSpeed = systemDrones.reduce((speed, drone) => {
        if (system === 4) {
          return speed + (drone.csPerDay || 0);
        } else {
          return speed + (drone.cccPerDay || 0);
        }
      }, 0);
      
      // üéâ –ë–û–ù–£–°: +1% –∑–∞ –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥—Ä–æ–Ω–æ–≤ (15 —à—Ç—É–∫) –¥–ª—è —Å–∏—Å—Ç–µ–º 1-4
      const droneCount = systemDrones.length;
      const bonusMultiplier = (system >= 1 && system <= 4 && droneCount === 15) ? 1.01 : 1;
      
      const speedPerSecond = (totalDroneSpeed * bonusMultiplier) / (24 * 3600);
      miningSpeedData[system] = speedPerSecond > 0 ? speedPerSecond : 0;
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ—Ä–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£–Æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ä–≥–æ, –∞ –Ω–µ —Ç–µ–∫—É—â—É—é
    const systemCargo = player.cargo_levels.filter(c => c.system === system);
    const maxCargoCapacity = systemCargo.reduce((max, c) => Math.max(max, c.capacity || 0), 0);
    maxCargoCapacityData[system] = Number(maxCargoCapacity);

    console.log(`üîß getPlayer —Å–∏—Å—Ç–µ–º–∞ ${system}: –∫–∞—Ä–≥–æ –æ–±—ä–µ–∫—Ç—ã =`, systemCargo, `–º–∞–∫—Å–∏–º—É–º = ${maxCargoCapacity}`);

    if (!hasCargo || !hasAsteroid || !hasDrone) {
      // –ò–≥—Ä–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –º–∞–π–Ω–∏–Ω–≥—É –≤ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ
      miningSpeedData[system] = 0;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ –æ–±—ä–µ–∫—Ç—É –∏–≥—Ä–æ–∫–∞
    player.mining_speed = miningSpeedData;
    player.max_cargo_capacity = maxCargoCapacityData;
    
    return player;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getPlayer:', error);
    throw error;
  }
}

module.exports = { getPlayer };