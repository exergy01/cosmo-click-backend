const pool = require('../../db');

async function getPlayer(telegramId) {
  console.log(`üîç getPlayer –≤—ã–∑–≤–∞–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${telegramId}, —Ç–∏–ø: ${typeof telegramId}`);
  
  // –ü—Ä–∏–≤–æ–¥–∏–º telegramId –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const safeTelegramId = String(telegramId);
  console.log(`üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º safeTelegramId: ${safeTelegramId}`);
  
  const playerResult = await pool.query('SELECT * FROM players WHERE telegram_id = $1', [safeTelegramId]);
  let player = playerResult.rows[0];

  if (!player) {
    console.log(`‚ùå getPlayer: –∏–≥—Ä–æ–∫ ${safeTelegramId} –ù–ï –ù–ê–ô–î–ï–ù - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null`);
    console.log(`‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é: ${JSON.stringify(playerResult.rows)}`);
    console.log(`‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ endpoint create-with-referrer`);
    return null; // üî• –ù–ï –°–û–ó–î–ê–ï–ú –ò–ì–†–û–ö–ê - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }

  console.log(`‚úÖ getPlayer: –∏–≥—Ä–æ–∫ ${safeTelegramId} –Ω–∞–π–¥–µ–Ω, referrer_id = ${player.referrer_id}`);

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã referrals
  try {
    const referralsCountResult = await pool.query(
      'SELECT COUNT(*) as count FROM referrals WHERE referrer_id = $1', 
      [safeTelegramId]
    );
    const actualCount = parseInt(referralsCountResult.rows[0].count);
    
    // –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –≤ players –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è - –æ–±–Ω–æ–≤–ª—è–µ–º
    if (player.referrals_count !== actualCount) {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${player.referrals_count} ‚Üí ${actualCount}`);
      await pool.query(
        'UPDATE players SET referrals_count = $1 WHERE telegram_id = $2', 
        [actualCount, safeTelegramId]
      );
      player.referrals_count = actualCount;
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', err);
  }

  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  player.asteroids = player.asteroids || [];
  player.drones = player.drones || [];
  player.cargo_levels = player.cargo_levels || [];
  player.mining_speed_data = player.mining_speed_data || {};
  player.asteroid_total_data = player.asteroid_total_data || {};
  player.max_cargo_capacity_data = player.max_cargo_capacity_data || {};

  // –í—ã—á–∏—Å–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º—ã
  const miningSpeedData = {};
  const maxCargoCapacityData = {};

  [1, 2, 3, 4, 5, 6, 7].forEach(system => {
    const hasAsteroid = player.asteroids.some(a => a.system === system);
    const hasDrone = player.drones.some(d => d.system === system);
    const hasCargo = player.cargo_levels.some(c => c.system === system);

    if (hasAsteroid && hasDrone && hasCargo) {
      const systemDrones = player.drones.filter(d => d.system === system);
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã 4
      const totalDroneSpeed = systemDrones.reduce((speed, drone) => {
        if (system === 4) {
          return speed + (drone.csPerDay || 0);
        } else {
          return speed + (drone.cccPerDay || 0);
        }
      }, 0);
      
      // üéâ –ë–û–ù–£–°: +1% –∑–∞ –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥—Ä–æ–Ω–æ–≤ (15 —à—Ç—É–∫) –¥–ª—è —Å–∏—Å—Ç–µ–º 1-4
      const droneCount = systemDrones.length;
      const bonusMultiplier = (system >= 1 && system <= 4 && droneCount === 15) ? 1.01 : 1;
      
      const speedPerSecond = (totalDroneSpeed * bonusMultiplier) / (24 * 3600);
      miningSpeedData[system] = speedPerSecond > 0 ? speedPerSecond : 0;
    } else {
      miningSpeedData[system] = 0;
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ—Ä–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£–Æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ä–≥–æ, –∞ –Ω–µ —Ç–µ–∫—É—â—É—é
    const systemCargo = player.cargo_levels.filter(c => c.system === system);
    const maxCargoCapacity = systemCargo.reduce((max, c) => Math.max(max, c.capacity || 0), 0);
    maxCargoCapacityData[system] = Number(maxCargoCapacity);

    console.log(`üîß getPlayer —Å–∏—Å—Ç–µ–º–∞ ${system}: –∫–∞—Ä–≥–æ –æ–±—ä–µ–∫—Ç—ã =`, systemCargo, `–º–∞–∫—Å–∏–º—É–º = ${maxCargoCapacity}`);

    if (!hasCargo || !hasAsteroid || !hasDrone) {
      maxCargoCapacityData[system] = 0;
      miningSpeedData[system] = 0;
    }
  });

  console.log('üîß getPlayer: —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ max_cargo_capacity_data =', maxCargoCapacityData);
  console.log(`üîß getPlayer: —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ = ${player.referrals_count}`);

  return {
    ...player,
    mining_speed_data: miningSpeedData,
    asteroid_total_data: player.asteroid_total_data,
    max_cargo_capacity_data: maxCargoCapacityData,
  };
}

module.exports = { getPlayer };