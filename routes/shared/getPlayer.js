const pool = require('../../db');

async function getPlayer(telegramId) {
  const playerResult = await pool.query('SELECT * FROM players WHERE telegram_id = $1', [telegramId]);
  let player = playerResult.rows[0];

  if (!player) {
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º startapp –≤–º–µ—Å—Ç–æ start –¥–ª—è Mini Apps
    const referralLink = `https://t.me/CosmoClickBot?startapp=${telegramId}`;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    const telegramUser = null; // –î–∞–Ω–Ω—ã–µ Telegram –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    let username = `user_${telegramId}`;
    let first_name = `User${telegramId.slice(-4)}`;

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram Web App (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    // –í production —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    
    const initialCollectedBySystem = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });
    
    const initialLastCollectionTime = JSON.stringify({
      "1": new Date().toISOString(),
      "2": new Date().toISOString(), 
      "3": new Date().toISOString(),
      "4": new Date().toISOString(),
      "5": new Date().toISOString(),
      "6": new Date().toISOString(),
      "7": new Date().toISOString()
    });

    const initialMiningSpeedData = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });

    const initialAsteroidTotalData = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });

    const initialMaxCargoCapacityData = JSON.stringify({
      "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0
    });

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º referrer_id —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    const insertQuery = `
      INSERT INTO players (
        telegram_id, username, first_name, ccc, cs, ton, referral_link, color, 
        collected_by_system, cargo_levels, drones, asteroids, 
        last_collection_time, language, unlocked_systems, current_system,
        mining_speed_data, asteroid_total_data, max_cargo_capacity_data,
        referrer_id, referrals_count
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)
      RETURNING *;
    `;
    
    const referrerId = '1222791281'; // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä
    
    const insertValues = [
      telegramId,
      username,
      first_name,
      0, // ccc
      0, // cs
      0, // ton
      referralLink,
      '#61dafb',
      initialCollectedBySystem,
      JSON.stringify([]),
      JSON.stringify([]),
      JSON.stringify([]),
      initialLastCollectionTime,
      null, // language –æ—Å—Ç–∞–µ—Ç—Å—è null
      JSON.stringify([1]),
      1,
      initialMiningSpeedData,
      initialAsteroidTotalData,
      initialMaxCargoCapacityData,
      referrerId, // üî• –î–û–ë–ê–í–õ–ï–ù–û: referrer_id
      0 // üî• –î–û–ë–ê–í–õ–ï–ù–û: referrals_count
    ];
    
    const newPlayerResult = await pool.query(insertQuery, insertValues);
    player = newPlayerResult.rows[0];
    
    console.log(`üéØ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫ ${telegramId} —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º ${referrerId}`);

    // üéØ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ò–ì–†–û–ö–ê
    try {
      console.log(`üéØ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ ${telegramId} –ø–æ–¥ —Ä–µ—Ñ–µ—Ä–æ–º ${referrerId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç—Ç–æ –Ω–µ —Å–∞–º –∏–≥—Ä–æ–∫
      if (referrerId !== telegramId) {
        const referrerCheck = await pool.query('SELECT telegram_id FROM players WHERE telegram_id = $1', [referrerId]);
        if (referrerCheck.rows.length > 0) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
          await pool.query('UPDATE players SET referrals_count = referrals_count + 1 WHERE telegram_id = $1', [referrerId]);
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
          await pool.query('INSERT INTO referrals (referrer_id, referred_id, cs_earned, ton_earned, timestamp) VALUES ($1, $2, $3, $4, NOW())', [referrerId, telegramId, 0, 0]);
          
          console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${telegramId} ‚Üí ${referrerId}`);
        } else {
          console.log(`‚ùå –†–µ—Ñ–µ—Ä ${referrerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
      }
      
    } catch (referralErr) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', referralErr);
      // –ù–ï –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
    }
  }

  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  player.asteroids = player.asteroids || [];
  player.drones = player.drones || [];
  player.cargo_levels = player.cargo_levels || [];
  player.mining_speed_data = player.mining_speed_data || {};
  player.asteroid_total_data = player.asteroid_total_data || {};
  player.max_cargo_capacity_data = player.max_cargo_capacity_data || {};

  // –í—ã—á–∏—Å–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º—ã
  const miningSpeedData = {};
  const maxCargoCapacityData = {};

  [1, 2, 3, 4, 5, 6, 7].forEach(system => {
    const hasAsteroid = player.asteroids.some(a => a.system === system);
    const hasDrone = player.drones.some(d => d.system === system);
    const hasCargo = player.cargo_levels.some(c => c.system === system);

    if (hasAsteroid && hasDrone && hasCargo) {
      const systemDrones = player.drones.filter(d => d.system === system);
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã 4
      const totalDroneSpeed = systemDrones.reduce((speed, drone) => {
        if (system === 4) {
          return speed + (drone.csPerDay || 0);
        } else {
          return speed + (drone.cccPerDay || 0);
        }
      }, 0);
      
      // üéâ –ë–û–ù–£–°: +1% –∑–∞ –ø–æ–ª–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥—Ä–æ–Ω–æ–≤ (15 —à—Ç—É–∫) –¥–ª—è —Å–∏—Å—Ç–µ–º 1-4
      const droneCount = systemDrones.length;
      const bonusMultiplier = (system >= 1 && system <= 4 && droneCount === 15) ? 1.01 : 1;
      
      const speedPerSecond = (totalDroneSpeed * bonusMultiplier) / (24 * 3600);
      miningSpeedData[system] = speedPerSecond > 0 ? speedPerSecond : 0;
    } else {
      miningSpeedData[system] = 0;
    }

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ—Ä–µ–º –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–£–Æ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–∞—Ä–≥–æ, –∞ –Ω–µ —Ç–µ–∫—É—â—É—é
    const systemCargo = player.cargo_levels.filter(c => c.system === system);
    const maxCargoCapacity = systemCargo.reduce((max, c) => Math.max(max, c.capacity || 0), 0);
    maxCargoCapacityData[system] = Number(maxCargoCapacity);

    console.log(`üîß getPlayer —Å–∏—Å—Ç–µ–º–∞ ${system}: –∫–∞—Ä–≥–æ –æ–±—ä–µ–∫—Ç—ã =`, systemCargo, `–º–∞–∫—Å–∏–º—É–º = ${maxCargoCapacity}`);

    if (!hasCargo || !hasAsteroid || !hasDrone) {
      maxCargoCapacityData[system] = 0;
      miningSpeedData[system] = 0;
    }
  });

  console.log('üîß getPlayer: —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ max_cargo_capacity_data =', maxCargoCapacityData);
  console.log(`üîß getPlayer: –∏–≥—Ä–æ–∫ ${telegramId}, referrer_id = ${player.referrer_id}`);

  return {
    ...player,
    mining_speed_data: miningSpeedData,
    asteroid_total_data: player.asteroid_total_data,
    max_cargo_capacity_data: maxCargoCapacityData,
  };
}

module.exports = { getPlayer };