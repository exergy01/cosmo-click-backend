const pool = require('../../db');

// üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const logPlayerAction = async (
  telegramId, 
  actionType, 
  amount = 0, 
  systemId = null, 
  itemId = null, 
  details = null,
  req = null
) => {
  try {
    const ip = req ? (req.ip || req.connection.remoteAddress || 'unknown') : null;
    const userAgent = req ? req.get('User-Agent') : null;
    
    const result = await pool.query(
      `INSERT INTO player_actions 
       (telegram_id, action_type, amount, system_id, item_id, details, ip_address, user_agent, created_at) 
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW()) 
       RETURNING id`,
      [telegramId, actionType, amount, systemId, itemId, details, ip, userAgent]
    );
    
    if (process.env.NODE_ENV === 'development') console.log(`üìù LOG: ${telegramId} - ${actionType} - ${amount} - —Å–∏—Å—Ç–µ–º–∞ ${systemId}`);
    return result.rows[0].id;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ù–ï –ö–†–ò–¢–ò–ß–ù–û):', err.message);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
  }
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const logBalanceChange = async (telegramId, actionId, beforeBalance, afterBalance) => {
  try {
    if (!actionId) return; // –ï—Å–ª–∏ –Ω–µ—Ç actionId, –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
    
    await pool.query(
      `INSERT INTO balance_history 
       (telegram_id, ccc_before, cs_before, ton_before, ccc_after, cs_after, ton_after, action_id) 
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
      [
        telegramId, 
        beforeBalance.ccc, beforeBalance.cs, beforeBalance.ton,
        afterBalance.ccc, afterBalance.cs, afterBalance.ton,
        actionId
      ]
    );
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–ù–ï –ö–†–ò–¢–ò–ß–ù–û):', err.message);
  }
};

// –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
const detectSuspiciousActivity = async (telegramId, actionType, amount, systemId) => {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ –±–æ–ª–µ–µ 50 –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–∏–Ω—É—Ç—É
    const now = new Date();
    const oneMinuteAgo = new Date(now.getTime() - 60000);
    
    const recentActions = await pool.query(
      `SELECT COUNT(*) as count FROM player_actions 
       WHERE telegram_id = $1 AND created_at >= $2`,
      [telegramId, oneMinuteAgo]
    );
    
    const actionsPerMinute = parseInt(recentActions.rows[0].count);
    
    if (actionsPerMinute > 50) {
      if (process.env.NODE_ENV === 'development') console.log(`üö® –ú–ù–û–ì–û –î–ï–ô–°–¢–í–ò–ô: ${telegramId} - ${actionsPerMinute} –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–∏–Ω—É—Ç—É`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      try {
        await pool.query(
          `INSERT INTO suspicious_activity 
           (telegram_id, activity_type, description, severity, auto_detected) 
           VALUES ($1, $2, $3, $4, true)`,
          [telegramId, 'rapid_activity', `${actionsPerMinute} –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–∏–Ω—É—Ç—É`, 3]
        );
      } catch (susErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ù–ï –ö–†–ò–¢–ò–ß–ù–û):', susErr.message);
      }
      
      return true;
    }
    
    return false;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ù–ï –ö–†–ò–¢–ò–ß–ù–û):', err.message);
    return false;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ lifetime —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const updateLifetimeStats = async (telegramId, actionType, amount) => {
  try {
    if (actionType === 'collect_ccc') {
      await pool.query(
        `UPDATE players SET ccc_lifetime = COALESCE(ccc_lifetime, 0) + $1 WHERE telegram_id = $2`,
        [amount, telegramId]
      );
    } else if (actionType === 'collect_cs') {
      await pool.query(
        `UPDATE players SET cs_lifetime = COALESCE(cs_lifetime, 0) + $1 WHERE telegram_id = $2`,
        [amount, telegramId]
      );
    } else if (actionType === 'collect_ton') {
      await pool.query(
        `UPDATE players SET ton_lifetime = COALESCE(ton_lifetime, 0) + $1 WHERE telegram_id = $2`,
        [amount, telegramId]
      );
    } else if (actionType.startsWith('buy_')) {
      await pool.query(
        `UPDATE players SET total_purchases = COALESCE(total_purchases, 0) + 1 WHERE telegram_id = $1`,
        [telegramId]
      );
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lifetime —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ù–ï –ö–†–ò–¢–ò–ß–ù–û):', err.message);
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ª–æ–≥–∞–º
const getPlayerStatistics = async (telegramId) => {
  try {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const weeklyStats = await pool.query(`
      SELECT 
        DATE(created_at) as date,
        COUNT(*) as total_actions,
        SUM(CASE WHEN action_type = 'collect_ccc' THEN amount ELSE 0 END) as ccc_collected,
        SUM(CASE WHEN action_type = 'collect_cs' THEN amount ELSE 0 END) as cs_collected,
        SUM(CASE WHEN action_type = 'collect_ton' THEN amount ELSE 0 END) as ton_collected,
        COUNT(CASE WHEN action_type LIKE 'buy_%' THEN 1 END) as purchases
      FROM player_actions 
      WHERE telegram_id = $1 AND created_at >= CURRENT_DATE - INTERVAL '7 days'
      GROUP BY DATE(created_at)
      ORDER BY date DESC
    `, [telegramId]);
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalStats = await pool.query(`
      SELECT 
        COUNT(*) as total_actions,
        COUNT(CASE WHEN action_type LIKE 'collect_%' THEN 1 END) as total_collections,
        COUNT(CASE WHEN action_type LIKE 'buy_%' THEN 1 END) as total_purchases,
        MIN(created_at) as first_action,
        MAX(created_at) as last_action
      FROM player_actions 
      WHERE telegram_id = $1
    `, [telegramId]);
    
    return {
      weekly: weeklyStats.rows,
      total: totalStats.rows[0]
    };
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ù–ï –ö–†–ò–¢–ò–ß–ù–û):', err.message);
    return { weekly: [], total: {} };
  }
};

module.exports = {
  logPlayerAction,
  logBalanceChange,
  detectSuspiciousActivity,
  updateLifetimeStats,
  getPlayerStatistics
};