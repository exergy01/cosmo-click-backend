// routes/wallet.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const { Telegraf } = require('telegraf');

const router = express.Router();

// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –ü–†–ê–í–ò–õ–¨–ù–û
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const bot = new Telegraf(BOT_TOKEN);

// POST /api/wallet/connect - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ TON Connect
router.post('/connect', async (req, res) => {
  const { telegram_id, wallet_address, signature } = req.body;
  
  console.log('üí≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:', { telegram_id, wallet_address, signature });
  
  if (!telegram_id || !wallet_address) {
    return res.status(400).json({ error: 'Telegram ID and wallet address are required' });
  }

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    const player = await getPlayer(telegram_id);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    await client.query(
      'UPDATE players SET telegram_wallet = $1, wallet_connected_at = NOW() WHERE telegram_id = $2',
      [wallet_address, telegram_id]
    );

    await client.query('COMMIT');
    
    console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è ${telegram_id}: ${wallet_address}`);
    
    res.json({
      success: true,
      message: 'Wallet connected successfully',
      wallet_address: wallet_address
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// POST /api/wallet/disconnect - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
router.post('/disconnect', async (req, res) => {
  const { telegram_id } = req.body;
  
  if (!telegram_id) {
    return res.status(400).json({ error: 'Telegram ID is required' });
  }

  try {
    await pool.query(
      'UPDATE players SET telegram_wallet = NULL, wallet_connected_at = NULL WHERE telegram_id = $1',
      [telegram_id]
    );

    console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è ${telegram_id}`);

    res.json({
      success: true,
      message: 'Wallet disconnected successfully'
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/wallet/prepare-withdrawal - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
router.post('/prepare-withdrawal', async (req, res) => {
  const { telegram_id, amount } = req.body;
  
  console.log('üí∏ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∞:', { telegram_id, amount });
  
  if (!telegram_id || !amount) {
    return res.status(400).json({ error: 'Telegram ID and amount are required' });
  }

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    const player = await getPlayer(telegram_id);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const playerBalance = parseFloat(player.ton || '0');
    const withdrawAmount = parseFloat(amount);

    console.log('üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞:', { playerBalance, withdrawAmount });

    if (withdrawAmount <= 0) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Invalid amount' });
    }

    if (withdrawAmount > playerBalance) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Insufficient balance' });
    }

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞
    const MIN_WITHDRAWAL = 0.1;
    if (withdrawAmount < MIN_WITHDRAWAL) {
      await client.query('ROLLBACK');
      return res.status(400).json({ 
        error: `Minimum withdrawal amount is ${MIN_WITHDRAWAL} TON` 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –≤—ã–≤–æ–¥–µ
    const withdrawalResult = await client.query(
      `INSERT INTO withdrawals (
        player_id, 
        amount, 
        status, 
        created_at
      ) VALUES ($1, $2, 'pending', NOW()) 
      RETURNING id`,
      [telegram_id, withdrawAmount]
    );

    const withdrawalId = withdrawalResult.rows[0].id;

    await client.query('COMMIT');

    console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞: ${withdrawalId}`);

    res.json({
      success: true,
      withdrawal_id: withdrawalId,
      amount: withdrawAmount,
      payload: Buffer.from(`withdrawal:${withdrawalId}`).toString('base64')
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∞:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// POST /api/wallet/confirm-withdrawal - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
router.post('/confirm-withdrawal', async (req, res) => {
  const { telegram_id, amount, transaction_hash, wallet_address } = req.body;
  
  console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞:', { telegram_id, amount, transaction_hash });
  
  if (!telegram_id || !amount || !transaction_hash) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    const player = await getPlayer(telegram_id);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const withdrawAmount = parseFloat(amount);
    const currentBalance = parseFloat(player.ton || '0');

    if (withdrawAmount > currentBalance) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Insufficient balance' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    const newBalance = currentBalance - withdrawAmount;
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newBalance, telegram_id]
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–≤–æ–¥–µ
    await client.query(
      `UPDATE withdrawals 
       SET status = 'completed', 
           transaction_hash = $1,
           wallet_address = $2,
           completed_at = NOW()
       WHERE player_id = $3 
         AND amount = $4 
         AND status = 'pending'
       ORDER BY created_at DESC
       LIMIT 1`,
      [transaction_hash, wallet_address, telegram_id, withdrawAmount]
    );

    await client.query('COMMIT');

    console.log(`‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è ${telegram_id}: ${withdrawAmount} TON`);

    res.json({
      success: true,
      message: 'Withdrawal confirmed',
      new_balance: newBalance
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// GET /api/wallet/history/:telegramId - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ—à–µ–ª—å–∫–æ–º
router.get('/history/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    const result = await pool.query(
      `SELECT 
        id,
        amount,
        status,
        transaction_hash,
        wallet_address,
        created_at,
        completed_at
       FROM withdrawals 
       WHERE player_id = $1 
       ORDER BY created_at DESC 
       LIMIT 50`,
      [telegramId]
    );

    res.json({
      success: true,
      withdrawals: result.rows
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üåü TELEGRAM STARS ENDPOINTS

// POST /api/wallet/create-stars-invoice - –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É Stars
router.post('/create-stars-invoice', async (req, res) => {
  const { telegram_id, amount, description } = req.body;
  
  console.log('‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ Stars:', { telegram_id, amount, description });
  
  if (!telegram_id || !amount) {
    return res.status(400).json({ error: 'Telegram ID and amount are required' });
  }

  if (amount < 1 || amount > 2500) {
    return res.status(400).json({ error: 'Amount must be between 1 and 2500 stars' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(telegram_id);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }

    console.log('ü§ñ –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ Telegram Bot API...');
    
    // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É Stars —á–µ—Ä–µ–∑ Bot API
    const invoice = await bot.telegram.createInvoiceLink({
      title: `CosmoClick: ${amount} Stars`,
      description: description || `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} –∑–≤–µ–∑–¥`,
      payload: JSON.stringify({ 
        type: 'stars_deposit',
        player_id: telegram_id,
        amount: amount,
        timestamp: Date.now()
      }),
      provider_token: '', // –î–ª—è Stars —Ç–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω
      currency: 'XTR', // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è Stars
      prices: [{ label: `${amount} Stars`, amount: amount }]
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ ${amount} Stars –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegram_id}`);
    console.log(`üîó Invoice URL: ${invoice}`);
    
    res.json({
      success: true,
      invoice_url: invoice,
      amount: amount
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ Stars:', err);
    console.error('üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: err.message,
      code: err.code,
      response: err.response?.body
    });
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    let errorMessage = 'Failed to create Stars invoice';
    if (err.message?.includes('bot token')) {
      errorMessage = 'Bot token is invalid';
    } else if (err.message?.includes('Unauthorized')) {
      errorMessage = 'Bot is not authorized';
    } else if (err.message?.includes('Bad Request')) {
      errorMessage = 'Invalid request parameters';
    }
    
    res.status(500).json({ 
      error: errorMessage,
      details: err.message
    });
  }
});

// POST /api/wallet/webhook-stars - Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π Stars
router.post('/webhook-stars', async (req, res) => {
  console.log('üéØ Stars webhook –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(req.body, null, 2));
  
  const { pre_checkout_query, successful_payment } = req.body;
  
  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞)
    if (pre_checkout_query) {
      console.log('üîç Pre-checkout query:', pre_checkout_query);
      
      await bot.telegram.answerPreCheckoutQuery(pre_checkout_query.id, true);
      console.log('‚úÖ Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
      return res.json({ success: true });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ successful_payment (—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂)
    if (successful_payment) {
      console.log('üí∞ Successful payment:', successful_payment);
      
      const payload = JSON.parse(successful_payment.invoice_payload);
      
      if (payload.type === 'stars_deposit') {
        const client = await pool.connect();
        
        try {
          await client.query('BEGIN');
          
          // –î–æ–±–∞–≤–ª—è–µ–º Stars –∏–≥—Ä–æ–∫—É
          await client.query(
            'UPDATE players SET telegram_stars = telegram_stars + $1 WHERE telegram_id = $2',
            [payload.amount, payload.player_id]
          );
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
          await client.query(
            `INSERT INTO star_transactions (
              player_id, amount, transaction_type, description, 
              telegram_payment_id, created_at
            ) VALUES ($1, $2, 'deposit', $3, $4, NOW())`,
            [
              payload.player_id,
              payload.amount,
              `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ${payload.amount} Stars`,
              successful_payment.telegram_payment_charge_id
            ]
          );
          
          await client.query('COMMIT');
          
          console.log(`‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${payload.amount} Stars –∏–≥—Ä–æ–∫—É ${payload.player_id}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
          try {
            await bot.telegram.sendMessage(
              payload.player_id,
              `üåü –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${payload.amount} Stars!\n\nüí∞ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –∏–≥—Ä–µ CosmoClick.`,
              {
                reply_markup: {
                  inline_keyboard: [[{
                    text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
                    web_app: { url: 'https://cosmoclick-frontend.vercel.app' }
                  }]]
                }
              }
            );
          } catch (msgErr) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', msgErr);
            // –ù–µ –ø–∞–¥–∞–µ–º - –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ Stars –Ω–∞—á–∏—Å–ª–µ–Ω—ã
          }
          
        } catch (dbErr) {
          await client.query('ROLLBACK');
          console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ Stars:', dbErr);
          throw dbErr;
        } finally {
          client.release();
        }
      }
      
      return res.json({ success: true });
    }
    
    res.json({ success: true });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stars webhook:', err);
    res.status(500).json({ error: 'Webhook processing failed' });
  }
});

// GET /api/wallet/stars-history/:telegramId - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Stars
router.get('/stars-history/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    const result = await pool.query(
      `SELECT 
        id, amount, transaction_type, description,
        telegram_payment_id, status, created_at
       FROM star_transactions 
       WHERE player_id = $1 
       ORDER BY created_at DESC 
       LIMIT 50`,
      [telegramId]
    );

    res.json({
      success: true,
      transactions: result.rows
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ Stars:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/wallet/process-deposit - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è TON (–¥–ª—è –±—É–¥—É—â–µ–≥–æ webhook'–∞)
router.post('/process-deposit', async (req, res) => {
  const { player_id, amount, transaction_hash } = req.body;
  
  console.log('üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è TON:', { player_id, amount, transaction_hash });
  
  if (!player_id || !amount || !transaction_hash) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    const existingTx = await client.query(
      'SELECT id FROM ton_deposits WHERE transaction_hash = $1',
      [transaction_hash]
    );

    if (existingTx.rows.length > 0) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Transaction already processed' });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É –∏–≥—Ä–æ–∫–∞
    const depositAmount = parseFloat(amount);
    await client.query(
      'UPDATE players SET ton = ton + $1 WHERE telegram_id = $2',
      [depositAmount, player_id]
    );

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    await client.query(
      `INSERT INTO ton_deposits (
        player_id, amount, transaction_hash, status, created_at
      ) VALUES ($1, $2, $3, 'completed', NOW())`,
      [player_id, depositAmount, transaction_hash]
    );

    await client.query('COMMIT');

    console.log(`‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${player_id} +${depositAmount} TON`);

    res.json({
      success: true,
      message: 'Deposit processed successfully',
      amount: depositAmount
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

module.exports = router;