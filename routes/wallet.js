// routes/wallet.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ù–û–í–´–ú ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–ï–ü–û–ó–ò–¢–û–í
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');
const { Telegraf } = require('telegraf');
const axios = require('axios');

const router = express.Router();

// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –ü–†–ê–í–ò–õ–¨–ù–û
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const bot = new Telegraf(BOT_TOKEN);

// ===== –î–û–ë–ê–í–ò–¢–¨ –í –ù–ê–ß–ê–õ–û routes/wallet.js =====
const { notifyStarsDeposit, notifyTonDeposit, notifyWithdrawalRequest } = require('./telegramBot');

// POST /api/wallet/connect - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ TON Connect
router.post('/connect', async (req, res) => {
  const { telegram_id, wallet_address, signature } = req.body;
  
  console.log('üí≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:', { telegram_id, wallet_address, signature });
  
  if (!telegram_id || !wallet_address) {
    return res.status(400).json({ error: 'Telegram ID and wallet address are required' });
  }

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    const player = await getPlayer(telegram_id);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    await client.query(
      'UPDATE players SET telegram_wallet = $1, wallet_connected_at = NOW() WHERE telegram_id = $2',
      [wallet_address, telegram_id]
    );

    await client.query('COMMIT');
    
    console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è ${telegram_id}: ${wallet_address}`);
    
    res.json({
      success: true,
      message: 'Wallet connected successfully',
      wallet_address: wallet_address
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// POST /api/wallet/disconnect - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
router.post('/disconnect', async (req, res) => {
  const { telegram_id } = req.body;
  
  if (!telegram_id) {
    return res.status(400).json({ error: 'Telegram ID is required' });
  }

  try {
    await pool.query(
      'UPDATE players SET telegram_wallet = NULL, wallet_connected_at = NULL WHERE telegram_id = $1',
      [telegram_id]
    );

    console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è ${telegram_id}`);

    res.json({
      success: true,
      message: 'Wallet disconnected successfully'
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üî• –ù–û–í–´–ô ENDPOINT: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
router.post('/check-deposit', async (req, res) => {
  const { player_id, expected_amount, wallet_address } = req.body;
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:', { player_id, expected_amount, wallet_address });
  
  if (!player_id || !expected_amount) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  try {
    const gameWallet = process.env.GAME_WALLET_ADDRESS || wallet_address;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ TON
    const response = await axios.get('https://toncenter.com/api/v2/getTransactions', {
      params: {
        address: gameWallet,
        limit: 20, // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        archival: false
      },
      timeout: 10000
    });

    if (!response.data.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ API TON Center');
      return res.json({ success: false, error: 'TON API error' });
    }

    const transactions = response.data.result;
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}`);
    
    let foundDeposit = null;
    
    for (const tx of transactions) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      if (!tx.in_msg || !tx.in_msg.value || tx.in_msg.value === '0') continue;

      const amount = parseFloat(tx.in_msg.value) / 1000000000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TON
      const hash = tx.transaction_id.hash;
      
      console.log(`üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${amount} TON, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${tx.in_msg.message || '–Ω–µ—Ç'}"`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é 0.001)
      if (Math.abs(amount - expected_amount) > 0.001) continue;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      let commentPlayerId = null;
      if (tx.in_msg.message) {
        const match = tx.in_msg.message.match(/(\d{8,12})/);
        if (match) {
          commentPlayerId = match[1];
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à –∏–≥—Ä–æ–∫
      if (commentPlayerId !== player_id) continue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const existingTx = await pool.query(
        'SELECT id FROM ton_deposits WHERE transaction_hash = $1',
        [hash]
      );

      if (existingTx.rows.length > 0) {
        console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ');
        return res.json({ success: true, message: 'Deposit already processed' });
      }

      foundDeposit = {
        amount: amount,
        hash: hash,
        player_id: commentPlayerId
      };
      break;
    }

    if (!foundDeposit) {
      console.log('‚ùå –î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ');
      return res.json({ success: false, message: 'Deposit not found yet' });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –¥–µ–ø–æ–∑–∏—Ç: ${foundDeposit.amount} TON –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${foundDeposit.player_id}`);
    
    const client = await pool.connect();
    try {
      await client.query('BEGIN');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const playerResult = await client.query(
        'SELECT telegram_id, first_name, username, ton FROM players WHERE telegram_id = $1',
        [foundDeposit.player_id]
      );

      if (playerResult.rows.length === 0) {
        await client.query('ROLLBACK');
        return res.json({ success: false, error: 'Player not found' });
      }

      const playerData = playerResult.rows[0];
      const currentBalance = parseFloat(playerData.ton || '0');
      const newBalance = currentBalance + foundDeposit.amount;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
      await client.query(
        'UPDATE players SET ton = $1 WHERE telegram_id = $2',
        [newBalance, foundDeposit.player_id]
      );

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
      await client.query(
        `INSERT INTO ton_deposits (
          player_id, amount, transaction_hash, status, created_at
        ) VALUES ($1, $2, $3, 'completed', NOW())`,
        [foundDeposit.player_id, foundDeposit.amount, foundDeposit.hash]
      );

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
      await client.query(
        `INSERT INTO balance_history (
          telegram_id, currency, old_balance, new_balance, 
          change_amount, reason, details, timestamp
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())`,
        [
          foundDeposit.player_id,
          'ton',
          currentBalance,
          newBalance,
          foundDeposit.amount,
          'auto_deposit_check',
          JSON.stringify({
            transaction_hash: foundDeposit.hash,
            auto_processed: true,
            check_triggered: true
          })
        ]
      );

      await client.query('COMMIT');

      console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${foundDeposit.player_id} +${foundDeposit.amount} TON`);
      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentBalance} ‚Üí ${newBalance}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
      try {
        await notifyTonDeposit(playerData, foundDeposit.amount, foundDeposit.hash);
      } catch (notifyErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifyErr);
      }

      res.json({
        success: true,
        message: 'Deposit processed successfully',
        amount: foundDeposit.amount,
        new_balance: newBalance
      });

    } catch (err) {
      await client.query('ROLLBACK');
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', err);
      throw err;
    } finally {
      client.release();
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
    res.status(500).json({ success: false, error: 'Internal server error' });
  }
});

// –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ ENDPOINT –≤ –≤–∞—à wallet.js –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ /check-deposit

// POST /api/wallet/check-deposit-by-address - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
router.post('/check-deposit-by-address', async (req, res) => {
  const { player_id, expected_amount, sender_address, game_wallet } = req.body;
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É:', { 
    player_id, 
    expected_amount, 
    sender_address, 
    game_wallet 
  });
  
  if (!player_id || !expected_amount || !sender_address) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  try {
    const gameWalletAddress = game_wallet || process.env.GAME_WALLET_ADDRESS;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    const response = await axios.get('https://toncenter.com/api/v2/getTransactions', {
      params: {
        address: gameWalletAddress,
        limit: 50, // –±–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        archival: false
      },
      timeout: 10000
    });

    if (!response.data.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ TON API');
      return res.json({ success: false, error: 'TON API error' });
    }

    const transactions = response.data.result;
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${transactions.length}`);
    
    let foundDeposit = null;
    
    for (const tx of transactions) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      if (!tx.in_msg || !tx.in_msg.value || tx.in_msg.value === '0') continue;

      const amount = parseFloat(tx.in_msg.value) / 1000000000;
      const hash = tx.transaction_id.hash;
      const fromAddress = tx.in_msg.source;
      
      console.log(`üí∞ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${amount} TON –æ—Ç ${fromAddress}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É (—Å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é 0.001)
      if (Math.abs(amount - expected_amount) > 0.001) {
        console.log(`   ‚ùå –°—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–∏ ${expected_amount}, –ø–æ–ª—É—á–∏–ª–∏ ${amount}`);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      if (fromAddress !== sender_address) {
        console.log(`   ‚ùå –ê–¥—Ä–µ—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª–∏ ${sender_address}, –ø–æ–ª—É—á–∏–ª–∏ ${fromAddress}`);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ
      const existingTx = await pool.query(
        'SELECT id FROM ton_deposits WHERE transaction_hash = $1',
        [hash]
      );

      if (existingTx.rows.length > 0) {
        console.log('   ‚úÖ –î–µ–ø–æ–∑–∏—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ');
        return res.json({ success: true, message: 'Deposit already processed' });
      }

      foundDeposit = {
        amount: amount,
        hash: hash,
        from_address: fromAddress,
        player_id: player_id
      };
      
      console.log(`   ‚úÖ –ù–ê–ô–î–ï–ù –ü–û–î–•–û–î–Ø–©–ò–ô –î–ï–ü–û–ó–ò–¢!`);
      break;
    }

    if (!foundDeposit) {
      console.log('‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏–π –¥–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.json({ success: false, message: 'Deposit not found yet' });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
    console.log(`üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç: ${foundDeposit.amount} TON –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${foundDeposit.player_id}`);
    
    const client = await pool.connect();
    try {
      await client.query('BEGIN');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
      const playerResult = await client.query(
        'SELECT telegram_id, first_name, username, ton FROM players WHERE telegram_id = $1',
        [foundDeposit.player_id]
      );

      if (playerResult.rows.length === 0) {
        await client.query('ROLLBACK');
        return res.json({ success: false, error: 'Player not found' });
      }

      const playerData = playerResult.rows[0];
      const currentBalance = parseFloat(playerData.ton || '0');
      const newBalance = currentBalance + foundDeposit.amount;

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
      await client.query(
        'UPDATE players SET ton = $1 WHERE telegram_id = $2',
        [newBalance, foundDeposit.player_id]
      );

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await client.query(
        `INSERT INTO ton_deposits (
          player_id, amount, transaction_hash, status, created_at
        ) VALUES ($1, $2, $3, 'completed', NOW())`,
        [foundDeposit.player_id, foundDeposit.amount, foundDeposit.hash]
      );

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
      await client.query(
        `INSERT INTO balance_history (
          telegram_id, currency, old_balance, new_balance, 
          change_amount, reason, details, timestamp
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())`,
        [
          foundDeposit.player_id,
          'ton',
          currentBalance,
          newBalance,
          foundDeposit.amount,
          'auto_deposit_by_address',
          JSON.stringify({
            transaction_hash: foundDeposit.hash,
            from_address: foundDeposit.from_address,
            auto_processed: true
          })
        ]
      );

      await client.query('COMMIT');

      console.log(`‚úÖ –î–µ–ø–æ–∑–∏—Ç –∑–∞—á–∏—Å–ª–µ–Ω: ${foundDeposit.player_id} +${foundDeposit.amount} TON`);
      console.log(`üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${currentBalance} ‚Üí ${newBalance}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
      try {
        await notifyTonDeposit(playerData, foundDeposit.amount, foundDeposit.hash);
      } catch (notifyErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notifyErr);
      }

      res.json({
        success: true,
        message: 'Deposit processed successfully',
        amount: foundDeposit.amount,
        new_balance: newBalance
      });

    } catch (err) {
      await client.query('ROLLBACK');
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', err);
      throw err;
    } finally {
      client.release();
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ –∞–¥—Ä–µ—Å—É:', error);
    res.status(500).json({ success: false, error: 'Internal server error' });
  }
});

// POST /api/wallet/prepare-withdrawal - –û–ë–ù–û–í–ò–¢–¨ prepare-withdrawal –§–£–ù–ö–¶–ò–Ø
router.post('/prepare-withdrawal', async (req, res) => {
  const { telegram_id, amount } = req.body;
  
  console.log('üí∏ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∞:', { telegram_id, amount });
  
  if (!telegram_id || !amount) {
    return res.status(400).json({ error: 'Telegram ID and amount are required' });
  }

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const playerResult = await client.query(
      'SELECT telegram_id, first_name, username, ton FROM players WHERE telegram_id = $1',
      [telegram_id]
    );
    
    if (playerResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const player = playerResult.rows[0];
    const playerBalance = parseFloat(player.ton || '0');
    const withdrawAmount = parseFloat(amount);

    if (withdrawAmount <= 0 || withdrawAmount > playerBalance || withdrawAmount < 0.1) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Invalid amount' });
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    const withdrawalResult = await client.query(
      `INSERT INTO withdrawals (
        player_id, amount, status, created_at
      ) VALUES ($1, $2, 'pending', NOW()) 
      RETURNING id`,
      [telegram_id, withdrawAmount]
    );

    const withdrawalId = withdrawalResult.rows[0].id;

    await client.query('COMMIT');

    console.log(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞: ${withdrawalId}`);

    // üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£ –û –ó–ê–Ø–í–ö–ï –ù–ê –í–´–í–û–î
    await notifyWithdrawalRequest(player, withdrawAmount, withdrawalId);

    res.json({
      success: true,
      withdrawal_id: withdrawalId,
      amount: withdrawAmount,
      message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—ã–≤–æ–¥–∞:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// ===== –î–û–ë–ê–í–ò–¢–¨ process-deposit –§–£–ù–ö–¶–ò–Ø –° –£–í–ï–î–û–ú–õ–ï–ù–ò–ï–ú =====
router.post('/process-deposit', async (req, res) => {
  const { player_id, amount, transaction_hash } = req.body;
  
  console.log('üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è TON:', { player_id, amount, transaction_hash });
  
  if (!player_id || !amount || !transaction_hash) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    const existingTx = await pool.query(
      'SELECT id FROM ton_deposits WHERE transaction_hash = $1',
      [transaction_hash]
    );

    if (existingTx.rows.length > 0) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Transaction already processed' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    const playerResult = await client.query(
      'SELECT telegram_id, first_name, username FROM players WHERE telegram_id = $1',
      [player_id]
    );

    if (playerResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const playerData = playerResult.rows[0];
    const depositAmount = parseFloat(amount);

    // –î–æ–±–∞–≤–ª—è–µ–º TON –∫ –±–∞–ª–∞–Ω—Å—É –∏–≥—Ä–æ–∫–∞
    await client.query(
      'UPDATE players SET ton = ton + $1 WHERE telegram_id = $2',
      [depositAmount, player_id]
    );

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    await client.query(
      `INSERT INTO ton_deposits (
        player_id, amount, transaction_hash, status, created_at
      ) VALUES ($1, $2, $3, 'completed', NOW())`,
      [player_id, depositAmount, transaction_hash]
    );

    await client.query('COMMIT');

    console.log(`‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${player_id} +${depositAmount} TON`);

    // üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£ –û –ü–û–ü–û–õ–ù–ï–ù–ò–ò TON
    await notifyTonDeposit(playerData, depositAmount, transaction_hash);

    res.json({
      success: true,
      message: 'Deposit processed successfully',
      amount: depositAmount
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// routes/wallet.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ß–ê–°–¢–¨ 2

// POST /api/wallet/confirm-withdrawal - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
router.post('/confirm-withdrawal', async (req, res) => {
  const { telegram_id, amount, transaction_hash, wallet_address } = req.body;
  
  console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞:', { telegram_id, amount, transaction_hash });
  
  if (!telegram_id || !amount || !transaction_hash) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    const player = await getPlayer(telegram_id);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const withdrawAmount = parseFloat(amount);
    const currentBalance = parseFloat(player.ton || '0');

    if (withdrawAmount > currentBalance) {
      await client.query('ROLLBACK');
      return res.status(400).json({ error: 'Insufficient balance' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    const newBalance = currentBalance - withdrawAmount;
    await client.query(
      'UPDATE players SET ton = $1 WHERE telegram_id = $2',
      [newBalance, telegram_id]
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–≤–æ–¥–µ
    await client.query(
      `UPDATE withdrawals 
       SET status = 'completed', 
           transaction_hash = $1,
           wallet_address = $2,
           completed_at = NOW()
       WHERE player_id = $3 
         AND amount = $4 
         AND status = 'pending'
       ORDER BY created_at DESC
       LIMIT 1`,
      [transaction_hash, wallet_address, telegram_id, withdrawAmount]
    );

    await client.query('COMMIT');

    console.log(`‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è ${telegram_id}: ${withdrawAmount} TON`);

    res.json({
      success: true,
      message: 'Withdrawal confirmed',
      new_balance: newBalance
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// GET /api/wallet/history/:telegramId - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ—à–µ–ª—å–∫–æ–º
router.get('/history/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    const result = await pool.query(
      `SELECT 
        id,
        amount,
        status,
        transaction_hash,
        wallet_address,
        created_at,
        completed_at
       FROM withdrawals 
       WHERE player_id = $1 
       ORDER BY created_at DESC 
       LIMIT 50`,
      [telegramId]
    );

    res.json({
      success: true,
      withdrawals: result.rows
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// üåü TELEGRAM STARS ENDPOINTS

// POST /api/wallet/create-stars-invoice - –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É Stars
router.post('/create-stars-invoice', async (req, res) => {
  const { telegram_id, amount, description } = req.body;
  
  console.log('‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ Stars:', { telegram_id, amount, description });
  
  if (!telegram_id || !amount) {
    return res.status(400).json({ error: 'Telegram ID and amount are required' });
  }

  if (amount < 100 || amount > 150000) {
    return res.status(400).json({ error: 'Amount must be between 100 and 150000 stars' });
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(telegram_id);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }

    console.log('ü§ñ –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ Telegram Bot API...');
    
    // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É Stars —á–µ—Ä–µ–∑ Bot API
    const invoice = await bot.telegram.createInvoiceLink({
      title: `CosmoClick: ${amount} Stars`,
      description: description || `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount} –∑–≤–µ–∑–¥`,
      payload: JSON.stringify({ 
        type: 'stars_deposit',
        player_id: telegram_id,
        amount: amount,
        timestamp: Date.now()
      }),
      provider_token: '', // –î–ª—è Stars —Ç–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω
      currency: 'XTR', // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è Stars
      prices: [{ label: `${amount} Stars`, amount: amount }]
    });

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ ${amount} Stars –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${telegram_id}`);
    console.log(`üîó Invoice URL: ${invoice}`);
    
    res.json({
      success: true,
      invoice_url: invoice,
      amount: amount
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ Stars:', err);
    console.error('üìä –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: err.message,
      code: err.code,
      response: err.response?.body
    });
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    let errorMessage = 'Failed to create Stars invoice';
    if (err.message?.includes('bot token')) {
      errorMessage = 'Bot token is invalid';
    } else if (err.message?.includes('Unauthorized')) {
      errorMessage = 'Bot is not authorized';
    } else if (err.message?.includes('Bad Request')) {
      errorMessage = 'Invalid request parameters';
    }
    
    res.status(500).json({ 
      error: errorMessage,
      details: err.message
    });
  }
});

// POST /api/wallet/webhook-stars - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// ===== –ó–ê–ú–ï–ù–ò–¢–¨ webhook-stars –§–£–ù–ö–¶–ò–Ø =====
router.post('/webhook-stars', async (req, res) => {
  console.log('üéØ Stars webhook –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(req.body, null, 2));
  
  const { pre_checkout_query, message } = req.body;
  
  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query
    if (pre_checkout_query) {
      await bot.telegram.answerPreCheckoutQuery(pre_checkout_query.id, true);
      console.log('‚úÖ Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
      return res.json({ success: true });
    }
    
    // üî• –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û–ì–û –ü–õ–ê–¢–ï–ñ–ê –° –£–í–ï–î–û–ú–õ–ï–ù–ò–ï–ú
    if (message && message.successful_payment) {
      const payment = message.successful_payment;
      const payload = JSON.parse(payment.invoice_payload);
      const playerId = payload.player_id;
      const amount = payment.total_amount;
      
      console.log(`üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂: ${amount} Stars –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
      
      const client = await pool.connect();
      try {
        await client.query('BEGIN');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        const existingTx = await client.query(
          'SELECT id FROM star_transactions WHERE telegram_payment_id = $1',
          [payment.telegram_payment_charge_id]
        );
        
        if (existingTx.rows.length > 0) {
          console.log('‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
          await client.query('ROLLBACK');
          return res.json({ success: true, message: 'Already processed' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
        const playerResult = await client.query(
          'SELECT telegram_id, first_name, username FROM players WHERE telegram_id = $1',
          [playerId]
        );
        
        if (playerResult.rows.length === 0) {
          await client.query('ROLLBACK');
          return res.status(404).json({ error: 'Player not found' });
        }
        
        const playerData = playerResult.rows[0];
        
        // –ù–∞—á–∏—Å–ª—è–µ–º Stars
        await client.query(
          'UPDATE players SET telegram_stars = COALESCE(telegram_stars, 0) + $1 WHERE telegram_id = $2',
          [amount, playerId]
        );
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await client.query(
          `INSERT INTO star_transactions (
            player_id, amount, transaction_type, description,
            telegram_payment_id, status, created_at
          ) VALUES ($1, $2, $3, $4, $5, $6, NOW())`,
          [
            playerId,
            amount,
            'deposit',
            `Stars purchase: ${amount} stars`,
            payment.telegram_payment_charge_id,
            'completed'
          ]
        );
        
        await client.query('COMMIT');
        
        console.log(`‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${amount} Stars –∏–≥—Ä–æ–∫—É ${playerId}`);
        
        // üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–£
        await notifyStarsDeposit(playerData, amount);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        try {
          await bot.telegram.sendMessage(
            playerId,
            `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} ‚≠ê Stars!`,
            {
              reply_markup: {
                inline_keyboard: [[{
                  text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
                  web_app: { url: 'https://cosmoclick-frontend.vercel.app' }
                }]]
              }
            }
          );
        } catch (msgErr) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', msgErr);
        }
        
      } catch (dbErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Stars:', dbErr);
        await client.query('ROLLBACK');
        throw dbErr;
      } finally {
        client.release();
      }
      
      return res.json({ success: true });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (message && !message.successful_payment) {
      console.log('üì® –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞:', message.text || 'unknown');
      const messageBot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
      messageBot.start((ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.'));
      await messageBot.handleUpdate(req.body);
      return res.json({ success: true });
    }
    
    res.json({ success: true });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stars webhook:', err);
    res.status(500).json({ error: 'Webhook processing failed' });
  }
});

// GET /api/wallet/stars-history/:telegramId - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Stars
router.get('/stars-history/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    const result = await pool.query(
      `SELECT 
        id, amount, transaction_type, description,
        telegram_payment_id, status, created_at
       FROM star_transactions 
       WHERE player_id = $1 
       ORDER BY created_at DESC 
       LIMIT 50`,
      [telegramId]
    );

    res.json({
      success: true,
      transactions: result.rows
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ Stars:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// routes/wallet.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ß–ê–°–¢–¨ 3 (–ü–†–ï–ú–ò–£–ú —Å unified verification)

// ========================
// üèÜ –ü–†–ï–ú–ò–£–ú –ü–û–î–ü–ò–°–ö–ò - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// ========================

// GET /api/wallet/premium-status/:telegramId - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ (–£–ë–†–ê–õ–ò –î–£–ë–õ–¨)
router.get('/premium-status/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    const result = await pool.query(
      `SELECT 
        premium_no_ads_until,
        premium_no_ads_forever,
        verified
       FROM players 
       WHERE telegram_id = $1`,
      [telegramId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Player not found' });
    }

    const player = result.rows[0];
    const now = new Date();
    
    let premiumStatus = {
      active: false,
      forever: false,
      until: null,
      verified: player.verified || false // üî• –î–û–ë–ê–í–ò–õ–ò verified —Å—Ç–∞—Ç—É—Å
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
    if (player.premium_no_ads_forever) {
      premiumStatus = {
        active: true,
        forever: true,
        until: null,
        verified: player.verified || false
      };
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    else if (player.premium_no_ads_until && new Date(player.premium_no_ads_until) > now) {
      premiumStatus = {
        active: true,
        forever: false,
        until: player.premium_no_ads_until,
        verified: player.verified || false
      };
    }

    console.log(`‚úÖ –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –¥–ª—è ${telegramId}:`, premiumStatus);

    res.json({
      success: true,
      premium: premiumStatus
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/wallet/purchase-premium - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞ —Å unified verification
router.post('/purchase-premium', async (req, res) => {
  const { telegram_id, package_type, payment_method, payment_amount } = req.body;
  
  console.log('üèÜ –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞:', { telegram_id, package_type, payment_method, payment_amount });
  
  if (!telegram_id || !package_type || !payment_method || !payment_amount) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞
  const validPackages = ['no_ads_30_days', 'no_ads_forever'];
  if (!validPackages.includes(package_type)) {
    return res.status(400).json({ error: 'Invalid package type' });
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
  const validPaymentMethods = ['stars', 'ton'];
  if (!validPaymentMethods.includes(payment_method)) {
    return res.status(400).json({ error: 'Invalid payment method' });
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
  const priceValidation = {
    'no_ads_30_days': { stars: 150, ton: 1 },
    'no_ads_forever': { stars: 1500, ton: 10 }
  };

  const expectedAmount = priceValidation[package_type][payment_method];
  if (parseFloat(payment_amount) !== expectedAmount) {
    return res.status(400).json({ error: 'Invalid payment amount' });
  }

  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
    const playerResult = await client.query(
      'SELECT telegram_id, telegram_stars, ton FROM players WHERE telegram_id = $1',
      [telegram_id]
    );

    if (playerResult.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }

    const player = playerResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (payment_method === 'stars') {
      const currentStars = parseInt(player.telegram_stars || '0');
      if (currentStars < payment_amount) {
        await client.query('ROLLBACK');
        return res.status(400).json({ 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –£ –≤–∞—Å: ${currentStars}, –Ω—É–∂–Ω–æ: ${payment_amount}` 
        });
      }
    } else if (payment_method === 'ton') {
      const currentTON = parseFloat(player.ton || '0');
      if (currentTON < payment_amount) {
        await client.query('ROLLBACK');
        return res.status(400).json({ 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON! –£ –≤–∞—Å: ${currentTON.toFixed(4)}, –Ω—É–∂–Ω–æ: ${payment_amount}` 
        });
      }
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    if (payment_method === 'stars') {
      await client.query(
        'UPDATE players SET telegram_stars = telegram_stars - $1 WHERE telegram_id = $2',
        [payment_amount, telegram_id]
      );
    } else if (payment_method === 'ton') {
      await client.query(
        'UPDATE players SET ton = ton - $1 WHERE telegram_id = $2',
        [payment_amount, telegram_id]
      );
    }

    // üî• –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å + VERIFIED
    if (package_type === 'no_ads_forever') {
      await client.query(
        `UPDATE players SET 
         premium_no_ads_forever = TRUE,
         premium_no_ads_until = NULL,
         verified = TRUE
         WHERE telegram_id = $1`,
        [telegram_id]
      );
    } else if (package_type === 'no_ads_30_days') {
      await client.query(
        `UPDATE players SET 
         premium_no_ads_until = GREATEST(
           COALESCE(premium_no_ads_until, NOW()),
           NOW() + INTERVAL '30 days'
         ),
         verified = TRUE
         WHERE telegram_id = $1`,
        [telegram_id]
      );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionResult = await client.query(
      `INSERT INTO premium_subscriptions (
        telegram_id, 
        subscription_type, 
        payment_method, 
        payment_amount,
        end_date,
        transaction_id
      ) VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING id`,
      [
        telegram_id,
        package_type,
        payment_method,
        payment_amount,
        package_type === 'no_ads_forever' ? null : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
        `prem_${Date.now()}_${telegram_id}`
      ]
    );

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query(
      `INSERT INTO premium_transactions (
        telegram_id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        payment_currency,
        description,
        metadata
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
      [
        telegram_id,
        'purchase',
        package_type,
        payment_method,
        payment_amount,
        payment_method,
        `Premium subscription purchase: ${package_type}`,
        JSON.stringify({
          subscription_id: subscriptionResult.rows[0].id,
          purchase_timestamp: new Date().toISOString(),
          verified_granted: true // üî• –û–¢–ú–ï–ß–ï–ú —á—Ç–æ verified –±—ã–ª –≤—ã–¥–∞–Ω
        })
      ]
    );

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
    await client.query(
      `INSERT INTO balance_history (
        telegram_id,
        currency,
        old_balance,
        new_balance,
        change_amount,
        reason,
        details,
        timestamp
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())`,
      [
        telegram_id,
        payment_method,
        payment_method === 'stars' ? parseInt(player.telegram_stars || '0') : parseFloat(player.ton || '0'),
        payment_method === 'stars' 
          ? parseInt(player.telegram_stars || '0') - payment_amount
          : parseFloat(player.ton || '0') - payment_amount,
        -payment_amount,
        'premium_purchase',
        JSON.stringify({
          package_type,
          subscription_id: subscriptionResult.rows[0].id,
          verified_granted: true // üî• –û–¢–ú–ï–ß–ï–ú —á—Ç–æ verified –±—ã–ª –≤—ã–¥–∞–Ω
        })
      ]
    );

    await client.query('COMMIT');

    const successMessage = package_type === 'no_ads_forever' 
      ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ–∫–ª–∞–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ù–ê–í–°–ï–ì–î–ê! üèÜ' 
      : '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ–∫–ª–∞–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π! üéâ';

    console.log(`‚úÖ –ü—Ä–µ–º–∏—É–º –∫—É–ø–ª–µ–Ω –¥–ª—è ${telegram_id}: ${package_type} –∑–∞ ${payment_amount} ${payment_method} + verified = true`);

    res.json({
      success: true,
      message: successMessage,
      subscription_id: subscriptionResult.rows[0].id,
      verified_granted: true // üî• –í–û–ó–í–†–ê–©–ï–ú –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ verified
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
    try {
      const notificationMessage = package_type === 'no_ads_forever'
        ? `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É!\n\nüèÜ –†–µ–∫–ª–∞–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ù–ê–í–°–ï–ì–î–ê!\n‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ç–µ–ø–µ—Ä—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∏–≥—Ä–æ–π CosmoClick –±–µ–∑ –æ—Ç–≤–ª–µ–∫–∞—é—â–µ–π —Ä–µ–∫–ª–∞–º—ã.`
        : `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É!\n\nüö´ –†–µ–∫–ª–∞–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ç–µ–ø–µ—Ä—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∏–≥—Ä–æ–π CosmoClick –±–µ–∑ –æ—Ç–≤–ª–µ–∫–∞—é—â–µ–π —Ä–µ–∫–ª–∞–º—ã.`;

      await bot.telegram.sendMessage(
        telegram_id,
        notificationMessage,
        {
          reply_markup: {
            inline_keyboard: [[{
              text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
              web_app: { url: 'https://cosmoclick-frontend.vercel.app' }
            }]]
          }
        }
      );
    } catch (msgErr) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–º–∏—É–º–µ:', msgErr);
      // –ù–ï –ø–∞–¥–∞–µ–º - –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ –ø—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    }

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞:', err);
    await client.query('ROLLBACK');
    res.status(500).json({ error: 'Internal server error' });
  } finally {
    client.release();
  }
});

// GET /api/wallet/premium-history/:telegramId - –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–º–∏—É–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–£–ë–†–ê–õ–ò –î–£–ë–õ–¨)
router.get('/premium-history/:telegramId', async (req, res) => {
  const { telegramId } = req.params;
  
  try {
    const result = await pool.query(
      `SELECT 
        id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        payment_currency,
        description,
        status,
        created_at
       FROM premium_transactions 
       WHERE telegram_id = $1 
       ORDER BY created_at DESC 
       LIMIT 50`,
      [telegramId]
    );

    res.json({
      success: true,
      transactions: result.rows
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–º–∏—É–º:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/wallet/check-premium - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
router.post('/check-premium', async (req, res) => {
  const { telegram_id } = req.body;
  
  if (!telegram_id) {
    return res.status(400).json({ error: 'Telegram ID is required' });
  }

  try {
    const result = await pool.query(
      `SELECT check_premium_no_ads($1) as has_premium`,
      [telegram_id]
    );

    const hasPremium = result.rows[0].has_premium;

    res.json({
      success: true,
      has_premium: hasPremium
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–µ–π:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// POST /api/wallet/cleanup-expired-premium - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
router.post('/cleanup-expired-premium', async (req, res) => {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫...');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ premium_subscriptions
    const expiredSubscriptions = await pool.query(
      `UPDATE premium_subscriptions 
       SET status = 'expired' 
       WHERE status = 'active' 
         AND end_date IS NOT NULL 
         AND end_date < NOW()
       RETURNING telegram_id`
    );

    // üî• –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º –ø—Ä–µ–º–∏—É–º –ø–æ–ª—è –ò –°–ë–†–ê–°–´–í–ê–ï–ú VERIFIED
    const cleanedPlayers = await pool.query(
      `UPDATE players 
       SET premium_no_ads_until = NULL,
           verified = FALSE
       WHERE premium_no_ads_until IS NOT NULL 
         AND premium_no_ads_until < NOW()
         AND premium_no_ads_forever = FALSE
       RETURNING telegram_id, first_name, username`
    );

    console.log('üìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ UNIFIED –û–ß–ò–°–¢–ö–ò ===');
    console.log(`‚úÖ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${expiredSubscriptions.rows.length}`);
    console.log(`‚úÖ –ò–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω–æ: ${cleanedPlayers.rows.length}`);
    console.log(`‚úÖ Verified —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω —É: ${cleanedPlayers.rows.length} –∏–≥—Ä–æ–∫–æ–≤`);
    console.log('üèÅ UNIFIED –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    res.json({
      success: true,
      message: 'Expired premium subscriptions and verification status cleaned up',
      expired_subscriptions: expiredSubscriptions.rows.length,
      cleaned_players: cleanedPlayers.rows.length,
      affected_players: cleanedPlayers.rows.map(p => p.telegram_id)
    });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;