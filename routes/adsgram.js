// routes/adsgram.js - –ü–†–û–°–¢–û–ô –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∫ —É –¥—Ä—É–≥–∞

const express = require('express');
const router = express.Router();
const pool = require('../db');

// Reward endpoint - –∫–∞–∫ —É –¥—Ä—É–≥–∞ —Å userid –≤ URL
router.get('/reward', async (req, res) => {
  try {
    const { userid } = req.query; // –ë–µ—Ä–µ–º –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–∞–∫ —É –¥—Ä—É–≥–∞
    
    console.log('üéØ Adsgram reward received for user:', userid);
    console.log('üéØ Query params:', req.query);
    console.log('üéØ IP:', req.ip);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userid –µ—Å—Ç—å
    if (!userid) {
      console.error('üéØ‚ùå No userid provided');
      return res.status(400).json({
        success: false,
        error: 'No userid provided'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const userResult = await pool.query(
      'SELECT telegram_id FROM players WHERE telegram_id = $1',
      [userid]
    );

    if (userResult.rows.length === 0) {
      console.error('üéØ‚ùå User not found:', userid);
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }

    console.log('üéØ User found, processing reward...');

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∫–ª–∞–º—ã –≤ –ª–∏–º–∏—Ç–∞—Ö
    await pool.query(`
      INSERT INTO player_game_limits (telegram_id, game_type, daily_games, daily_ads_watched, last_reset_date)
      VALUES ($1, 'cosmic_shells', 0, 1, CURRENT_DATE)
      ON CONFLICT (telegram_id, game_type) 
      DO UPDATE SET 
        daily_ads_watched = CASE 
          WHEN player_game_limits.last_reset_date < CURRENT_DATE 
          THEN 1 
          ELSE player_game_limits.daily_ads_watched + 1 
        END,
        last_reset_date = CASE 
          WHEN player_game_limits.last_reset_date < CURRENT_DATE 
          THEN CURRENT_DATE 
          ELSE player_game_limits.last_reset_date 
        END
    `, [userid]);

    console.log('üéØ‚úÖ Adsgram reward processed successfully for user:', userid);

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è Adsgram
    res.json({
      success: true,
      message: 'Reward processed',
      userid: userid,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('üéØ‚ùå Adsgram reward error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
});

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
router.get('/stats/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    const limitsResult = await pool.query(`
      SELECT daily_ads_watched 
      FROM player_game_limits 
      WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
    `, [telegramId]);

    const dailyAds = limitsResult.rows[0]?.daily_ads_watched || 0;

    res.json({
      success: true,
      stats: {
        todayAds: dailyAds,
        maxAds: 20
      }
    });

  } catch (error) {
    console.error('üéØ‚ùå Adsgram stats error:', error);
    res.status(500).json({ success: false, error: 'Server error' });
  }
});

module.exports = router;