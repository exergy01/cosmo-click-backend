// routes/test.js - –¢–µ—Å—Ç–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const { 
  sendAdminNotification,
  notifyStarsDeposit,
  notifyTonDeposit, 
  notifyWithdrawalRequest,
  notifyCriticalEvent,
  sendDailySummary
} = require('./telegramBot');

// üîê Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
const adminAuth = (req, res, next) => {
  const telegramId = req.body.telegramId || req.params.telegramId;
  
  if (String(telegramId) !== '1222791281') {
    return res.status(403).json({ 
      error: 'Access denied - admin only',
      receivedId: telegramId 
    });
  }
  
  next();
};

// üìä –¢–µ—Å—Ç–æ–≤–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞
router.post('/daily-summary', adminAuth, async (req, res) => {
  try {
    if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞');
    
    await sendDailySummary();
    
    res.json({
      success: true,
      message: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–≤–æ–¥–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// üí∞ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ Stars
router.post('/notify-stars', adminAuth, async (req, res) => {
  try {
    const { playerData, amount } = req.body;
    
    if (!playerData || !amount) {
      return res.status(400).json({
        error: 'playerData –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        required: ['playerData', 'amount']
      });
    }
    
    if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ Stars —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', { playerData, amount });
    
    await notifyStarsDeposit(playerData, amount);
    
    res.json({
      success: true,
      message: `Stars —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ${amount} Stars –¥–ª—è ${playerData.first_name}`,
      data: { playerData, amount },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Stars —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// üíé –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ TON
router.post('/notify-ton', adminAuth, async (req, res) => {
  try {
    const { playerData, amount, transactionHash } = req.body;
    
    if (!playerData || !amount) {
      return res.status(400).json({
        error: 'playerData –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        required: ['playerData', 'amount', 'transactionHash (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)']
      });
    }
    
    if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ TON —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', { playerData, amount, transactionHash });
    
    await notifyTonDeposit(playerData, amount, transactionHash || 'test_transaction_hash');
    
    res.json({
      success: true,
      message: `TON —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ${amount} TON –¥–ª—è ${playerData.first_name}`,
      data: { playerData, amount, transactionHash },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ TON —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// ===== –î–û–ë–ê–í–ò–¢–¨ –í routes/test.js –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è =====

// üß™ POST /api/test/send-player-message - —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É
router.post('/send-player-message', async (req, res) => {
  try {
    const { playerId, message } = req.body;
    
    if (process.env.NODE_ENV === 'development') console.log('üß™ === –¢–ï–°–¢–û–í–ê–Ø –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ò–ì–†–û–ö–£ ===');
    if (process.env.NODE_ENV === 'development') console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { playerId, message });
    
    if (!playerId || !message) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã playerId –∏ message' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ
    const pool = require('../db');
    const playerResult = await pool.query(
      'SELECT telegram_id, username, first_name FROM players WHERE telegram_id = $1',
      [playerId]
    );
    
    if (playerResult.rows.length === 0) {
      return res.status(404).json({
        success: false,
        error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        player_id: playerId
      });
    }
    
    const player = playerResult.rows[0];
    if (process.env.NODE_ENV === 'development') console.log('üë§ –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫:', player);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const axios = require('axios');
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!BOT_TOKEN) {
      return res.status(500).json({
        success: false,
        error: 'TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }
    
    const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const testMessage = `üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç CosmoClick</b>\n\n${message}\n\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
    
    if (process.env.NODE_ENV === 'development') console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram:', {
      url: telegramUrl.replace(BOT_TOKEN, 'HIDDEN'),
      chat_id: playerId,
      message_preview: testMessage.substring(0, 100)
    });
    
    const telegramResponse = await axios.post(telegramUrl, {
      chat_id: playerId,
      text: testMessage,
      parse_mode: 'HTML'
    });
    
    if (process.env.NODE_ENV === 'development') console.log('üì• –û—Ç–≤–µ—Ç Telegram:', telegramResponse.data);
    
    if (telegramResponse.data.ok) {
      res.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
        player: player,
        telegram_response: {
          message_id: telegramResponse.data.result.message_id,
          chat_id: telegramResponse.data.result.chat.id
        }
      });
    } else {
      res.status(400).json({
        success: false,
        error: `Telegram API –æ—à–∏–±–∫–∞: ${telegramResponse.data.description}`,
        error_code: telegramResponse.data.error_code,
        player: player
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: error.stack
    });
  }
});

// üí∏ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –≤—ã–≤–æ–¥
router.post('/notify-withdrawal', adminAuth, async (req, res) => {
  try {
    const { playerData, amount, withdrawalId } = req.body;
    
    if (!playerData || !amount || !withdrawalId) {
      return res.status(400).json({
        error: 'playerData, amount –∏ withdrawalId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        required: ['playerData', 'amount', 'withdrawalId']
      });
    }
    
    if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ Withdrawal —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', { playerData, amount, withdrawalId });
    
    await notifyWithdrawalRequest(playerData, amount, withdrawalId);
    
    res.json({
      success: true,
      message: `Withdrawal —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ó–∞—è–≤–∫–∞ ${withdrawalId} –Ω–∞ ${amount} TON`,
      data: { playerData, amount, withdrawalId },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Withdrawal —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// üö® –¢–µ—Å—Ç–æ–≤–æ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
router.post('/notify-critical', async (req, res) => {
  try {
    const { eventType, details } = req.body;
    
    if (!eventType || !details) {
      return res.status(400).json({
        error: 'eventType –∏ details –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        required: ['eventType', 'details']
      });
    }
    
    if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', { eventType, details });
    
    await notifyCriticalEvent(eventType, details);
    
    res.json({
      success: true,
      message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ${eventType}`,
      data: { eventType, details },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// üîÑ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON
router.post('/update-ton-rate', adminAuth, async (req, res) => {
  try {
    const { newRate } = req.body;
    
    if (!newRate || newRate <= 0) {
      return res.status(400).json({
        error: 'newRate –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
        received: newRate
      });
    }
    
    if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON:', newRate);
    
    const pool = require('../db');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å
    const prevResult = await pool.query(
      'SELECT rate FROM exchange_rates WHERE currency_pair = $1 ORDER BY last_updated DESC LIMIT 1',
      ['TON_USD']
    );
    
    const previousRate = prevResult.rows[0]?.rate || 3.30;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
    await pool.query(`
      INSERT INTO exchange_rates (currency_pair, rate, previous_rate, source, metadata)
      VALUES ($1, $2, $3, $4, $5)
    `, [
      'TON_USD',
      newRate,
      previousRate,
      'test_manual',
      JSON.stringify({
        test_update: true,
        admin_test: true,
        rate_change_percent: ((newRate - previousRate) / previousRate * 100).toFixed(2)
      })
    ]);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å Stars ‚Üí CS
    await pool.query('SELECT update_stars_cs_rate()');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await sendAdminNotification(`üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON</b>

üìà –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω: <b>${previousRate} ‚Üí ${newRate} USD</b>
üîß –ò—Å—Ç–æ—á–Ω–∏–∫: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!`);
    
    res.json({
      success: true,
      message: `–ö—É—Ä—Å TON –æ–±–Ω–æ–≤–ª–µ–Ω! ${previousRate} ‚Üí ${newRate}`,
      data: {
        previousRate,
        newRate,
        changePercent: ((newRate - previousRate) / previousRate * 100).toFixed(2) + '%',
        source: 'test_manual'
      },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// üì± –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
router.post('/simple-message', adminAuth, async (req, res) => {
  try {
    const { message } = req.body;
    
    if (!message) {
      return res.status(400).json({
        error: 'message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
        example: '{"message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"}'
      });
    }
    
    if (process.env.NODE_ENV === 'development') console.log('üß™ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
    
    await sendAdminNotification(`üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

${message}

üïê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`);
    
    res.json({
      success: true,
      message: '–ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
      data: { message },
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// üëë POST /api/test/grant-vip - –ü—Ä–æ—Å—Ç–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è VIP (–¥–ª—è —Ç–µ—Å—Ç–∞)
router.post('/grant-vip', async (req, res) => {
  try {
    const { playerId } = req.body;

    if (!playerId) {
      return res.status(400).json({ error: 'playerId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    if (process.env.NODE_ENV === 'development') console.log('üß™ –ê–∫—Ç–∏–≤–∞—Ü–∏—è VIP –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:', playerId);

    const pool = require('../db');

    const result = await pool.query(`
      UPDATE players
      SET premium_no_ads_until = NOW() + INTERVAL '30 days'
      WHERE telegram_id = $1
      RETURNING telegram_id, first_name, premium_no_ads_until, premium_no_ads_forever
    `, [playerId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const player = result.rows[0];

    res.json({
      success: true,
      message: 'VIP —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π!',
      player: {
        telegram_id: player.telegram_id,
        name: player.first_name,
        vip_until: player.premium_no_ads_until,
        vip_forever: player.premium_no_ads_forever
      },
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VIP:', error);
    res.status(500).json({ error: error.message });
  }
});

// üîÑ POST /api/test/reset-player - –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏–≥—Ä–æ–∫–∞
router.post('/reset-player', async (req, res) => {
  try {
    const { playerId } = req.body;

    if (!playerId) {
      return res.status(400).json({ error: 'playerId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    if (process.env.NODE_ENV === 'development') console.log('üß™ === –ü–û–õ–ù–´–ô –°–ë–†–û–° –ò–ì–†–û–ö–ê ===');
    if (process.env.NODE_ENV === 'development') console.log('üìã Player ID:', playerId);

    const pool = require('../db');

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ –Ω–µ –ª–æ–º–∞–ª–∏ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å)
    if (process.env.NODE_ENV === 'development') console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞...');

    const deleteQueries = [
      { table: 'balance_history', query: 'DELETE FROM balance_history WHERE telegram_id = $1' },
      { table: 'player_actions', query: 'DELETE FROM player_actions WHERE telegram_id = $1' },
      { table: 'player_quests', query: 'DELETE FROM player_quests WHERE telegram_id = $1' },
      { table: 'quests', query: 'DELETE FROM quests WHERE telegram_id = $1' },
      { table: 'suspicious_activity', query: 'DELETE FROM suspicious_activity WHERE telegram_id = $1' },
      { table: 'ton_staking', query: 'DELETE FROM ton_staking WHERE telegram_id = $1' },
      { table: 'systems', query: 'DELETE FROM systems WHERE telegram_id = $1' },
      { table: 'honor_board', query: 'DELETE FROM honor_board WHERE telegram_id = $1' },
      { table: 'referrals', query: 'DELETE FROM referrals WHERE referred_telegram_id = $1 OR referrer_telegram_id = $1' },
      { table: 'galactic_empire_ships', query: 'DELETE FROM galactic_empire_ships WHERE player_id = $1' },
      { table: 'galactic_empire_modules', query: 'DELETE FROM galactic_empire_modules WHERE player_id = $1' },
      { table: 'cosmic_fleet_ships', query: 'DELETE FROM cosmic_fleet_ships WHERE player_id = $1' },
      { table: 'cosmic_fleet_formations', query: 'DELETE FROM cosmic_fleet_formations WHERE telegram_id = $1' },
      { table: 'battle_history', query: 'DELETE FROM battle_history WHERE player1_id = $1 OR player2_id = $1' },
    ];

    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –æ–¥–Ω–æ–π –ë–ï–ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for (const { table, query } of deleteQueries) {
      try {
        const result = await pool.query(query, [playerId]);
        if (process.env.NODE_ENV === 'development') console.log(`   ‚úÖ ${table}: —É–¥–∞–ª–µ–Ω–æ ${result.rowCount} –∑–∞–ø–∏—Å–µ–π`);
      } catch (err) {
        if (process.env.NODE_ENV === 'development') console.log(`   ‚ö†Ô∏è ${table}: ${err.message} (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)`);
      }
    }

    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    if (process.env.NODE_ENV === 'development') console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã players...');
    try {
      await pool.query('DELETE FROM players WHERE telegram_id = $1', [playerId]);
      if (process.env.NODE_ENV === 'development') console.log('   ‚úÖ –ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω');
    } catch (err) {
      if (process.env.NODE_ENV === 'development') console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞: ${err.message}`);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∑–∞–Ω–æ–≤–æ
    if (process.env.NODE_ENV === 'development') console.log('üë§ –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∑–∞–Ω–æ–≤–æ...');
    try {
      await pool.query(`
        INSERT INTO players (
          telegram_id, username, ccc, cs, ton,
          asteroids, drones, cargo_levels, unlocked_systems,
          asteroid_total_data, max_cargo_capacity_data, mining_speed_data,
          collected_by_system, last_collection_time, color, created_at
        ) VALUES (
          $1, 'TestUser', 0, 0, 0,
          '[]'::jsonb, '[]'::jsonb, '[]'::jsonb, '[1]'::jsonb,
          '{}'::jsonb, '{}'::jsonb, '{}'::jsonb,
          '{"1": 0, "2": 0, "3": 0, "4": 0}'::jsonb,
          jsonb_build_object(
            '1', NOW(), '2', NOW(), '3', NOW(), '4', NOW()
          ),
          '#00f0ff', NOW()
        )
      `, [playerId]);
      if (process.env.NODE_ENV === 'development') console.log('   ‚úÖ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ!');
    } catch (err) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞: ${err.message}`);
    }

    res.json({
      success: true,
      message: `–ò–≥—Ä–æ–∫ ${playerId} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω—É–ª–µ–Ω –∏ —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ!`,
      player_id: playerId,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä–æ–∫–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
router.get('/endpoints', (req, res) => {
  res.json({
    title: 'üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã CosmoClick',
    baseUrl: 'https://cosmoclick-backend.onrender.com/api/test',
    adminId: '1222791281',
    endpoints: [
      {
        method: 'POST',
        path: '/daily-summary',
        description: 'üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É',
        auth: 'admin',
        body: { telegramId: '1222791281', force: true }
      },
      {
        method: 'POST', 
        path: '/notify-stars',
        description: 'üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ Stars',
        auth: 'admin',
        body: {
          telegramId: '1222791281',
          playerData: { telegram_id: '1222791281', first_name: 'Admin' },
          amount: 100
        }
      },
      {
        method: 'POST',
        path: '/notify-ton', 
        description: 'üíé –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ TON',
        auth: 'admin',
        body: {
          telegramId: '1222791281',
          playerData: { telegram_id: '1222791281', first_name: 'Admin' },
          amount: 5.5,
          transactionHash: 'test123'
        }
      },
      {
        method: 'POST',
        path: '/notify-withdrawal',
        description: 'üí∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –≤—ã–≤–æ–¥',
        auth: 'admin', 
        body: {
          telegramId: '1222791281',
          playerData: { telegram_id: '1222791281', first_name: 'Admin' },
          amount: 10.0,
          withdrawalId: 'test_withdrawal_123'
        }
      },
      {
        method: 'POST',
        path: '/notify-critical',
        description: 'üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        auth: 'none',
        body: {
          eventType: 'Test Event',
          details: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è'
        }
      },
      {
        method: 'POST',
        path: '/update-ton-rate',
        description: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å TON',
        auth: 'admin',
        body: { telegramId: '1222791281', newRate: 6.25 }
      },
      {
        method: 'POST',
        path: '/simple-message',
        description: 'üì± –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É',
        auth: 'admin',
        body: { telegramId: '1222791281', message: '–ü—Ä–∏–≤–µ—Ç –∏–∑ Postman!' }
      }
    ],
    notes: [
      'üîê –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å auth: admin —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è ID 1222791281',
      'üì± –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram',
      'üß™ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      '‚ö†Ô∏è –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤!'
    ],
    timestamp: new Date().toISOString()
  });
});

module.exports = router;