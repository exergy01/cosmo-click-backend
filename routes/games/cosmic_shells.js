const express = require('express');
const router = express.Router();
const pool = require('../../db');
const crypto = require('crypto');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const MIN_BET = 100;
const MAX_BET = 100000;
const WIN_MULTIPLIER = 2;
const DAILY_GAME_LIMIT = 5;
const MAX_AD_GAMES = 20;
const JACKPOT_CONTRIBUTION = 0.001; // 0.1%

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–≥—Ä—ã
function createSecureGame(betAmount) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const randomBytes = crypto.randomBytes(4);
    const randomNumber = randomBytes.readUInt32BE(0);
    
    // 1 –∏–∑ 3 –ø–æ–∑–∏—Ü–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–∞–ª–∞–∫—Ç–∏–∫—É (33.33% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)
    const winningPosition = randomNumber % 3;
    const positions = [0, 1, 2];
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥: 1 –≥–∞–ª–∞–∫—Ç–∏–∫–∞ + 2 —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã
    const gameLayout = ['blackhole', 'blackhole', 'blackhole'];
    gameLayout[winningPosition] = 'galaxy';
    
    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    const gameData = {
        positions: gameLayout,
        winningPosition,
        betAmount,
        timestamp: Date.now()
    };
    
    const gameHash = crypto
        .createHash('sha256')
        .update(JSON.stringify(gameData))
        .digest('hex');
    
    return {
        gameId: gameHash,
        positions: gameLayout,
        winningPosition,
        encrypted: true
    };
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã (–ª–∏–º–∏—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
router.get('/status/:telegramId', async (req, res) => {
    try {
        console.log('üõ∏ Cosmic shells status request for:', req.params.telegramId);
        const { telegramId } = req.params;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏–≥—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date().toDateString();
        let limitsResult = await pool.query(`
            SELECT daily_games, daily_ads_watched, last_reset_date 
            FROM player_game_limits 
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
        `, [telegramId]);

        let dailyGames = 0;
        let dailyAds = 0;

        if (limitsResult.rows.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            await pool.query(`
                INSERT INTO player_game_limits (telegram_id, game_type, daily_games, daily_ads_watched, last_reset_date)
                VALUES ($1, 'cosmic_shells', 0, 0, CURRENT_DATE)
            `, [telegramId]);
        } else {
            const limits = limitsResult.rows[0];
            const lastReset = new Date(limits.last_reset_date).toDateString();
            
            // –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
            if (lastReset !== today) {
                await pool.query(`
                    UPDATE player_game_limits 
                    SET daily_games = 0, daily_ads_watched = 0, last_reset_date = CURRENT_DATE
                    WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
                `, [telegramId]);
                dailyGames = 0;
                dailyAds = 0;
            } else {
                dailyGames = limits.daily_games;
                dailyAds = limits.daily_ads_watched;
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        const statsResult = await pool.query(`
            SELECT total_games, total_wins, total_losses, total_bet, total_won, best_streak, worst_streak
            FROM minigames_stats 
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
        `, [telegramId]);

        const stats = statsResult.rows[0] || {
            total_games: 0,
            total_wins: 0,
            total_losses: 0,
            total_bet: 0,
            total_won: 0,
            best_streak: 0,
            worst_streak: 0
        };

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        const balanceResult = await pool.query(
            'SELECT ccc FROM players WHERE telegram_id = $1',
            [telegramId]
        );

        const balance = balanceResult.rows[0]?.ccc || 0;

        console.log('üõ∏ Cosmic shells status response:', { 
            balance: parseFloat(balance), 
            dailyGames, 
            gamesLeft: Math.max(0, DAILY_GAME_LIMIT - dailyGames) 
        });

        res.json({
            success: true,
            balance: parseFloat(balance),
            dailyGames,
            dailyAds,
            canPlayFree: dailyGames < DAILY_GAME_LIMIT,
            canWatchAd: dailyAds < MAX_AD_GAMES,
            gamesLeft: Math.max(0, DAILY_GAME_LIMIT - dailyGames),
            adsLeft: Math.max(0, MAX_AD_GAMES - dailyAds),
            minBet: MIN_BET,
            maxBet: MAX_BET,
            winMultiplier: WIN_MULTIPLIER,
            stats
        });

    } catch (error) {
        console.error('üõ∏‚ùå Cosmic shells status error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

// –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
router.post('/start-game/:telegramId', async (req, res) => {
    try {
        console.log('üõ∏ Starting new cosmic shells game for:', req.params.telegramId, 'Bet:', req.body.betAmount);
        const { telegramId } = req.params;
        const { betAmount } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if (!betAmount || betAmount < MIN_BET || betAmount > MAX_BET) {
            console.log('üõ∏‚ùå Invalid bet amount:', betAmount);
            return res.status(400).json({
                success: false,
                error: `–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${MIN_BET} –¥–æ ${MAX_BET} CCC`
            });
        }

        await pool.query('BEGIN');

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
            const balanceResult = await pool.query(
                'SELECT ccc FROM players WHERE telegram_id = $1',
                [telegramId]
            );

            if (balanceResult.rows.length === 0) {
                await pool.query('ROLLBACK');
                return res.status(400).json({
                    success: false,
                    error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            const currentBalance = parseFloat(balanceResult.rows[0].ccc);
            console.log('üõ∏ Player balance:', currentBalance, 'Bet:', betAmount);
            
            if (currentBalance < betAmount) {
                await pool.query('ROLLBACK');
                return res.status(400).json({
                    success: false,
                    error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
                });
            }

            // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —Å—Ä–∞–∑—É
            await pool.query(
                'UPDATE players SET ccc = ccc - $1 WHERE telegram_id = $2',
                [betAmount, telegramId]
            );

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–≥—Ä
            const limitsResult = await pool.query(`
                SELECT daily_games FROM player_game_limits 
                WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
            `, [telegramId]);

            const dailyGames = limitsResult.rows[0]?.daily_games || 0;
            if (dailyGames >= DAILY_GAME_LIMIT) {
                await pool.query('ROLLBACK');
                return res.status(400).json({
                    success: false,
                    error: '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–≥—Ä –∏—Å—á–µ—Ä–ø–∞–Ω'
                });
            }

            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–≥—Ä—É
            const game = createSecureGame(betAmount);
            console.log('üõ∏ Created game:', { gameId: game.gameId, winningPosition: game.winningPosition, positions: game.positions });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ
            await pool.query(`
                INSERT INTO minigames_history (telegram_id, game_type, bet_amount, game_result)
                VALUES ($1, 'cosmic_shells', $2, $3)
            `, [telegramId, betAmount, JSON.stringify({
                gameId: game.gameId,
                positions: game.positions,
                winningPosition: game.winningPosition,
                status: 'started',
                timestamp: Date.now()
            })]);

            await pool.query('COMMIT');

            console.log('üõ∏‚úÖ Game started successfully:', game.gameId);
            res.json({
                success: true,
                gameId: game.gameId,
                message: '–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–µ–ª–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è!'
            });

        } catch (error) {
            await pool.query('ROLLBACK');
            throw error;
        }

    } catch (error) {
        console.error('üõ∏‚ùå Start cosmic shells game error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

// –°–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∞—Ä–µ–ª–∫–∏
router.post('/make-choice/:telegramId', async (req, res) => {
    try {
        console.log('üõ∏ Making choice for:', req.params.telegramId, 'Body:', req.body);
        const { telegramId } = req.params;
        const { gameId, chosenPosition } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
        if (chosenPosition < 0 || chosenPosition > 2) {
            console.log('üõ∏‚ùå Invalid position:', chosenPosition);
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ç–∞—Ä–µ–ª–∫–∏'
            });
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏–∏
        console.log('üõ∏ Looking for game:', gameId);
        const gameResult = await pool.query(`
            SELECT * FROM minigames_history 
            WHERE telegram_id = $1 AND game_result->>'gameId' = $2 
            ORDER BY created_at DESC LIMIT 1
        `, [telegramId, gameId]);

        if (gameResult.rows.length === 0) {
            console.log('üõ∏‚ùå Game not found:', gameId);
            return res.status(400).json({
                success: false,
                error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º JSON.parse, —Ç–∞–∫ –∫–∞–∫ PostgreSQL JSONB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç
        const gameData = gameResult.rows[0].game_result;
        const betAmount = gameResult.rows[0].bet_amount;
        console.log('üõ∏ Found game data:', gameData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (gameData.status !== 'started') {
            console.log('üõ∏‚ùå Game already completed:', gameData.status);
            return res.status(400).json({
                success: false,
                error: '–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const isWin = chosenPosition === gameData.winningPosition;
        const winAmount = isWin ? betAmount * WIN_MULTIPLIER : 0;
        const profit = winAmount - betAmount;

        console.log('üõ∏ Game result:', { 
            chosenPosition, 
            winningPosition: gameData.winningPosition, 
            isWin, 
            winAmount, 
            profit 
        });

        await pool.query('BEGIN');

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
            if (isWin) {
                // –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –Ω–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞)
                await pool.query(
                    'UPDATE players SET ccc = ccc + $1 WHERE telegram_id = $2',
                    [winAmount, telegramId]
                );
                console.log('üõ∏‚úÖ Win! Added to balance:', winAmount);
            } else {
                console.log('üõ∏üíÄ Loss! No money returned');
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∂–µ–∫–ø–æ—Ç –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            let jackpotContribution = 0;
            if (!isWin) {
                jackpotContribution = Math.floor(betAmount * JACKPOT_CONTRIBUTION);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∂–µ–∫–ø–æ—Ç
                await pool.query(`
                    UPDATE jackpot 
                    SET current_amount = current_amount + $1, 
                        total_contributed = total_contributed + $1, 
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = 1
                `, [jackpotContribution]);
                
                console.log('üõ∏üí∞ Added to jackpot:', jackpotContribution, 'from bet:', betAmount);
            } else {
                console.log('üõ∏üéâ Win! No jackpot contribution');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä—ã
            const finalGameData = {
                ...gameData,
                chosenPosition,
                isWin,
                winAmount,
                profit,
                status: 'completed',
                completedAt: Date.now()
            };

            await pool.query(`
                UPDATE minigames_history 
                SET win_amount = $1, game_result = $2, jackpot_contribution = $3
                WHERE id = $4
            `, [winAmount, JSON.stringify(finalGameData), jackpotContribution, gameResult.rows[0].id]);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            await pool.query(`
                INSERT INTO minigames_stats (telegram_id, game_type, total_games, total_wins, total_losses, total_bet, total_won)
                VALUES ($1, 'cosmic_shells', 1, $2, $3, $4, $5)
                ON CONFLICT (telegram_id, game_type)
                DO UPDATE SET
                    total_games = minigames_stats.total_games + 1,
                    total_wins = minigames_stats.total_wins + $2,
                    total_losses = minigames_stats.total_losses + $3,
                    total_bet = minigames_stats.total_bet + $4,
                    total_won = minigames_stats.total_won + $5,
                    updated_at = CURRENT_TIMESTAMP
            `, [telegramId, isWin ? 1 : 0, isWin ? 0 : 1, betAmount, winAmount]);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –∏–≥—Ä
            await pool.query(`
                UPDATE player_game_limits 
                SET daily_games = daily_games + 1
                WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
            `, [telegramId]);

            await pool.query('COMMIT');

            console.log('üõ∏‚úÖ Choice processed successfully');
            res.json({
                success: true,
                result: {
                    isWin,
                    chosenPosition,
                    winningPosition: gameData.winningPosition,
                    positions: gameData.positions,
                    betAmount,
                    winAmount,
                    profit
                }
            });

        } catch (error) {
            await pool.query('ROLLBACK');
            throw error;
        }

    } catch (error) {
        console.error('üõ∏‚ùå Make choice cosmic shells error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
router.get('/history/:telegramId', async (req, res) => {
    try {
        console.log('üõ∏ Getting game history for:', req.params.telegramId);
        const { telegramId } = req.params;
        const { limit = 20, offset = 0 } = req.query;

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
        const historyResult = await pool.query(`
            SELECT 
                id,
                bet_amount,
                win_amount,
                game_result,
                jackpot_contribution,
                created_at,
                CASE 
                    WHEN win_amount > 0 THEN 'win'
                    ELSE 'loss'
                END as result_type
            FROM minigames_history 
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
            ORDER BY created_at DESC 
            LIMIT $2 OFFSET $3
        `, [telegramId, limit, offset]);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const formattedHistory = historyResult.rows.map(game => {
            const gameData = game.game_result;
            return {
                id: game.id,
                date: game.created_at,
                betAmount: parseInt(game.bet_amount),
                winAmount: parseInt(game.win_amount || 0),
                profit: parseInt(game.win_amount || 0) - parseInt(game.bet_amount),
                result: game.result_type,
                chosenPosition: gameData.chosenPosition || null,
                winningPosition: gameData.winningPosition || null,
                positions: gameData.positions || [],
                jackpotContribution: parseInt(game.jackpot_contribution || 0),
                isCompleted: gameData.status === 'completed'
            };
        });

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalResult = await pool.query(`
            SELECT COUNT(*) as total_games
            FROM minigames_history 
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
        `, [telegramId]);

        console.log('üõ∏ Game history response:', { 
            total: parseInt(totalResult.rows[0].total_games),
            games: formattedHistory.length 
        });

        res.json({
            success: true,
            history: formattedHistory,
            total: parseInt(totalResult.rows[0].total_games),
            hasMore: (parseInt(offset) + formattedHistory.length) < parseInt(totalResult.rows[0].total_games)
        });

    } catch (error) {
        console.error('üõ∏‚ùå Game history error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

// –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É
router.post('/watch-ad/:telegramId', async (req, res) => {
    try {
        console.log('üõ∏ Watch ad request for:', req.params.telegramId);
        const { telegramId } = req.params;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ–∫–ª–∞–º—ã
        const limitsResult = await pool.query(`
            SELECT daily_ads_watched FROM player_game_limits 
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
        `, [telegramId]);

        const dailyAds = limitsResult.rows[0]?.daily_ads_watched || 0;
        
        if (dailyAds >= MAX_AD_GAMES) {
            return res.status(400).json({
                success: false,
                error: '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ä–µ–∫–ª–∞–º—ã –∏—Å—á–µ—Ä–ø–∞–Ω'
            });
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∫–ª–∞–º—ã (—ç—Ç–æ –¥–∞—ë—Ç –ø—Ä–∞–≤–æ –Ω–∞ –µ—â–µ –æ–¥–Ω—É –∏–≥—Ä—É)
        await pool.query(`
            UPDATE player_game_limits 
            SET daily_ads_watched = daily_ads_watched + 1
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
        `, [telegramId]);

        console.log('üõ∏‚úÖ Ad watched, games unlocked');
        res.json({
            success: true,
            adsRemaining: MAX_AD_GAMES - dailyAds - 1,
            message: '–ü–æ–ª—É—á–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞!'
        });

    } catch (error) {
        console.error('üõ∏‚ùå Watch ad cosmic shells error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

module.exports = router;