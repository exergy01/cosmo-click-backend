const express = require('express');
const router = express.Router();
const pool = require('../../db');
const crypto = require('crypto');

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã –∫–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö
const MIN_BET = 100;
const MAX_BET = 5000; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö (–±—ã–ª–æ 100000)
const WIN_MULTIPLIER = 2;
const DAILY_GAME_LIMIT = 25; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: 25 –±–∞–∑–æ–≤—ã—Ö –∏–≥—Ä –∫–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö (–±—ã–ª–æ 5)
const MAX_AD_GAMES = 10; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: 10 —Ä–µ–∫–ª–∞–º –∫–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö (–±—ã–ª–æ 20)
const GAMES_PER_AD = 20; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: 20 –∏–≥—Ä –∑–∞ —Ä–µ–∫–ª–∞–º—É –∫–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö (–±—ã–ª–æ 1)
const JACKPOT_CONTRIBUTION = 0.001; // 0.1%

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–≥—Ä—ã
function createSecureGame(betAmount) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const randomBytes = crypto.randomBytes(4);
    const randomNumber = randomBytes.readUInt32BE(0);
    
    // 1 –∏–∑ 3 –ø–æ–∑–∏—Ü–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–∞–ª–∞–∫—Ç–∏–∫—É (33.33% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)
    const winningPosition = randomNumber % 3;
    const positions = [0, 1, 2];
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥: 1 –≥–∞–ª–∞–∫—Ç–∏–∫–∞ + 2 —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã
    const gameLayout = ['blackhole', 'blackhole', 'blackhole'];
    gameLayout[winningPosition] = 'galaxy';
    
    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    const gameData = {
        positions: gameLayout,
        winningPosition,
        betAmount,
        timestamp: Date.now()
    };
    
    const gameHash = crypto
        .createHash('sha256')
        .update(JSON.stringify(gameData))
        .digest('hex');
    
    return {
        gameId: gameHash,
        positions: gameLayout,
        winningPosition,
        encrypted: true
    };
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–∞—Ç
async function getGameLimits(telegramId) {
    if (process.env.NODE_ENV === 'development') console.log('üõ∏ Getting game limits for:', telegramId);
    
    let limitsResult = await pool.query(`
        SELECT daily_games, daily_ads_watched, last_reset_date 
        FROM player_game_limits 
        WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
    `, [telegramId]);

    if (limitsResult.rows.length === 0) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        await pool.query(`
            INSERT INTO player_game_limits (telegram_id, game_type, daily_games, daily_ads_watched, last_reset_date)
            VALUES ($1, 'cosmic_shells', 0, 0, CURRENT_DATE)
        `, [telegramId]);
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Created new limits record for player:', telegramId);
        return { dailyGames: 0, dailyAds: 0 };
    }

    const limits = limitsResult.rows[0];
    const lastResetDate = limits.last_reset_date;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–¢–†–û–ì–û –º–µ–Ω—å—à–µ (–≤—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞)
    const needsReset = await pool.query(`
        SELECT 
            $1::date as last_reset,
            CURRENT_DATE as current_date,
            CASE 
                WHEN $1::date < CURRENT_DATE THEN true 
                ELSE false 
            END as needs_reset
    `, [lastResetDate]);
    
    const resetInfo = needsReset.rows[0];
    const shouldReset = resetInfo.needs_reset;
    
    if (process.env.NODE_ENV === 'development') console.log('üõ∏ DETAILED Date check:', {
        lastResetDate: resetInfo.last_reset,
        currentDate: resetInfo.current_date,
        shouldReset: shouldReset,
        comparison: resetInfo.last_reset + ' < ' + resetInfo.current_date + ' = ' + shouldReset,
        currentLimits: { dailyGames: limits.daily_games, dailyAds: limits.daily_ads_watched }
    });
    
    if (shouldReset) {
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ RESETTING limits - detected new day');
        
        await pool.query(`
            UPDATE player_game_limits 
            SET daily_games = 0, daily_ads_watched = 0, last_reset_date = CURRENT_DATE
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
        `, [telegramId]);
        
        return { dailyGames: 0, dailyAds: 0 };
    }

    // –¢–æ—Ç –∂–µ –¥–µ–Ω—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (process.env.NODE_ENV === 'development') console.log('üõ∏ SAME DAY - using existing limits:', {
        dailyGames: limits.daily_games, 
        dailyAds: limits.daily_ads_watched 
    });
    
    return { 
        dailyGames: limits.daily_games, 
        dailyAds: limits.daily_ads_watched 
    };
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∫–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö (25 + 10*20 = 250)
function calculateGamesAvailable(dailyGames, dailyAds) {
    const totalGamesAvailable = DAILY_GAME_LIMIT + (dailyAds * GAMES_PER_AD);
    const gamesLeft = Math.max(0, totalGamesAvailable - dailyGames);
    const canPlayFree = gamesLeft > 0;
    const canWatchAd = dailyAds < MAX_AD_GAMES && gamesLeft === 0;
    
    if (process.env.NODE_ENV === 'development') console.log('üõ∏ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –∏–≥—Ä (25 + 10*20 = 250 MAX):', {
        dailyGames,
        dailyAds,
        totalGamesAvailable,
        gamesLeft,
        canPlayFree,
        canWatchAd,
        maxTotalGames: DAILY_GAME_LIMIT + (MAX_AD_GAMES * GAMES_PER_AD)
    });
    
    return { gamesLeft, canPlayFree, canWatchAd };
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã (–ª–∏–º–∏—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
router.get('/status/:telegramId', async (req, res) => {
    try {
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Cosmic shells status request for:', req.params.telegramId);
        const { telegramId } = req.params;
        
        const { dailyGames, dailyAds } = await getGameLimits(telegramId);
        const { gamesLeft, canPlayFree, canWatchAd } = calculateGamesAvailable(dailyGames, dailyAds);

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        const statsResult = await pool.query(`
            SELECT total_games, total_wins, total_losses, total_bet, total_won, best_streak, worst_streak
            FROM minigames_stats 
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
        `, [telegramId]);

        const stats = statsResult.rows[0] || {
            total_games: 0,
            total_wins: 0,
            total_losses: 0,
            total_bet: 0,
            total_won: 0,
            best_streak: 0,
            worst_streak: 0
        };

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        const balanceResult = await pool.query(
            'SELECT ccc FROM players WHERE telegram_id = $1',
            [telegramId]
        );

        const balance = balanceResult.rows[0]?.ccc || 0;

        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Cosmic shells status response:', {
            balance: parseFloat(balance), 
            dailyGames, 
            dailyAds,
            gamesLeft,
            canPlayFree,
            canWatchAd
        });

        res.json({
            success: true,
            balance: parseFloat(balance),
            dailyGames,
            dailyAds,
            canPlayFree,
            canWatchAd,
            gamesLeft,
            adsLeft: Math.max(0, MAX_AD_GAMES - dailyAds),
            minBet: MIN_BET,
            maxBet: MAX_BET,
            winMultiplier: WIN_MULTIPLIER,
            stats
        });

    } catch (error) {
        console.error('üõ∏‚ùå Cosmic shells status error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

// –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
router.post('/start-game/:telegramId', async (req, res) => {
    try {
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Starting new cosmic shells game for:', req.params.telegramId, 'Bet:', req.body.betAmount);
        const { telegramId } = req.params;
        const { betAmount } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if (!betAmount || betAmount < MIN_BET || betAmount > MAX_BET) {
            if (process.env.NODE_ENV === 'development') console.log('üõ∏‚ùå Invalid bet amount:', betAmount);
            return res.status(400).json({
                success: false,
                error: `–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${MIN_BET} –¥–æ ${MAX_BET} CCC`
            });
        }

        await pool.query('BEGIN');

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
            const balanceResult = await pool.query(
                'SELECT ccc FROM players WHERE telegram_id = $1',
                [telegramId]
            );

            if (balanceResult.rows.length === 0) {
                await pool.query('ROLLBACK');
                return res.status(400).json({
                    success: false,
                    error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            const currentBalance = parseFloat(balanceResult.rows[0].ccc);
            if (process.env.NODE_ENV === 'development') console.log('üõ∏ Player balance:', currentBalance, 'Bet:', betAmount);
            
            if (currentBalance < betAmount) {
                await pool.query('ROLLBACK');
                return res.status(400).json({
                    success: false,
                    error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
                });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
            const { dailyGames, dailyAds } = await getGameLimits(telegramId);
            const { canPlayFree } = calculateGamesAvailable(dailyGames, dailyAds);
            
            if (!canPlayFree) {
                await pool.query('ROLLBACK');
                return res.status(400).json({
                    success: false,
                    error: '–õ–∏–º–∏—Ç –∏–≥—Ä –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä.'
                });
            }

            // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —Å—Ä–∞–∑—É
            await pool.query(
                'UPDATE players SET ccc = ccc - $1 WHERE telegram_id = $2',
                [betAmount, telegramId]
            );

            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–≥—Ä—É
            const game = createSecureGame(betAmount);
            if (process.env.NODE_ENV === 'development') console.log('üõ∏ Created game:', { gameId: game.gameId, winningPosition: game.winningPosition, positions: game.positions });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ
            await pool.query(`
                INSERT INTO minigames_history (telegram_id, game_type, bet_amount, game_result)
                VALUES ($1, 'cosmic_shells', $2, $3)
            `, [telegramId, betAmount, JSON.stringify({
                gameId: game.gameId,
                positions: game.positions,
                winningPosition: game.winningPosition,
                status: 'started',
                timestamp: Date.now()
            })]);

            await pool.query('COMMIT');

            if (process.env.NODE_ENV === 'development') console.log('üõ∏‚úÖ Game started successfully:', game.gameId);
            res.json({
                success: true,
                gameId: game.gameId,
                message: '–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–µ–ª–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è!'
            });

        } catch (error) {
            await pool.query('ROLLBACK');
            throw error;
        }

    } catch (error) {
        console.error('üõ∏‚ùå Start cosmic shells game error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

// –°–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∞—Ä–µ–ª–∫–∏
router.post('/make-choice/:telegramId', async (req, res) => {
    try {
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Making choice for:', req.params.telegramId, 'Body:', req.body);
        const { telegramId } = req.params;
        const { gameId, chosenPosition } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
        if (chosenPosition < 0 || chosenPosition > 2) {
            if (process.env.NODE_ENV === 'development') console.log('üõ∏‚ùå Invalid position:', chosenPosition);
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ç–∞—Ä–µ–ª–∫–∏'
            });
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏–∏
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Looking for game:', gameId);
        const gameResult = await pool.query(`
            SELECT * FROM minigames_history 
            WHERE telegram_id = $1 AND game_result->>'gameId' = $2 
            ORDER BY created_at DESC LIMIT 1
        `, [telegramId, gameId]);

        if (gameResult.rows.length === 0) {
            if (process.env.NODE_ENV === 'development') console.log('üõ∏‚ùå Game not found:', gameId);
            return res.status(400).json({
                success: false,
                error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        const gameData = gameResult.rows[0].game_result;
        const betAmount = gameResult.rows[0].bet_amount;
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Found game data:', gameData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (gameData.status !== 'started') {
            if (process.env.NODE_ENV === 'development') console.log('üõ∏‚ùå Game already completed:', gameData.status);
            return res.status(400).json({
                success: false,
                error: '–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const isWin = chosenPosition === gameData.winningPosition;
        const winAmount = isWin ? betAmount * WIN_MULTIPLIER : 0;
        const profit = winAmount - betAmount;

        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Game result:', {
            chosenPosition, 
            winningPosition: gameData.winningPosition, 
            isWin, 
            winAmount, 
            profit 
        });

        await pool.query('BEGIN');

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
            if (isWin) {
                // –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –Ω–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (—Å—Ç–∞–≤–∫–∞ —É–∂–µ —Å–ø–∏—Å–∞–Ω–∞)
                await pool.query(
                    'UPDATE players SET ccc = ccc + $1 WHERE telegram_id = $2',
                    [winAmount, telegramId]
                );
                if (process.env.NODE_ENV === 'development') console.log('üõ∏‚úÖ Win! Added to balance:', winAmount);
            } else {
                if (process.env.NODE_ENV === 'development') console.log('üõ∏üíÄ Loss! No money returned');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∂–µ–∫–ø–æ—Ç –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            let jackpotContribution = 0;
            if (!isWin) {
                jackpotContribution = Math.floor(betAmount * JACKPOT_CONTRIBUTION);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∂–µ–∫–ø–æ—Ç
                await pool.query(`
                    UPDATE jackpot 
                    SET current_amount = current_amount + $1, 
                        total_contributed = total_contributed + $1, 
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = 1
                `, [jackpotContribution]);
                
                if (process.env.NODE_ENV === 'development') console.log('üõ∏üí∞ Added to jackpot:', jackpotContribution, 'from bet:', betAmount);
            } else {
                if (process.env.NODE_ENV === 'development') console.log('üõ∏üéâ Win! No jackpot contribution');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä—ã
            const finalGameData = {
                ...gameData,
                chosenPosition,
                isWin,
                winAmount,
                profit,
                status: 'completed',
                completedAt: Date.now()
            };

            await pool.query(`
                UPDATE minigames_history 
                SET win_amount = $1, game_result = $2, jackpot_contribution = $3
                WHERE id = $4
            `, [winAmount, JSON.stringify(finalGameData), jackpotContribution, gameResult.rows[0].id]);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            await pool.query(`
                INSERT INTO minigames_stats (telegram_id, game_type, total_games, total_wins, total_losses, total_bet, total_won)
                VALUES ($1, 'cosmic_shells', 1, $2, $3, $4, $5)
                ON CONFLICT (telegram_id, game_type)
                DO UPDATE SET
                    total_games = minigames_stats.total_games + 1,
                    total_wins = minigames_stats.total_wins + $2,
                    total_losses = minigames_stats.total_losses + $3,
                    total_bet = minigames_stats.total_bet + $4,
                    total_won = minigames_stats.total_won + $5,
                    updated_at = CURRENT_TIMESTAMP
            `, [telegramId, isWin ? 1 : 0, isWin ? 0 : 1, betAmount, winAmount]);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –∏–≥—Ä –¢–û–õ–¨–ö–û –ó–î–ï–°–¨
            await pool.query(`
                UPDATE player_game_limits 
                SET daily_games = daily_games + 1
                WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
            `, [telegramId]);

            if (process.env.NODE_ENV === 'development') console.log('üõ∏üéÆ Increased daily_games counter for player:', telegramId);

            await pool.query('COMMIT');

            if (process.env.NODE_ENV === 'development') console.log('üõ∏‚úÖ Choice processed successfully');
            res.json({
                success: true,
                result: {
                    isWin,
                    chosenPosition,
                    winningPosition: gameData.winningPosition,
                    positions: gameData.positions,
                    betAmount,
                    winAmount,
                    profit
                }
            });

        } catch (error) {
            await pool.query('ROLLBACK');
            throw error;
        }

    } catch (error) {
        console.error('üõ∏‚ùå Make choice cosmic shells error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
router.get('/history/:telegramId', async (req, res) => {
    try {
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Getting game history for:', req.params.telegramId);
        const { telegramId } = req.params;
        const { limit = 1000, offset = 0 } = req.query; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000 –≤–º–µ—Å—Ç–æ 20

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
        const historyResult = await pool.query(`
            SELECT 
                id,
                bet_amount,
                win_amount,
                game_result,
                jackpot_contribution,
                created_at,
                CASE 
                    WHEN win_amount > 0 THEN 'win'
                    ELSE 'loss'
                END as result_type
            FROM minigames_history 
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
            ORDER BY created_at DESC 
            LIMIT $2 OFFSET $3
        `, [telegramId, limit, offset]);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const formattedHistory = historyResult.rows.map(game => {
            const gameData = game.game_result;
            return {
                id: game.id,
                date: game.created_at,
                betAmount: parseInt(game.bet_amount),
                winAmount: parseInt(game.win_amount || 0),
                profit: parseInt(game.win_amount || 0) - parseInt(game.bet_amount),
                result: game.result_type,
                chosenPosition: gameData.chosenPosition || null,
                winningPosition: gameData.winningPosition || null,
                positions: gameData.positions || [],
                jackpotContribution: parseInt(game.jackpot_contribution || 0),
                isCompleted: gameData.status === 'completed'
            };
        });

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalResult = await pool.query(`
            SELECT COUNT(*) as total_games
            FROM minigames_history 
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
        `, [telegramId]);

        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Game history response:', {
            total: parseInt(totalResult.rows[0].total_games),
            games: formattedHistory.length,
            limit: parseInt(limit),
            offset: parseInt(offset)
        });

        res.json({
            success: true,
            history: formattedHistory,
            total: parseInt(totalResult.rows[0].total_games),
            hasMore: (parseInt(offset) + formattedHistory.length) < parseInt(totalResult.rows[0].total_games)
        });

    } catch (error) {
        console.error('üõ∏‚ùå Game history error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∫–ª–∞–º–∞ –¥–∞–µ—Ç 20 –∏–≥—Ä –∑–∞ —Ä–∞–∑ (–∫–∞–∫ –≤ —Å–ª–æ—Ç–∞—Ö)
router.post('/watch-ad/:telegramId', async (req, res) => {
    try {
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Watch ad request for shells:', req.params.telegramId);
        const { telegramId } = req.params;

        const { dailyGames, dailyAds } = await getGameLimits(telegramId);
        
        if (process.env.NODE_ENV === 'development') console.log('üõ∏ Current shell limits before ad:', { dailyGames, dailyAds });
        
        if (dailyAds >= MAX_AD_GAMES) {
            if (process.env.NODE_ENV === 'development') console.log('üõ∏‚ùå Shell ad limit exceeded:', dailyAds, '>=', MAX_AD_GAMES);
            return res.status(400).json({
                success: false,
                error: `–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ä–µ–∫–ª–∞–º—ã –∏—Å—á–µ—Ä–ø–∞–Ω (${MAX_AD_GAMES}/${MAX_AD_GAMES})`,
                adsRemaining: 0
            });
        }
        
        const totalGamesPlayed = dailyGames;
        const maxTotalGames = DAILY_GAME_LIMIT + (MAX_AD_GAMES * GAMES_PER_AD);
        
        if (totalGamesPlayed >= maxTotalGames) {
            if (process.env.NODE_ENV === 'development') console.log('üõ∏‚ùå Total shell games limit exceeded:', totalGamesPlayed, '>=', maxTotalGames);
            return res.status(400).json({
                success: false,
                error: `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–≥—Ä –∏—Å—á–µ—Ä–ø–∞–Ω (${maxTotalGames} –∏–≥—Ä)`,
                adsRemaining: 0
            });
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ 1
        await pool.query(`
            UPDATE player_game_limits 
            SET daily_ads_watched = daily_ads_watched + 1
            WHERE telegram_id = $1 AND game_type = 'cosmic_shells'
        `, [telegramId]);

        const newAdsWatched = dailyAds + 1;
        const adsRemaining = MAX_AD_GAMES - newAdsWatched;

        if (process.env.NODE_ENV === 'development') console.log('üõ∏‚úÖ Shell ad watched successfully! New stats:', {
            adsWatched: newAdsWatched,
            adsRemaining,
            maxAds: MAX_AD_GAMES,
            gamesGranted: GAMES_PER_AD
        });

        res.json({
            success: true,
            adsRemaining,
            adsWatched: newAdsWatched,
            maxAds: MAX_AD_GAMES,
            message: `–ü–æ–ª—É—á–µ–Ω–æ ${GAMES_PER_AD} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä –≤ –Ω–∞–ø—ë—Ä—Å—Ç–∫–∏! (${newAdsWatched}/${MAX_AD_GAMES})`
        });

    } catch (error) {
        console.error('üõ∏‚ùå Watch ad shells error:', error);
        res.status(500).json({ success: false, error: 'Server error' });
    }
});

module.exports = router;