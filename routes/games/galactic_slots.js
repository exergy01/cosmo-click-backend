const express = require('express');
const router = express.Router();
const pool = require('../../db');
const crypto = require('crypto');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const MIN_BET = 100;
const MAX_BET = 5000;
const DAILY_GAME_LIMIT = 50; // –ò–°–ü–†–ê–í–õ–ï–ù–û: 50 –±–∞–∑–æ–≤—ã—Ö –∏–≥—Ä
const MAX_AD_GAMES = 200; // 200 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä –∑–∞ —Ä–µ–∫–ª–∞–º—É
const JACKPOT_CONTRIBUTION = 0.001; // 0.1%

// 20 –ª–∏–Ω–∏–π –≤—ã–ø–ª–∞—Ç (–ø–æ–∑–∏—Ü–∏–∏ 0-14, –≥–¥–µ 0-4 –ø–µ—Ä–≤—ã–π —Ä—è–¥, 5-9 –≤—Ç–æ—Ä–æ–π, 10-14 —Ç—Ä–µ—Ç–∏–π)
const PAYLINES = [
  [0, 1, 2, 3, 4],     // –õ–∏–Ω–∏—è 1: –≤–µ—Ä—Ö–Ω–∏–π —Ä—è–¥
  [5, 6, 7, 8, 9],     // –õ–∏–Ω–∏—è 2: —Å—Ä–µ–¥–Ω–∏–π —Ä—è–¥  
  [10, 11, 12, 13, 14], // –õ–∏–Ω–∏—è 3: –Ω–∏–∂–Ω–∏–π —Ä—è–¥
  [0, 6, 12, 8, 4],    // –õ–∏–Ω–∏—è 4: –¥–∏–∞–≥–æ–Ω–∞–ª—å
  [10, 6, 2, 8, 14],   // –õ–∏–Ω–∏—è 5: –¥–∏–∞–≥–æ–Ω–∞–ª—å
  [5, 1, 7, 3, 9],     // –õ–∏–Ω–∏—è 6: –∑–∏–≥–∑–∞–≥
  [5, 11, 7, 13, 9],   // –õ–∏–Ω–∏—è 7: –∑–∏–≥–∑–∞–≥
  [0, 1, 7, 3, 4],     // –õ–∏–Ω–∏—è 8: V-–æ–±—Ä–∞–∑–Ω–∞—è
  [10, 11, 7, 13, 14], // –õ–∏–Ω–∏—è 9: V-–æ–±—Ä–∞–∑–Ω–∞—è
  [0, 6, 7, 8, 4],     // –õ–∏–Ω–∏—è 10: –≤–æ–ª–Ω–∞
  [10, 6, 7, 8, 14],   // –õ–∏–Ω–∏—è 11: –≤–æ–ª–Ω–∞
  [5, 1, 2, 3, 9],     // –õ–∏–Ω–∏—è 12: –∫—É–ø–æ–ª
  [5, 11, 12, 13, 9],  // –õ–∏–Ω–∏—è 13: –∫—É–ø–æ–ª
  [0, 11, 2, 13, 4],   // –õ–∏–Ω–∏—è 14: –∑–∏–≥–∑–∞–≥
  [10, 1, 12, 3, 14],  // –õ–∏–Ω–∏—è 15: –∑–∏–≥–∑–∞–≥
  [5, 6, 2, 8, 9],     // –õ–∏–Ω–∏—è 16: —Å—Ç—Ä–µ–ª–∞ –≤–≤–µ—Ä—Ö
  [5, 6, 12, 8, 9],    // –õ–∏–Ω–∏—è 17: —Å—Ç—Ä–µ–ª–∞ –≤–Ω–∏–∑
  [0, 6, 2, 8, 14],    // –õ–∏–Ω–∏—è 18: M-–æ–±—Ä–∞–∑–Ω–∞—è
  [10, 6, 12, 8, 4],   // –õ–∏–Ω–∏—è 19: W-–æ–±—Ä–∞–∑–Ω–∞—è
  [0, 1, 12, 3, 4]     // –õ–∏–Ω–∏—è 20: –¥—É–≥–∞
];

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ RTP
const SYMBOLS = {
  'üåü': { id: 'wild', multipliers: [0.3, 0.7, 1.5], isWild: true },    // WILD - —É–≤–µ–ª–∏—á–µ–Ω–æ
  'üöÄ': { id: 'ship', multipliers: [0.2, 0.5, 1.2] },                 // –ö–æ—Ä–∞–±–ª—å - —É–≤–µ–ª–∏—á–µ–Ω–æ
  'üåå': { id: 'galaxy', multipliers: [0.15, 0.4, 1.0] },              // –ì–∞–ª–∞–∫—Ç–∏–∫–∞ - —É–≤–µ–ª–∏—á–µ–Ω–æ
  '‚≠ê': { id: 'star', multipliers: [0.1, 0.25, 0.6] },                 // –ó–≤–µ–∑–¥–∞ - —É–≤–µ–ª–∏—á–µ–Ω–æ
  'üåç': { id: 'planet', multipliers: [0.08, 0.2, 0.4] },              // –ü–ª–∞–Ω–µ—Ç–∞ - —É–≤–µ–ª–∏—á–µ–Ω–æ
  '‚òÑÔ∏è': { id: 'asteroid', multipliers: [0.05, 0.15, 0.25] },          // –ê—Å—Ç–µ—Ä–æ–∏–¥ - —É–≤–µ–ª–∏—á–µ–Ω–æ
  'üíÄ': { id: 'void', multipliers: [0, 0, 0], isDead: true }           // –ú–ï–†–¢–í–´–ô
};

const SYMBOL_KEYS = Object.keys(SYMBOLS);
const ALIVE_SYMBOLS = SYMBOL_KEYS.filter(s => !SYMBOLS[s].isDead);

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∏–∂–µ–Ω —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ —Å 60% –¥–æ 25%
const WIN_PROBABILITY = 0.25; // 25% —à–∞–Ω—Å —á—Ç–æ –±—É–¥–µ—Ç –•–û–¢–¨ –ö–ê–ö–û–ô-–¢–û –≤—ã–∏–≥—Ä—ã—à

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ª–∏ –≤—ã–∏–≥—Ä—ã—à
function willHaveWin() {
  return Math.random() < WIN_PROBABILITY; // 25% —à–∞–Ω—Å –Ω–∞ –õ–Æ–ë–û–ô –≤—ã–∏–≥—Ä—ã—à
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π (–±–æ–ª—å—à–µ –∞–∫—Ü–µ–Ω—Ç –Ω–∞ 1 –ª–∏–Ω–∏—é)
function selectWinningLinesCount() {
  const random = Math.random();
  if (random < 0.8) return 1;      // 80% - –æ–¥–Ω–∞ –ª–∏–Ω–∏—è
  if (random < 0.95) return 2;     // 15% - –¥–≤–µ –ª–∏–Ω–∏–∏  
  if (random < 0.99) return 3;     // 4% - —Ç—Ä–∏ –ª–∏–Ω–∏–∏
  return 4;                        // 1% - —á–µ—Ç—ã—Ä–µ –ª–∏–Ω–∏–∏ (—É–±—Ä–∞–ª–∏ 5 –ª–∏–Ω–∏–π)
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ª–∏–Ω–∏–∏ (–º–µ–Ω—å—à–µ –¥–µ—à–µ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
function selectSymbolForLine() {
  const random = Math.random();
  
  // –õ—É—á—à–∏–π –±–∞–ª–∞–Ω—Å —Å–∏–º–≤–æ–ª–æ–≤
  if (random < 0.35) return '‚òÑÔ∏è';      // 35% - –∞—Å—Ç–µ—Ä–æ–∏–¥ (–¥–µ—à–µ–≤—ã–π)
  if (random < 0.6) return 'üåç';       // 25% - –ø–ª–∞–Ω–µ—Ç–∞
  if (random < 0.8) return '‚≠ê';       // 20% - –∑–≤–µ–∑–¥–∞
  if (random < 0.92) return 'üåå';      // 12% - –≥–∞–ª–∞–∫—Ç–∏–∫–∞
  if (random < 0.98) return 'üöÄ';      // 6% - –∫–æ—Ä–∞–±–ª—å
  return 'üåü';                         // 2% - WILD (–¥–æ—Ä–æ–≥–æ–π)
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–±–æ—Ä –¥–ª–∏–Ω—ã –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (–±–æ–ª—å—à–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö)
function selectComboLength() {
  const random = Math.random();
  if (random < 0.85) return 3;       // 85% - –∫–æ—Ä–æ—Ç–∫–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (3 —Å–∏–º–≤–æ–ª–∞)
  if (random < 0.98) return 4;       // 13% - —Å—Ä–µ–¥–Ω—è—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (4 —Å–∏–º–≤–æ–ª–∞)
  return 5;                          // 2% - –¥–ª–∏–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (5 —Å–∏–º–≤–æ–ª–æ–≤)
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–æ–π
function generateSmartField(betAmount) {
  console.log('üé∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: Starting smart field generation...');
  
  // –®–∞–≥ 1: –†–µ—à–∞–µ–º –±—É–¥–µ—Ç –ª–∏ –≤—ã–∏–≥—Ä—ã—à (25% —à–∞–Ω—Å)
  const hasWin = willHaveWin();
  console.log('üé∞ Will have win:', hasWin, '(25% chance)');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
  const field = Array(15).fill(null);
  const plannedWins = [];
  
  if (hasWin) {
    // –®–∞–≥ 2: –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π (1-4, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ 1)
    const linesCount = selectWinningLinesCount();
    console.log('üé∞ Winning lines count:', linesCount);
    
    // –®–∞–≥ 3: –î–ª—è –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –∏ –¥–ª–∏–Ω—É
    for (let i = 0; i < linesCount; i++) {
      const symbol = selectSymbolForLine();
      const length = selectComboLength();
      
      console.log(`üé∞ Line ${i + 1}: ${symbol} x${length}`);
      
      // –®–∞–≥ 4: –†–∞–∑–º–µ—â–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–∏–Ω–∏—è—Ö
      const availableLines = PAYLINES.filter((line, index) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–Ω–∏—è –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏
        return !line.slice(0, length).some(pos => field[pos] !== null);
      });
      
      if (availableLines.length > 0) {
        const selectedLine = availableLines[Math.floor(Math.random() * availableLines.length)];
        
        // –†–∞–∑–º–µ—â–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        for (let j = 0; j < length; j++) {
          field[selectedLine[j]] = symbol;
        }
        
        plannedWins.push({
          line: PAYLINES.indexOf(selectedLine) + 1,
          symbol,
          length,
          positions: selectedLine.slice(0, length)
        });
      }
    }
  }
  
  // –®–∞–≥ 5: –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
  for (let i = 0; i < 15; i++) {
    if (field[i] === null) {
      field[i] = getSecureSymbol(field, i);
    }
  }
  
  // –®–∞–≥ 6: –î–æ–±–∞–≤–ª—è–µ–º 1-2 –º–µ—Ä—Ç–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ (–º–µ–Ω—å—à–µ —á–µ–º –±—ã–ª–æ)
  const deadSymbolsCount = 1 + Math.floor(Math.random() * 2); // 1 –∏–ª–∏ 2 (–±—ã–ª–æ 2-4)
  
  console.log('üé∞ Adding dead symbols:', deadSymbolsCount);
  
  for (let i = 0; i < deadSymbolsCount; i++) {
    let attempts = 0;
    let placed = false;
    
    while (!placed && attempts < 20) {
      const randomPos = Math.floor(Math.random() * 15);
      // –ù–ï —Ä–∞–∑–º–µ—â–∞–µ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
      if (!plannedWins.some(win => win.positions.includes(randomPos)) && field[randomPos] !== 'üíÄ') {
        field[randomPos] = 'üíÄ';
        console.log('üé∞ Placed dead symbol at position:', randomPos);
        placed = true;
      }
      attempts++;
    }
  }
  
  console.log('üé∞ Generated field:', field);
  console.log('üé∞ Planned wins:', plannedWins);
  
  return field;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞
function getSecureSymbol(field, position) {
  return ALIVE_SYMBOLS[Math.floor(Math.random() * ALIVE_SYMBOLS.length)];
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–∞ –≥–æ—Ç–æ–≤–æ–º –ø–æ–ª–µ
function calculateFieldWinnings(symbols, betAmount) {
  let totalWin = 0;
  const winningLines = [];
  
  for (let i = 0; i < PAYLINES.length; i++) {
    const line = PAYLINES[i];
    const lineSymbols = line.map(pos => symbols[pos]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
    let matchCount = 1;
    let matchSymbol = lineSymbols[0];
    let hasWild = false;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (SYMBOLS[matchSymbol]?.isDead) continue;
    
    // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª WILD
    if (SYMBOLS[matchSymbol]?.isWild) {
      hasWild = true;
      // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ-WILD —Å–∏–º–≤–æ–ª
      for (let j = 1; j < lineSymbols.length; j++) {
        if (!SYMBOLS[lineSymbols[j]]?.isWild && !SYMBOLS[lineSymbols[j]]?.isDead) {
          matchSymbol = lineSymbols[j];
          break;
        }
      }
    }
    
    // –°—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for (let j = 1; j < lineSymbols.length; j++) {
      const currentSymbol = lineSymbols[j];
      
      if (SYMBOLS[currentSymbol]?.isDead) break; // –ú–µ—Ä—Ç–≤—ã–π —Å–∏–º–≤–æ–ª –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –ª–∏–Ω–∏—é
      
      if (currentSymbol === matchSymbol || SYMBOLS[currentSymbol]?.isWild) {
        if (SYMBOLS[currentSymbol]?.isWild) hasWild = true;
        matchCount++;
      } else {
        break;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)
    if (matchCount >= 3 && SYMBOLS[matchSymbol] && !SYMBOLS[matchSymbol].isDead) {
      const multiplierIndex = Math.min(matchCount - 3, SYMBOLS[matchSymbol].multipliers.length - 1);
      let lineWin = betAmount * SYMBOLS[matchSymbol].multipliers[multiplierIndex];
      
      // WILD —É–¥–≤–∞–∏–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à
      if (hasWild) {
        lineWin *= 2;
      }
      
      totalWin += lineWin;
      winningLines.push({
        line: i + 1,
        symbol: matchSymbol,
        count: matchCount,
        multiplier: SYMBOLS[matchSymbol].multipliers[multiplierIndex],
        hasWild: hasWild,
        winAmount: lineWin
      });
    }
  }
  
  return { totalWin, winningLines };
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
function createSecureSlotGame(betAmount) {
  const randomBytes = crypto.randomBytes(32);
  const gameId = randomBytes.toString('hex');
  
  console.log('üé∞ Creating secure slot game for bet:', betAmount);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω–æ–µ –ø–æ–ª–µ
  const symbols = generateSmartField(betAmount);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏
  const { totalWin, winningLines } = calculateFieldWinnings(symbols, betAmount);
  
  console.log('üé∞ Final game result:', {
    gameId: gameId.substring(0, 8),
    totalWin,
    winRatio: (totalWin / betAmount).toFixed(2),
    winningLines: winningLines.length,
    symbols: symbols,
    expectedRTP: '~75%'
  });
  
  return {
    gameId,
    symbols,
    winningLines,
    totalWin,
    timestamp: Date.now(),
    betAmount
  };
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
async function getGameLimits(telegramId) {
  console.log('üé∞ Getting slot game limits for:', telegramId);
  
  let limitsResult = await pool.query(`
    SELECT daily_games, daily_ads_watched, last_reset_date 
    FROM player_game_limits 
    WHERE telegram_id = $1 AND game_type = 'galactic_slots'
  `, [telegramId]);

  if (limitsResult.rows.length === 0) {
    await pool.query(`
      INSERT INTO player_game_limits (telegram_id, game_type, daily_games, daily_ads_watched, last_reset_date)
      VALUES ($1, 'galactic_slots', 0, 0, CURRENT_DATE)
    `, [telegramId]);
    console.log('üé∞ Created new slot limits record for player:', telegramId);
    return { dailyGames: 0, dailyAds: 0 };
  }

  const limits = limitsResult.rows[0];
  const lastResetDate = limits.last_reset_date;
  
  const needsReset = await pool.query(`
    SELECT CASE 
      WHEN $1::date < CURRENT_DATE THEN true 
      ELSE false 
    END as needs_reset
  `, [lastResetDate]);
  
  const shouldReset = needsReset.rows[0].needs_reset;
  
  if (shouldReset) {
    console.log('üé∞ Resetting slot limits - detected new day');
    await pool.query(`
      UPDATE player_game_limits 
      SET daily_games = 0, daily_ads_watched = 0, last_reset_date = CURRENT_DATE
      WHERE telegram_id = $1 AND game_type = 'galactic_slots'
    `, [telegramId]);
    return { dailyGames: 0, dailyAds: 0 };
  }

  console.log('üé∞ Same day - using existing slot limits:', { 
    dailyGames: limits.daily_games, 
    dailyAds: limits.daily_ads_watched 
  });
  
  return { 
    dailyGames: limits.daily_games, 
    dailyAds: limits.daily_ads_watched 
  };
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä
function calculateGamesAvailable(dailyGames, dailyAds) {
  const totalGamesAvailable = DAILY_GAME_LIMIT + Math.min(dailyAds, MAX_AD_GAMES);
  const gamesLeft = Math.max(0, totalGamesAvailable - dailyGames);
  const canPlayFree = gamesLeft > 0;
  const canWatchAd = dailyAds < MAX_AD_GAMES && gamesLeft === 0;
  
  console.log('üé∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –∏–≥—Ä (250 MAX):', {
    dailyGames,
    dailyAds,
    totalGamesAvailable,
    gamesLeft,
    canPlayFree,
    canWatchAd,
    maxTotalGames: DAILY_GAME_LIMIT + MAX_AD_GAMES
  });
  
  return { gamesLeft, canPlayFree, canWatchAd };
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
router.get('/status/:telegramId', async (req, res) => {
  try {
    console.log('üé∞ Galactic slots status request for:', req.params.telegramId);
    const { telegramId } = req.params;
    
    const { dailyGames, dailyAds } = await getGameLimits(telegramId);
    const { gamesLeft, canPlayFree, canWatchAd } = calculateGamesAvailable(dailyGames, dailyAds);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    const statsResult = await pool.query(`
      SELECT total_games, total_wins, total_losses, total_bet, total_won, best_streak, worst_streak
      FROM minigames_stats 
      WHERE telegram_id = $1 AND game_type = 'galactic_slots'
    `, [telegramId]);

    const stats = statsResult.rows[0] || {
      total_games: 0,
      total_wins: 0,
      total_losses: 0,
      total_bet: 0,
      total_won: 0,
      best_streak: 0,
      worst_streak: 0
    };

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    const balanceResult = await pool.query(
      'SELECT ccc FROM players WHERE telegram_id = $1',
      [telegramId]
    );

    const balance = balanceResult.rows[0]?.ccc || 0;

    console.log('üé∞ Galactic slots status response:', { 
      balance: parseFloat(balance), 
      dailyGames, 
      dailyAds,
      gamesLeft,
      canPlayFree,
      canWatchAd,
      expectedRTP: '~75%'
    });

    res.json({
      success: true,
      balance: parseFloat(balance),
      dailyGames,
      dailyAds,
      canPlayFree,
      canWatchAd,
      gamesLeft,
      adsLeft: Math.max(0, MAX_AD_GAMES - dailyAds),
      minBet: MIN_BET,
      maxBet: MAX_BET,
      stats
    });

  } catch (error) {
    console.error('üé∞‚ùå Galactic slots status error:', error);
    res.status(500).json({ success: false, error: 'Server error' });
  }
});

// –ö—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
router.post('/spin/:telegramId', async (req, res) => {
  try {
    console.log('üé∞ Starting galactic slots spin for:', req.params.telegramId, 'Bet:', req.body.betAmount);
    const { telegramId } = req.params;
    const { betAmount } = req.body;

    const parsedBetAmount = Number(betAmount);
    if (!parsedBetAmount || isNaN(parsedBetAmount) || parsedBetAmount < MIN_BET || parsedBetAmount > MAX_BET) {
      console.log('üé∞‚ùå Invalid bet amount:', betAmount, 'parsed:', parsedBetAmount);
      return res.status(400).json({
        success: false,
        error: `–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${MIN_BET} –¥–æ ${MAX_BET} CCC`
      });
    }

    await pool.query('BEGIN');

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
      const balanceResult = await pool.query(
        'SELECT ccc FROM players WHERE telegram_id = $1',
        [telegramId]
      );

      if (balanceResult.rows.length === 0) {
        await pool.query('ROLLBACK');
        return res.status(400).json({
          success: false,
          error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }

      const currentBalance = parseFloat(balanceResult.rows[0].ccc);
      console.log('üé∞ Player balance:', currentBalance, 'Bet:', parsedBetAmount);
      
      if (currentBalance < parsedBetAmount) {
        await pool.query('ROLLBACK');
        return res.status(400).json({
          success: false,
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      const { dailyGames, dailyAds } = await getGameLimits(telegramId);
      const { canPlayFree } = calculateGamesAvailable(dailyGames, dailyAds);
      
      if (!canPlayFree) {
        await pool.query('ROLLBACK');
        return res.status(400).json({
          success: false,
          error: '–õ–∏–º–∏—Ç –∏–≥—Ä –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä.'
        });
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
      await pool.query(
        'UPDATE players SET ccc = ccc - $1 WHERE telegram_id = $2',
        [parsedBetAmount, telegramId]
      );

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å –Ω–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–æ–π
      const game = createSecureSlotGame(parsedBetAmount);
      const totalWin = game.totalWin;
      const winningLines = game.winningLines;
      
      const isWin = totalWin > 0;
      const profit = totalWin - parsedBetAmount;

      console.log('üé∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô slot result:', { 
        symbols: game.symbols,
        totalWin,
        profit,
        multiplier: (totalWin / parsedBetAmount).toFixed(2),
        winningLines: winningLines.length,
        expectedRTP: '~75%'
      });

      // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –µ—Å–ª–∏ –µ—Å—Ç—å
      if (isWin) {
        await pool.query(
          'UPDATE players SET ccc = ccc + $1 WHERE telegram_id = $2',
          [totalWin, telegramId]
        );
        console.log('üé∞‚úÖ Win! Added to balance:', totalWin);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∂–µ–∫–ø–æ—Ç –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
      let jackpotContribution = 0;
      if (!isWin) {
        jackpotContribution = Math.floor(parsedBetAmount * JACKPOT_CONTRIBUTION);
        
        await pool.query(`
          UPDATE jackpot 
          SET current_amount = current_amount + $1, 
              total_contributed = total_contributed + $1, 
              updated_at = CURRENT_TIMESTAMP
          WHERE id = 1
        `, [jackpotContribution]);
        
        console.log('üé∞üí∞ Added to jackpot:', jackpotContribution);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
      await pool.query(`
        INSERT INTO minigames_history (telegram_id, game_type, bet_amount, win_amount, game_result, jackpot_contribution, created_at)
        VALUES ($1, 'galactic_slots', $2, $3, $4, $5, CURRENT_TIMESTAMP)
      `, [telegramId, parsedBetAmount, totalWin, JSON.stringify({
        gameId: game.gameId,
        symbols: game.symbols,
        winningLines,
        totalWin,
        profit,
        timestamp: game.timestamp
      }), jackpotContribution]);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await pool.query(`
        INSERT INTO minigames_stats (telegram_id, game_type, total_games, total_wins, total_losses, total_bet, total_won, best_streak, worst_streak)
        VALUES ($1, 'galactic_slots', 1, $2, $3, $4, $5, $6, $7)
        ON CONFLICT (telegram_id, game_type)
        DO UPDATE SET
          total_games = minigames_stats.total_games + 1,
          total_wins = minigames_stats.total_wins + $2,
          total_losses = minigames_stats.total_losses + $3,
          total_bet = minigames_stats.total_bet + $4,
          total_won = minigames_stats.total_won + $5,
          best_streak = GREATEST(minigames_stats.best_streak, $6),
          worst_streak = LEAST(minigames_stats.worst_streak, $7),
          updated_at = CURRENT_TIMESTAMP
      `, [telegramId, isWin ? 1 : 0, isWin ? 0 : 1, parsedBetAmount, totalWin, 0, 0]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –∏–≥—Ä
      await pool.query(`
        UPDATE player_game_limits 
        SET daily_games = daily_games + 1
        WHERE telegram_id = $1 AND game_type = 'galactic_slots'
      `, [telegramId]);

      await pool.query('COMMIT');

      console.log('üé∞‚úÖ Slot spin completed successfully');
      res.json({
        success: true,
        result: {
          gameId: game.gameId,
          symbols: game.symbols,
          winningLines,
          totalWin,
          profit,
          isWin,
          betAmount: parsedBetAmount
        }
      });

    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }

  } catch (error) {
    console.error('üé∞‚ùå Galactic slots spin error:', error);
    res.status(500).json({ success: false, error: 'Server error' });
  }
});

// –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É
router.post('/watch-ad/:telegramId', async (req, res) => {
  try {
    console.log('üé∞ Watch ad request for slots:', req.params.telegramId);
    const { telegramId } = req.params;

    const { dailyGames, dailyAds } = await getGameLimits(telegramId);
    
    console.log('üé∞ Current slot limits before ad:', { dailyGames, dailyAds });
    
    if (dailyAds >= MAX_AD_GAMES) {
      console.log('üé∞‚ùå Slot ad limit exceeded:', dailyAds, '>=', MAX_AD_GAMES);
      return res.status(400).json({
        success: false,
        error: '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ä–µ–∫–ª–∞–º—ã –∏—Å—á–µ—Ä–ø–∞–Ω (200/200)',
        adsRemaining: 0
      });
    }
    
    const totalGamesPlayed = dailyGames;
    const maxTotalGames = DAILY_GAME_LIMIT + MAX_AD_GAMES;
    
    if (totalGamesPlayed >= maxTotalGames) {
      console.log('üé∞‚ùå Total slot games limit exceeded:', totalGamesPlayed, '>=', maxTotalGames);
      return res.status(400).json({
        success: false,
        error: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–≥—Ä –∏—Å—á–µ—Ä–ø–∞–Ω (250 –∏–≥—Ä)',
        adsRemaining: 0
      });
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ 1
    await pool.query(`
      UPDATE player_game_limits 
      SET daily_ads_watched = daily_ads_watched + 1
      WHERE telegram_id = $1 AND game_type = 'galactic_slots'
    `, [telegramId]);

    const newAdsWatched = dailyAds + 1;
    const adsRemaining = MAX_AD_GAMES - newAdsWatched;

    console.log('üé∞‚úÖ Slot ad watched successfully! New stats:', {
      adsWatched: newAdsWatched,
      adsRemaining,
      maxAds: MAX_AD_GAMES
    });

    res.json({
      success: true,
      adsRemaining,
      adsWatched: newAdsWatched,
      maxAds: MAX_AD_GAMES,
      message: `–ü–æ–ª—É—á–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã! (${newAdsWatched}/${MAX_AD_GAMES})`
    });

  } catch (error) {
    console.error('üé∞‚ùå Watch ad slots error:', error);
    res.status(500).json({ success: false, error: 'Server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
router.get('/history/:telegramId', async (req, res) => {
  try {
    console.log('üé∞ Getting slot history for:', req.params.telegramId);
    const { telegramId } = req.params;
    const { limit = 20, offset = 0 } = req.query;

    const historyResult = await pool.query(`
      SELECT 
        id,
        bet_amount,
        win_amount,
        game_result,
        jackpot_contribution,
        created_at,
        CASE 
          WHEN win_amount > bet_amount THEN 'win'
          ELSE 'loss'
        END as result_type
      FROM minigames_history 
      WHERE telegram_id = $1 AND game_type = 'galactic_slots'
      ORDER BY created_at DESC 
      LIMIT $2 OFFSET $3
    `, [telegramId, limit, offset]);

    const formattedHistory = historyResult.rows.map(game => {
      const gameData = game.game_result;
      return {
        id: game.id,
        date: game.created_at,
        betAmount: parseInt(game.bet_amount),
        winAmount: parseInt(game.win_amount || 0),
        profit: parseInt(game.win_amount || 0) - parseInt(game.bet_amount),
        result: game.result_type,
        symbols: gameData.symbols || [],
        winningLines: gameData.winningLines || [],
        jackpotContribution: parseInt(game.jackpot_contribution || 0)
      };
    });

    const totalResult = await pool.query(`
      SELECT COUNT(*) as total_games
      FROM minigames_history 
      WHERE telegram_id = $1 AND game_type = 'galactic_slots'
    `, [telegramId]);

    console.log('üé∞ Slot history response:', { 
      total: parseInt(totalResult.rows[0].total_games),
      games: formattedHistory.length 
    });

    res.json({
      success: true,
      history: formattedHistory,
      total: parseInt(totalResult.rows[0].total_games),
      hasMore: (parseInt(offset) + formattedHistory.length) < parseInt(totalResult.rows[0].total_games)
    });

  } catch (error) {
    console.error('üé∞‚ùå Slot history error:', error);
    res.status(500).json({ success: false, error: 'Server error' });
  }
});

module.exports = router;