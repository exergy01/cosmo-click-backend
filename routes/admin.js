// ===== routes/admin.js =====
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');

const router = express.Router();

// üîê –ê–î–ú–ò–ù–°–ö–ò–ô ID –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID;

console.log('üîß –ê–¥–º–∏–Ω—Å–∫–∏–π –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω. ADMIN_TELEGRAM_ID:', ADMIN_TELEGRAM_ID, '—Ç–∏–ø:', typeof ADMIN_TELEGRAM_ID);

// üõ°Ô∏è Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
const adminAuth = (req, res, next) => {
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º telegramId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
  const telegramId = req.params.telegramId;
  
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤:', { 
    telegramId, 
    telegramIdType: typeof telegramId,
    adminId: ADMIN_TELEGRAM_ID, 
    adminIdType: typeof ADMIN_TELEGRAM_ID,
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    telegramIdStr: String(telegramId),
    adminIdStr: String(ADMIN_TELEGRAM_ID),
    directMatch: telegramId === ADMIN_TELEGRAM_ID,
    stringMatch: String(telegramId) === String(ADMIN_TELEGRAM_ID),
    // –û—Ç–ª–∞–¥–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    urlParams: req.params,
    method: req.method,
    url: req.url
  });
  
  if (!telegramId) {
    console.log('üö´ Telegram ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö');
    console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', req.params);
    console.log('üîç URL:', req.url);
    return res.status(400).json({ error: 'Telegram ID is required' });
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const telegramIdStr = String(telegramId).trim();
  const adminIdStr = String(ADMIN_TELEGRAM_ID).trim();
  
  if (telegramIdStr !== adminIdStr) {
    console.log('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –Ω–µ –∞–¥–º–∏–Ω:', {
      received: telegramIdStr,
      expected: adminIdStr,
      match: telegramIdStr === adminIdStr
    });
    return res.status(403).json({ error: 'Access denied' });
  }
  
  console.log('‚úÖ –ê–¥–º–∏–Ω –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è ID:', telegramIdStr);
  next();
};

// üîç GET /api/admin/check/:telegramId - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
router.get('/check/:telegramId', (req, res) => {
  const { telegramId } = req.params;
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const telegramIdStr = String(telegramId).trim();
  const adminIdStr = String(ADMIN_TELEGRAM_ID).trim();
  const isAdmin = telegramIdStr === adminIdStr;
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', { 
    telegramId: telegramIdStr, 
    adminId: adminIdStr,
    isAdmin,
    receivedType: typeof telegramId,
    adminType: typeof ADMIN_TELEGRAM_ID
  });
  
  res.json({ 
    isAdmin,
    timestamp: new Date().toISOString(),
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    debug: {
      receivedId: telegramIdStr,
      expectedId: adminIdStr,
      typesMatch: typeof telegramId === typeof ADMIN_TELEGRAM_ID,
      stringMatch: telegramIdStr === adminIdStr
    }
  });
});

// üìä GET /api/admin/stats/:telegramId - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–ë–ï–ó middleware)
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –¥–ª—è routes/admin.js - endpoint /api/admin/stats/:telegramId
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: balance_history, star_transactions

// üìä GET /api/admin/stats/:telegramId - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã 
// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨ routes/admin.js =====
// –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint /api/admin/stats/:telegramId

router.get('/stats/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    console.log('üìä –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç ID:', telegramId);
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –ê–î–ú–ò–ù–ê
    const telegramIdStr = String(telegramId).trim();
    const adminIdStr = String(ADMIN_TELEGRAM_ID).trim();
    
    if (telegramIdStr !== adminIdStr) {
      console.log('üö´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –Ω–µ –∞–¥–º–∏–Ω');
      return res.status(403).json({ error: 'Access denied' });
    }
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    // 1. –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã players...');
    
    // –°–Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ players
    const playerColumns = await pool.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'players' 
      ORDER BY ordinal_position
    `);
    
    console.log('üìã –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã players:', playerColumns.rows.map(r => `${r.column_name}(${r.data_type})`));
    
    // –ò—â–µ–º –ø–æ–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –º–æ–∂–µ—Ç –±—ã—Ç—å last_activity, last_seen, updated_at
    const activityField = playerColumns.rows.find(col => 
      col.column_name.includes('activity') || 
      col.column_name.includes('last_') || 
      col.column_name === 'updated_at'
    )?.column_name || 'created_at'; // fallback –Ω–∞ created_at
    
    console.log('üïí –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', activityField);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    const playersStats = await pool.query(`
      SELECT 
        COUNT(*) as total_players,
        COUNT(CASE WHEN verified = true THEN 1 END) as verified_players,
        COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as active_24h,
        COUNT(CASE WHEN created_at > NOW() - INTERVAL '7 days' THEN 1 END) as active_7d
      FROM players
    `);
        
    // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—é—Ç - –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const currencyStats = await pool.query(`
      SELECT 
        COALESCE(SUM(ccc), 0) as total_ccc,
        COALESCE(SUM(cs), 0) as total_cs,
        COALESCE(SUM(ton), 0) as total_ton,
        COALESCE(SUM(telegram_stars), 0) as total_stars,
        COALESCE(AVG(ccc), 0) as avg_ccc,
        COALESCE(AVG(cs), 0) as avg_cs,
        COALESCE(AVG(ton), 0) as avg_ton
      FROM players
    `);
    
    // 3. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –æ–±–º–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è reason
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è reason –≤ balance_history...');
    
    const reasonValues = await pool.query(`
      SELECT DISTINCT reason, COUNT(*) as count
      FROM balance_history 
      WHERE reason IS NOT NULL 
      ORDER BY count DESC 
      LIMIT 20
    `);
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è reason:', reasonValues.rows);
    
    // Stars ‚Üí CS –æ–±–º–µ–Ω—ã –∏–∑ star_transactions (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const starsExchangeStats = await pool.query(`
      SELECT 
        COUNT(*) as total_exchanges,
        COALESCE(SUM(ABS(amount)), 0) as total_stars_exchanged,
        COALESCE(SUM(cs_amount), 0) as total_cs_received,
        COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as exchanges_24h
      FROM star_transactions 
      WHERE transaction_type = 'stars_to_cs_exchange' AND status = 'completed'
    `);

    // 4. –ò–°–ü–†–ê–í–õ–Ø–ï–ú CCC ‚Üî CS –æ–±–º–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è reason
    const cccCsExchangeStats = await pool.query(`
      SELECT 
        -- –ò—â–µ–º –ª—é–±—ã–µ –∑–∞–ø–∏—Å–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±–º–µ–Ω–æ–º (exchange, convert, swap)
        COUNT(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                   AND currency = 'ccc' AND change_amount < 0 THEN 1 END) as ccc_to_cs_exchanges,
        
        COUNT(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                   AND currency = 'cs' AND change_amount < 0 THEN 1 END) as cs_to_ccc_exchanges,
        
        COALESCE(SUM(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                              AND currency = 'ccc' AND change_amount < 0 
                         THEN ABS(change_amount) ELSE 0 END), 0) as total_ccc_exchanged,
        
        COALESCE(SUM(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                              AND currency = 'cs' AND change_amount < 0 
                         THEN ABS(change_amount) ELSE 0 END), 0) as total_cs_exchanged,
        
        -- –ó–∞ 24 —á–∞—Å–∞
        COUNT(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                   AND created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as exchanges_24h
      FROM balance_history 
      WHERE created_at IS NOT NULL
    `);

    // 5. –ò–°–ü–†–ê–í–õ–Ø–ï–ú CS ‚Üî TON –æ–±–º–µ–Ω—ã
    const csTonExchangeStats = await pool.query(`
      SELECT 
        COUNT(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                   AND (reason ILIKE '%ton%') AND currency = 'cs' AND change_amount < 0 THEN 1 END) as cs_to_ton_exchanges,
        
        COUNT(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                   AND (reason ILIKE '%ton%') AND currency = 'ton' AND change_amount < 0 THEN 1 END) as ton_to_cs_exchanges,
        
        COALESCE(SUM(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                              AND (reason ILIKE '%ton%') AND currency = 'cs' AND change_amount < 0 
                         THEN ABS(change_amount) ELSE 0 END), 0) as total_cs_to_ton_amount,
        
        COALESCE(SUM(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                              AND (reason ILIKE '%ton%') AND currency = 'ton' AND change_amount < 0 
                         THEN ABS(change_amount) ELSE 0 END), 0) as total_ton_to_cs_amount,
        
        COUNT(CASE WHEN (reason ILIKE '%exchange%' OR reason ILIKE '%convert%' OR reason ILIKE '%swap%') 
                   AND (reason ILIKE '%ton%') AND created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as ton_exchanges_24h
      FROM balance_history 
      WHERE created_at IS NOT NULL
    `);

    // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–Ω–∏-–∏–≥—Ä - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    let minigamesStats = { rows: [{ 
      total_games: 0, 
      active_players: 0, 
      total_bet: 0, 
      total_won: 0, 
      total_jackpot_contribution: 0, 
      games_24h: 0 
    }] };
    
    try {
      minigamesStats = await pool.query(`
        SELECT 
          COUNT(*) as total_games,
          COUNT(DISTINCT telegram_id) as active_players,
          COALESCE(SUM(bet_amount), 0) as total_bet,
          COALESCE(SUM(win_amount), 0) as total_won,
          COALESCE(SUM(jackpot_contribution), 0) as total_jackpot_contribution,
          COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as games_24h
        FROM minigames_history
      `);
    } catch (minigamesError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ minigames_history –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', minigamesError.message);
    }

    // 7. –¢–û–ü 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ CS
    const topPlayers = await pool.query(`
      SELECT 
        telegram_id, 
        COALESCE(username, '') as username, 
        COALESCE(first_name, '') as first_name, 
        COALESCE(cs, 0) as cs, 
        COALESCE(ccc, 0) as ccc, 
        COALESCE(ton, 0) as ton, 
        COALESCE(telegram_stars, 0) as telegram_stars, 
        COALESCE(verified, false) as verified
      FROM players 
      ORDER BY cs DESC 
      LIMIT 10
    `);
    
    // 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    let ratesStats = { rows: [] };
    let currentRates = {};
    
    try {
      ratesStats = await pool.query(`
        SELECT currency_pair, rate, last_updated, source
        FROM exchange_rates 
        WHERE currency_pair IN ('TON_USD', 'STARS_CS')
        ORDER BY currency_pair, last_updated DESC
      `);
      
      for (const row of ratesStats.rows) {
        if (!currentRates[row.currency_pair]) {
          currentRates[row.currency_pair] = row;
        }
      }
    } catch (ratesError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ exchange_rates –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', ratesError.message);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
      currentRates = {
        'TON_USD': { currency_pair: 'TON_USD', rate: 3.30, source: 'default' },
        'STARS_CS': { currency_pair: 'STARS_CS', rate: 0.10, source: 'default' }
      };
    }
    
    // 9. –°–û–ë–ò–†–ê–ï–ú –í–°–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    const allExchangeStats = {
      stars_to_cs: {
        total_exchanges: parseInt(starsExchangeStats.rows[0]?.total_exchanges || 0),
        total_stars_exchanged: parseFloat(starsExchangeStats.rows[0]?.total_stars_exchanged || 0),
        total_cs_received: parseFloat(starsExchangeStats.rows[0]?.total_cs_received || 0),
        exchanges_24h: parseInt(starsExchangeStats.rows[0]?.exchanges_24h || 0)
      },
      
      ccc_cs: {
        ccc_to_cs_exchanges: parseInt(cccCsExchangeStats.rows[0]?.ccc_to_cs_exchanges || 0),
        cs_to_ccc_exchanges: parseInt(cccCsExchangeStats.rows[0]?.cs_to_ccc_exchanges || 0),
        total_ccc_exchanged: parseFloat(cccCsExchangeStats.rows[0]?.total_ccc_exchanged || 0),
        total_cs_exchanged: parseFloat(cccCsExchangeStats.rows[0]?.total_cs_exchanged || 0),
        exchanges_24h: parseInt(cccCsExchangeStats.rows[0]?.exchanges_24h || 0)
      },
      
      cs_ton: {
        cs_to_ton_exchanges: parseInt(csTonExchangeStats.rows[0]?.cs_to_ton_exchanges || 0),
        ton_to_cs_exchanges: parseInt(csTonExchangeStats.rows[0]?.ton_to_cs_exchanges || 0),
        total_cs_to_ton_amount: parseFloat(csTonExchangeStats.rows[0]?.total_cs_to_ton_amount || 0),
        total_ton_to_cs_amount: parseFloat(csTonExchangeStats.rows[0]?.total_ton_to_cs_amount || 0),
        ton_exchanges_24h: parseInt(csTonExchangeStats.rows[0]?.ton_exchanges_24h || 0)
      },
      
      totals: {
        all_exchanges: 
          parseInt(starsExchangeStats.rows[0]?.total_exchanges || 0) +
          parseInt(cccCsExchangeStats.rows[0]?.ccc_to_cs_exchanges || 0) +
          parseInt(cccCsExchangeStats.rows[0]?.cs_to_ccc_exchanges || 0) +
          parseInt(csTonExchangeStats.rows[0]?.cs_to_ton_exchanges || 0) +
          parseInt(csTonExchangeStats.rows[0]?.ton_to_cs_exchanges || 0),
        
        all_exchanges_24h:
          parseInt(starsExchangeStats.rows[0]?.exchanges_24h || 0) +
          parseInt(cccCsExchangeStats.rows[0]?.exchanges_24h || 0) +
          parseInt(csTonExchangeStats.rows[0]?.ton_exchanges_24h || 0)
      }
    };
    
    const result = {
      players: playersStats.rows[0],
      currencies: currencyStats.rows[0],
      stars_exchange: allExchangeStats.stars_to_cs,
      all_exchanges: allExchangeStats,
      minigames: minigamesStats.rows[0],
      top_players: topPlayers.rows,
      current_rates: currentRates,
      timestamp: new Date().toISOString(),
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      debug: {
        activity_field_used: activityField,
        reason_values_found: reasonValues.rows.length,
        top_reasons: reasonValues.rows.slice(0, 5).map(r => `${r.reason}(${r.count})`),
        tables_checked: ['players', 'balance_history', 'star_transactions', 'minigames_history', 'exchange_rates']
      }
    };
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞:', {
      totalPlayers: result.players.total_players,
      active24h: result.players.active_24h,
      totalCS: result.currencies.total_cs,
      starsExchanges: result.all_exchanges.stars_to_cs.total_exchanges,
      cccCsExchanges: result.all_exchanges.ccc_cs.ccc_to_cs_exchanges + result.all_exchanges.ccc_cs.cs_to_ccc_exchanges,
      activityFieldUsed: activityField,
      reasonValuesFound: reasonValues.rows.length
    });
    
    res.json(result);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    res.status(500).json({ 
      error: 'Internal server error', 
      details: err.message,
      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
  }
});

// üîê –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç middleware (–∫—Ä–æ–º–µ check –∏ stats)
router.use(['!/check/*', '!/stats/*'], adminAuth);

// üë§ GET /api/admin/player/:telegramId/:playerId - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
router.get('/player/:telegramId/:playerId', async (req, res) => {
  const { playerId } = req.params;
  
  try {
    console.log(`üë§ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ: ${playerId}`);
    
    const player = await getPlayer(playerId);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
    const actionsResult = await pool.query(`
      SELECT action_type, amount, created_at, details
      FROM player_actions 
      WHERE telegram_id = $1 
      ORDER BY created_at DESC 
      LIMIT 50
    `, [playerId]);
    
    // –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤ Stars
    const starsHistory = await pool.query(`
      SELECT amount, cs_amount, exchange_rate, created_at, status
      FROM star_transactions 
      WHERE player_id = $1 
        AND transaction_type = 'stars_to_cs_exchange'
      ORDER BY created_at DESC 
      LIMIT 20
    `, [playerId]);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const referralStats = await pool.query(`
      SELECT COUNT(*) as referrals_count
      FROM players 
      WHERE referrer_id = $1
    `, [playerId]);
    
    res.json({
      player,
      recent_actions: actionsResult.rows,
      stars_history: starsHistory.rows,
      referral_stats: referralStats.rows[0],
      timestamp: new Date().toISOString()
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// üí∞ POST /api/admin/update-balance/:telegramId - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
router.post('/update-balance/:telegramId', async (req, res) => {
  const { playerId, currency, amount, operation } = req.body;
  
  if (!playerId || !currency || amount === undefined || !operation) {
    return res.status(400).json({ error: 'Missing required fields' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${playerId}, ${currency}, ${operation} ${amount}`);
    
    const player = await getPlayer(playerId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    let updateQuery = '';
    let newBalance = 0;
    
    switch (currency.toLowerCase()) {
      case 'ccc':
        if (operation === 'set') {
          newBalance = parseFloat(amount);
          updateQuery = 'UPDATE players SET ccc = $1 WHERE telegram_id = $2';
        } else if (operation === 'add') {
          newBalance = parseFloat(player.ccc) + parseFloat(amount);
          updateQuery = 'UPDATE players SET ccc = ccc + $1 WHERE telegram_id = $2';
        }
        break;
      case 'cs':
        if (operation === 'set') {
          newBalance = parseFloat(amount);
          updateQuery = 'UPDATE players SET cs = $1 WHERE telegram_id = $2';
        } else if (operation === 'add') {
          newBalance = parseFloat(player.cs) + parseFloat(amount);
          updateQuery = 'UPDATE players SET cs = cs + $1 WHERE telegram_id = $2';
        }
        break;
      case 'ton':
        if (operation === 'set') {
          newBalance = parseFloat(amount);
          updateQuery = 'UPDATE players SET ton = $1 WHERE telegram_id = $2';
        } else if (operation === 'add') {
          newBalance = parseFloat(player.ton) + parseFloat(amount);
          updateQuery = 'UPDATE players SET ton = ton + $1 WHERE telegram_id = $2';
        }
        break;
      case 'stars':
        if (operation === 'set') {
          newBalance = parseInt(amount);
          updateQuery = 'UPDATE players SET telegram_stars = $1 WHERE telegram_id = $2';
        } else if (operation === 'add') {
          newBalance = parseInt(player.telegram_stars || 0) + parseInt(amount);
          updateQuery = 'UPDATE players SET telegram_stars = telegram_stars + $1 WHERE telegram_id = $2';
        }
        break;
      default:
        await client.query('ROLLBACK');
        return res.status(400).json({ error: 'Invalid currency' });
    }
    
    await client.query(updateQuery, [amount, playerId]);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    await client.query(`
      INSERT INTO player_actions (telegram_id, action_type, amount, details)
      VALUES ($1, $2, $3, $4)
    `, [
      playerId,
      'admin_balance_update',
      amount,
      JSON.stringify({
        admin_id: req.params.telegramId,
        currency,
        operation,
        old_balance: operation === 'set' ? player[currency] : null,
        new_balance: newBalance
      })
    ]);
    
    await client.query('COMMIT');
    
    const updatedPlayer = await getPlayer(playerId);
    
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${playerId} ${currency} ${operation} ${amount}`);
    
    res.json({
      success: true,
      player: updatedPlayer,
      operation: {
        currency,
        operation,
        amount,
        new_balance: newBalance
      }
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// üîß POST /api/admin/verify-player/:telegramId - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
router.post('/verify-player/:telegramId', async (req, res) => {
  const { playerId, verified } = req.body;
  
  if (!playerId || verified === undefined) {
    return res.status(400).json({ error: 'Missing required fields' });
  }
  
  try {
    console.log(`üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${playerId} -> ${verified}`);
    
    await pool.query(
      'UPDATE players SET verified = $1 WHERE telegram_id = $2',
      [verified, playerId]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await pool.query(`
      INSERT INTO player_actions (telegram_id, action_type, details)
      VALUES ($1, $2, $3)
    `, [
      playerId,
      'admin_verification_change',
      JSON.stringify({
        admin_id: req.params.telegramId,
        verified_status: verified
      })
    ]);
    
    const updatedPlayer = await getPlayer(playerId);
    
    res.json({
      success: true,
      player: updatedPlayer
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// üìà POST /api/admin/update-ton-rate/:telegramId - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON
router.post('/update-ton-rate/:telegramId', async (req, res) => {
  const { newRate } = req.body;
  
  if (!newRate || newRate <= 0) {
    return res.status(400).json({ error: 'Invalid rate' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üìà –ê–¥–º–∏–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å TON: ${newRate}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å
    const prevResult = await client.query(
      'SELECT rate FROM exchange_rates WHERE currency_pair = $1 ORDER BY last_updated DESC LIMIT 1',
      ['TON_USD']
    );
    
    const previousRate = prevResult.rows[0]?.rate || 3.30;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å TON
    await client.query(`
      INSERT INTO exchange_rates (currency_pair, rate, previous_rate, source, metadata)
      VALUES ($1, $2, $3, $4, $5)
    `, [
      'TON_USD',
      newRate,
      previousRate,
      'admin_manual',
      JSON.stringify({
        admin_update: true,
        admin_id: req.params.telegramId,
        rate_change_percent: ((newRate - previousRate) / previousRate * 100).toFixed(2)
      })
    ]);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å Stars ‚Üí CS
    await client.query('SELECT update_stars_cs_rate()');
    
    await client.query('COMMIT');
    
    console.log(`‚úÖ –ö—É—Ä—Å TON –æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º: ${previousRate} ‚Üí ${newRate}`);
    
    res.json({
      success: true,
      previous_rate: previousRate,
      new_rate: newRate,
      source: 'admin_manual'
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// üîì POST /api/admin/unblock-exchange/:telegramId - —Å–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–º–µ–Ω–∞
router.post('/unblock-exchange/:telegramId', async (req, res) => {
  const { exchangeType = 'stars_to_cs' } = req.body;
  
  try {
    console.log(`üîì –°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–º–µ–Ω–∞: ${exchangeType}`);
    
    await pool.query(`
      UPDATE exchange_blocks 
      SET blocked_until = NOW() 
      WHERE exchange_type = $1 AND blocked_until > NOW()
    `, [exchangeType]);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await pool.query(`
      INSERT INTO player_actions (telegram_id, action_type, details)
      VALUES ($1, $2, $3)
    `, [
      req.params.telegramId,
      'admin_unblock_exchange',
      JSON.stringify({
        exchange_type: exchangeType,
        admin_id: req.params.telegramId
      })
    ]);
    
    console.log(`‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–º–µ–Ω–∞ ${exchangeType} —Å–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–æ–º`);
    
    res.json({
      success: true,
      exchange_type: exchangeType,
      message: 'Exchange unblocked successfully'
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// üîç GET /api/admin/search/:telegramId - –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
router.get('/search/:telegramId', async (req, res) => {
  const { q } = req.query;
  
  if (!q || q.length < 2) {
    return res.status(400).json({ error: 'Search query too short' });
  }
  
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤: "${q}"`);
    
    const result = await pool.query(`
      SELECT 
        telegram_id, 
        username, 
        first_name, 
        COALESCE(cs, 0) as cs, 
        COALESCE(ccc, 0) as ccc, 
        COALESCE(ton, 0) as ton, 
        COALESCE(telegram_stars, 0) as telegram_stars, 
        COALESCE(verified, false) as verified, 
        last_activity
      FROM players 
      WHERE 
        telegram_id::text ILIKE $1 
        OR username ILIKE $1 
        OR first_name ILIKE $1
      ORDER BY cs DESC
      LIMIT 20
    `, [`%${q}%`]);
    
    res.json({
      query: q,
      results: result.rows,
      count: result.rows.length
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// üîß GET /api/admin/debug/:telegramId - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
router.get('/debug/:telegramId', (req, res) => {
  const { telegramId } = req.params;
  
  const debugInfo = {
    received_telegram_id: telegramId,
    received_type: typeof telegramId,
    admin_telegram_id: ADMIN_TELEGRAM_ID,
    admin_type: typeof ADMIN_TELEGRAM_ID,
    string_comparison: String(telegramId) === String(ADMIN_TELEGRAM_ID),
    direct_comparison: telegramId === ADMIN_TELEGRAM_ID,
    env_vars: {
      NODE_ENV: process.env.NODE_ENV,
      ADMIN_TELEGRAM_ID: process.env.ADMIN_TELEGRAM_ID
    },
    timestamp: new Date().toISOString()
  };
  
  console.log('üîß Debug –∑–∞–ø—Ä–æ—Å:', debugInfo);
  
  res.json(debugInfo);
});

module.exports = router;