// ===== routes/admin.js - –ß–ê–°–¢–¨ 1 =====
const express = require('express');
const pool = require('../db');
const { getPlayer } = require('./shared/getPlayer');

const router = express.Router();

// üîê –ê–î–ú–ò–ù–°–ö–ò–ô ID –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID;

console.log('üîß –ê–¥–º–∏–Ω—Å–∫–∏–π –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω. ADMIN_TELEGRAM_ID:', ADMIN_TELEGRAM_ID, '—Ç–∏–ø:', typeof ADMIN_TELEGRAM_ID);

// üõ°Ô∏è Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
const adminAuth = (req, res, next) => {
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º telegramId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
  const telegramId = req.params.telegramId;
  
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤:', { 
    telegramId, 
    telegramIdType: typeof telegramId,
    adminId: ADMIN_TELEGRAM_ID, 
    adminIdType: typeof ADMIN_TELEGRAM_ID,
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    telegramIdStr: String(telegramId),
    adminIdStr: String(ADMIN_TELEGRAM_ID),
    directMatch: telegramId === ADMIN_TELEGRAM_ID,
    stringMatch: String(telegramId) === String(ADMIN_TELEGRAM_ID),
    // –û—Ç–ª–∞–¥–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    urlParams: req.params,
    method: req.method,
    url: req.url
  });
  
  if (!telegramId) {
    console.log('üö´ Telegram ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö');
    console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', req.params);
    console.log('üîç URL:', req.url);
    return res.status(400).json({ error: 'Telegram ID is required' });
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const telegramIdStr = String(telegramId).trim();
  const adminIdStr = String(ADMIN_TELEGRAM_ID).trim();
  
  if (telegramIdStr !== adminIdStr) {
    console.log('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –Ω–µ –∞–¥–º–∏–Ω:', {
      received: telegramIdStr,
      expected: adminIdStr,
      match: telegramIdStr === adminIdStr
    });
    return res.status(403).json({ error: 'Access denied' });
  }
  
  console.log('‚úÖ –ê–¥–º–∏–Ω –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è ID:', telegramIdStr);
  next();
};

// üîç GET /api/admin/check/:telegramId - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
router.get('/check/:telegramId', (req, res) => {
  const { telegramId } = req.params;
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const telegramIdStr = String(telegramId).trim();
  const adminIdStr = String(ADMIN_TELEGRAM_ID).trim();
  const isAdmin = telegramIdStr === adminIdStr;
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞:', { 
    telegramId: telegramIdStr, 
    adminId: adminIdStr,
    isAdmin,
    receivedType: typeof telegramId,
    adminType: typeof ADMIN_TELEGRAM_ID
  });
  
  res.json({ 
    isAdmin,
    timestamp: new Date().toISOString(),
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    debug: {
      receivedId: telegramIdStr,
      expectedId: adminIdStr,
      typesMatch: typeof telegramId === typeof ADMIN_TELEGRAM_ID,
      stringMatch: telegramIdStr === adminIdStr
    }
  });
});
// ===== routes/admin.js - –ß–ê–°–¢–¨ 2 (–°–¢–ê–¢–ò–°–¢–ò–ö–ê) =====

// üìä GET /api/admin/stats/:telegramId - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
router.get('/stats/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    console.log('üìä –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç ID:', telegramId);
    
    // –ü–†–û–í–ï–†–Ø–ï–ú –ê–î–ú–ò–ù–ê
    const telegramIdStr = String(telegramId).trim();
    const adminIdStr = String(ADMIN_TELEGRAM_ID).trim();
    
    if (telegramIdStr !== adminIdStr) {
      console.log('üö´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –Ω–µ –∞–¥–º–∏–Ω');
      return res.status(403).json({ error: 'Access denied' });
    }
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    // 1. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤...');
    
    const playersStats = await pool.query(`
      SELECT 
        COUNT(*) as total_players,
        COUNT(CASE WHEN verified = true THEN 1 END) as verified_players,
        COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as new_24h,
        COUNT(CASE WHEN created_at > NOW() - INTERVAL '7 days' THEN 1 END) as new_7d,
        -- –ò—Å–ø–æ–ª—å–∑—É–µ–º created_at –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–ª—è
        COUNT(CASE WHEN created_at > NOW() - INTERVAL '1 day' THEN 1 END) as active_24h,
        COUNT(CASE WHEN created_at > NOW() - INTERVAL '7 days' THEN 1 END) as active_7d
      FROM players
    `);
        
    // 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª—é—Ç
    console.log('üí∞ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª—é—Ç...');
    const currencyStats = await pool.query(`
      SELECT 
        COALESCE(SUM(ccc), 0) as total_ccc,
        COALESCE(SUM(cs), 0) as total_cs,
        COALESCE(SUM(ton), 0) as total_ton,
        COALESCE(SUM(telegram_stars), 0) as total_stars,
        COALESCE(AVG(ccc), 0) as avg_ccc,
        COALESCE(AVG(cs), 0) as avg_cs,
        COALESCE(AVG(ton), 0) as avg_ton
      FROM players
    `);
    
    // 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Stars –æ–±–º–µ–Ω–æ–≤
    console.log('‚≠ê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Stars –æ–±–º–µ–Ω–æ–≤...');
    const starsExchangeStats = await pool.query(`
      SELECT 
        COUNT(*) as total_exchanges,
        COALESCE(SUM(ABS(amount)), 0) as total_stars_exchanged,
        COALESCE(SUM(cs_amount), 0) as total_cs_received,
        COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as exchanges_24h
      FROM star_transactions 
      WHERE transaction_type = 'stars_to_cs_exchange' AND status = 'completed'
    `);

    // 4. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CCC ‚Üî CS –æ–±–º–µ–Ω–æ–≤
    console.log('üí± –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CCC/CS –æ–±–º–µ–Ω–æ–≤...');
    let cccCsExchangeStats = { rows: [{ 
      ccc_to_cs_exchanges: 0, 
      cs_to_ccc_exchanges: 0, 
      total_ccc_exchanged: 0, 
      total_cs_exchanged: 0, 
      exchanges_24h: 0 
    }] };
    
    try {
      cccCsExchangeStats = await pool.query(`
        SELECT 
          COUNT(CASE WHEN reason ILIKE '%ccc%cs%' AND currency = 'ccc' AND change_amount < 0 THEN 1 END) as ccc_to_cs_exchanges,
          COUNT(CASE WHEN reason ILIKE '%cs%ccc%' AND currency = 'cs' AND change_amount < 0 THEN 1 END) as cs_to_ccc_exchanges,
          COALESCE(SUM(CASE WHEN reason ILIKE '%ccc%cs%' AND currency = 'ccc' AND change_amount < 0 
                           THEN ABS(change_amount) ELSE 0 END), 0) as total_ccc_exchanged,
          COALESCE(SUM(CASE WHEN reason ILIKE '%cs%ccc%' AND currency = 'cs' AND change_amount < 0 
                           THEN ABS(change_amount) ELSE 0 END), 0) as total_cs_exchanged,
          COUNT(CASE WHEN (reason ILIKE '%ccc%cs%' OR reason ILIKE '%cs%ccc%') 
                     AND created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as exchanges_24h
        FROM balance_history 
        WHERE created_at IS NOT NULL
      `);
    } catch (balanceHistoryError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ balance_history –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', balanceHistoryError.message);
    }

    // 5. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CS ‚Üî TON –æ–±–º–µ–Ω–æ–≤
    console.log('üíé –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É CS/TON –æ–±–º–µ–Ω–æ–≤...');
    let csTonExchangeStats = { rows: [{ 
      cs_to_ton_exchanges: 0, 
      ton_to_cs_exchanges: 0, 
      total_cs_to_ton_amount: 0, 
      total_ton_to_cs_amount: 0, 
      ton_exchanges_24h: 0 
    }] };
    
    try {
      csTonExchangeStats = await pool.query(`
        SELECT 
          COUNT(CASE WHEN reason ILIKE '%cs%ton%' AND currency = 'cs' AND change_amount < 0 THEN 1 END) as cs_to_ton_exchanges,
          COUNT(CASE WHEN reason ILIKE '%ton%cs%' AND currency = 'ton' AND change_amount < 0 THEN 1 END) as ton_to_cs_exchanges,
          COALESCE(SUM(CASE WHEN reason ILIKE '%cs%ton%' AND currency = 'cs' AND change_amount < 0 
                           THEN ABS(change_amount) ELSE 0 END), 0) as total_cs_to_ton_amount,
          COALESCE(SUM(CASE WHEN reason ILIKE '%ton%cs%' AND currency = 'ton' AND change_amount < 0 
                           THEN ABS(change_amount) ELSE 0 END), 0) as total_ton_to_cs_amount,
          COUNT(CASE WHEN (reason ILIKE '%cs%ton%' OR reason ILIKE '%ton%cs%') 
                     AND created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as ton_exchanges_24h
        FROM balance_history 
        WHERE created_at IS NOT NULL
      `);
    } catch (balanceHistoryError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ balance_history –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è TON –æ–±–º–µ–Ω–æ–≤');
    }

    // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–Ω–∏-–∏–≥—Ä
    console.log('üéÆ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–Ω–∏-–∏–≥—Ä...');
    let minigamesStats = { rows: [{ 
      total_games: 0, 
      active_players: 0, 
      total_bet: 0, 
      total_won: 0, 
      total_jackpot_contribution: 0, 
      games_24h: 0 
    }] };
    
    try {
      minigamesStats = await pool.query(`
        SELECT 
          COUNT(*) as total_games,
          COUNT(DISTINCT telegram_id) as active_players,
          COALESCE(SUM(bet_amount), 0) as total_bet,
          COALESCE(SUM(win_amount), 0) as total_won,
          COALESCE(SUM(jackpot_contribution), 0) as total_jackpot_contribution,
          COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as games_24h
        FROM minigames_history
      `);
    } catch (minigamesError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ minigames_history –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', minigamesError.message);
    }

    // 7. –¢–û–ü 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ CS
    console.log('üèÜ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤...');
    const topPlayers = await pool.query(`
      SELECT 
        telegram_id, 
        COALESCE(username, '') as username, 
        COALESCE(first_name, '') as first_name, 
        COALESCE(cs, 0) as cs, 
        COALESCE(ccc, 0) as ccc, 
        COALESCE(ton, 0) as ton, 
        COALESCE(telegram_stars, 0) as telegram_stars, 
        COALESCE(verified, false) as verified
      FROM players 
      ORDER BY cs DESC 
      LIMIT 10
    `);
    
    // 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä—Å–æ–≤
    console.log('üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...');
    let currentRates = {};
    
    try {
      const ratesStats = await pool.query(`
        SELECT currency_pair, rate, last_updated, source
        FROM exchange_rates 
        WHERE currency_pair IN ('TON_USD', 'STARS_CS')
        ORDER BY currency_pair, last_updated DESC
      `);
      
      for (const row of ratesStats.rows) {
        if (!currentRates[row.currency_pair]) {
          currentRates[row.currency_pair] = row;
        }
      }
    } catch (ratesError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ exchange_rates –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', ratesError.message);
      currentRates = {
        'TON_USD': { currency_pair: 'TON_USD', rate: 3.30, source: 'default' },
        'STARS_CS': { currency_pair: 'STARS_CS', rate: 0.10, source: 'default' }
      };
    }
    
    // 9. –°–û–ë–ò–†–ê–ï–ú –í–°–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    const allExchangeStats = {
      stars_to_cs: {
        total_exchanges: parseInt(starsExchangeStats.rows[0]?.total_exchanges || 0),
        total_stars_exchanged: parseFloat(starsExchangeStats.rows[0]?.total_stars_exchanged || 0),
        total_cs_received: parseFloat(starsExchangeStats.rows[0]?.total_cs_received || 0),
        exchanges_24h: parseInt(starsExchangeStats.rows[0]?.exchanges_24h || 0)
      },
      
      ccc_cs: {
        ccc_to_cs_exchanges: parseInt(cccCsExchangeStats.rows[0]?.ccc_to_cs_exchanges || 0),
        cs_to_ccc_exchanges: parseInt(cccCsExchangeStats.rows[0]?.cs_to_ccc_exchanges || 0),
        total_ccc_exchanged: parseFloat(cccCsExchangeStats.rows[0]?.total_ccc_exchanged || 0),
        total_cs_exchanged: parseFloat(cccCsExchangeStats.rows[0]?.total_cs_exchanged || 0),
        exchanges_24h: parseInt(cccCsExchangeStats.rows[0]?.exchanges_24h || 0)
      },
      
      cs_ton: {
        cs_to_ton_exchanges: parseInt(csTonExchangeStats.rows[0]?.cs_to_ton_exchanges || 0),
        ton_to_cs_exchanges: parseInt(csTonExchangeStats.rows[0]?.ton_to_cs_exchanges || 0),
        total_cs_to_ton_amount: parseFloat(csTonExchangeStats.rows[0]?.total_cs_to_ton_amount || 0),
        total_ton_to_cs_amount: parseFloat(csTonExchangeStats.rows[0]?.total_ton_to_cs_amount || 0),
        ton_exchanges_24h: parseInt(csTonExchangeStats.rows[0]?.ton_exchanges_24h || 0)
      },
      
      totals: {
        all_exchanges: 
          parseInt(starsExchangeStats.rows[0]?.total_exchanges || 0) +
          parseInt(cccCsExchangeStats.rows[0]?.ccc_to_cs_exchanges || 0) +
          parseInt(cccCsExchangeStats.rows[0]?.cs_to_ccc_exchanges || 0) +
          parseInt(csTonExchangeStats.rows[0]?.cs_to_ton_exchanges || 0) +
          parseInt(csTonExchangeStats.rows[0]?.ton_to_cs_exchanges || 0),
        
        all_exchanges_24h:
          parseInt(starsExchangeStats.rows[0]?.exchanges_24h || 0) +
          parseInt(cccCsExchangeStats.rows[0]?.exchanges_24h || 0) +
          parseInt(csTonExchangeStats.rows[0]?.ton_exchanges_24h || 0)
      }
    };
    
    const result = {
      players: playersStats.rows[0],
      currencies: currencyStats.rows[0],
      stars_exchange: allExchangeStats.stars_to_cs,
      all_exchanges: allExchangeStats,
      minigames: minigamesStats.rows[0],
      top_players: topPlayers.rows,
      current_rates: currentRates,
      timestamp: new Date().toISOString(),
      
      debug: {
        activity_field_used: 'created_at',
        tables_checked: ['players', 'star_transactions', 'balance_history', 'minigames_history', 'exchange_rates'],
        balance_history_available: cccCsExchangeStats.rows[0].ccc_to_cs_exchanges > 0 || cccCsExchangeStats.rows[0].cs_to_ccc_exchanges > 0,
        minigames_available: minigamesStats.rows[0].total_games > 0,
        rates_available: Object.keys(currentRates).length > 0
      }
    };
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞:', {
      totalPlayers: result.players.total_players,
      active24h: result.players.active_24h,
      totalCS: result.currencies.total_cs,
      starsExchanges: result.all_exchanges.stars_to_cs.total_exchanges,
      allExchanges: result.all_exchanges.totals.all_exchanges,
      topPlayersCount: result.top_players.length
    });
    
    res.json(result);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
    res.status(500).json({ 
      error: 'Internal server error', 
      details: err.message,
      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
  }
});
// ===== routes/admin.js - –ß–ê–°–¢–¨ 3 (–£–ü–†–ê–í–õ–ï–ù–ò–ï) =====

// üîê –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç middleware (–∫—Ä–æ–º–µ check –∏ stats)
router.use(['!/check/*', '!/stats/*'], adminAuth);

// üë§ GET /api/admin/player/:telegramId/:playerId - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
router.get('/player/:telegramId/:playerId', async (req, res) => {
  const { playerId } = req.params;
  
  try {
    console.log(`üë§ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ: ${playerId}`);
    
    const player = await getPlayer(playerId);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
    let actionsResult = { rows: [] };
    try {
      actionsResult = await pool.query(`
        SELECT action_type, amount, created_at, details
        FROM player_actions 
        WHERE telegram_id = $1 
        ORDER BY created_at DESC 
        LIMIT 50
      `, [playerId]);
    } catch (actionsError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ player_actions –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', actionsError.message);
    }
    
    // –ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤ Stars
    let starsHistory = { rows: [] };
    try {
      starsHistory = await pool.query(`
        SELECT amount, cs_amount, exchange_rate, created_at, status
        FROM star_transactions 
        WHERE player_id = $1 
          AND transaction_type = 'stars_to_cs_exchange'
        ORDER BY created_at DESC 
        LIMIT 20
      `, [playerId]);
    } catch (starsError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é Stars:', starsError.message);
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    let referralStats = { rows: [{ referrals_count: 0 }] };
    try {
      referralStats = await pool.query(`
        SELECT COUNT(*) as referrals_count
        FROM players 
        WHERE referrer_id = $1
      `, [playerId]);
    } catch (referralError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', referralError.message);
    }
    
    res.json({
      player,
      recent_actions: actionsResult.rows,
      stars_history: starsHistory.rows,
      referral_stats: referralStats.rows[0],
      timestamp: new Date().toISOString()
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// üí∞ POST /api/admin/update-balance/:telegramId - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
router.post('/update-balance/:telegramId', async (req, res) => {
  const { playerId, currency, amount, operation } = req.body;
  
  if (!playerId || !currency || amount === undefined || !operation) {
    return res.status(400).json({ error: 'Missing required fields' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: ${playerId}, ${currency}, ${operation} ${amount}`);
    
    const player = await getPlayer(playerId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    let updateQuery = '';
    let newBalance = 0;
    
    switch (currency.toLowerCase()) {
      case 'ccc':
        if (operation === 'set') {
          newBalance = parseFloat(amount);
          updateQuery = 'UPDATE players SET ccc = $1 WHERE telegram_id = $2';
        } else if (operation === 'add') {
          newBalance = parseFloat(player.ccc) + parseFloat(amount);
          updateQuery = 'UPDATE players SET ccc = ccc + $1 WHERE telegram_id = $2';
        }
        break;
      case 'cs':
        if (operation === 'set') {
          newBalance = parseFloat(amount);
          updateQuery = 'UPDATE players SET cs = $1 WHERE telegram_id = $2';
        } else if (operation === 'add') {
          newBalance = parseFloat(player.cs) + parseFloat(amount);
          updateQuery = 'UPDATE players SET cs = cs + $1 WHERE telegram_id = $2';
        }
        break;
      case 'ton':
        if (operation === 'set') {
          newBalance = parseFloat(amount);
          updateQuery = 'UPDATE players SET ton = $1 WHERE telegram_id = $2';
        } else if (operation === 'add') {
          newBalance = parseFloat(player.ton) + parseFloat(amount);
          updateQuery = 'UPDATE players SET ton = ton + $1 WHERE telegram_id = $2';
        }
        break;
      case 'stars':
        if (operation === 'set') {
          newBalance = parseInt(amount);
          updateQuery = 'UPDATE players SET telegram_stars = $1 WHERE telegram_id = $2';
        } else if (operation === 'add') {
          newBalance = parseInt(player.telegram_stars || 0) + parseInt(amount);
          updateQuery = 'UPDATE players SET telegram_stars = telegram_stars + $1 WHERE telegram_id = $2';
        }
        break;
      default:
        await client.query('ROLLBACK');
        return res.status(400).json({ error: 'Invalid currency' });
    }
    
    await client.query(updateQuery, [amount, playerId]);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await client.query(`
        INSERT INTO player_actions (telegram_id, action_type, amount, details)
        VALUES ($1, $2, $3, $4)
      `, [
        playerId,
        'admin_balance_update',
        amount,
        JSON.stringify({
          admin_id: req.params.telegramId,
          currency,
          operation,
          old_balance: operation === 'set' ? player[currency] : null,
          new_balance: newBalance
        })
      ]);
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:', logError.message);
    }
    
    await client.query('COMMIT');
    
    const updatedPlayer = await getPlayer(playerId);
    
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${playerId} ${currency} ${operation} ${amount}`);
    
    res.json({
      success: true,
      player: updatedPlayer,
      operation: {
        currency,
        operation,
        amount,
        new_balance: newBalance
      }
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// üîß POST /api/admin/verify-player/:telegramId - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞
router.post('/verify-player/:telegramId', async (req, res) => {
  const { playerId, verified } = req.body;
  
  if (!playerId || verified === undefined) {
    return res.status(400).json({ error: 'Missing required fields' });
  }
  
  try {
    console.log(`üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${playerId} -> ${verified}`);
    
    await pool.query(
      'UPDATE players SET verified = $1 WHERE telegram_id = $2',
      [verified, playerId]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await pool.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_verification_change',
        JSON.stringify({
          admin_id: req.params.telegramId,
          verified_status: verified
        })
      ]);
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:', logError.message);
    }
    
    const updatedPlayer = await getPlayer(playerId);
    
    res.json({
      success: true,
      player: updatedPlayer
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});
// ===== routes/admin.js - –ß–ê–°–¢–¨ 4 (–ó–ê–í–ï–†–®–ï–ù–ò–ï) =====

// üìà POST /api/admin/update-ton-rate/:telegramId - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON
router.post('/update-ton-rate/:telegramId', async (req, res) => {
  const { newRate } = req.body;
  
  if (!newRate || newRate <= 0) {
    return res.status(400).json({ error: 'Invalid rate' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üìà –ê–¥–º–∏–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å TON: ${newRate}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å
    let prevResult = { rows: [{ rate: 3.30 }] };
    try {
      prevResult = await client.query(
        'SELECT rate FROM exchange_rates WHERE currency_pair = $1 ORDER BY last_updated DESC LIMIT 1',
        ['TON_USD']
      );
    } catch (rateError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ exchange_rates –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫—É—Ä—Å–∞');
    }
    
    const previousRate = prevResult.rows[0]?.rate || 3.30;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å TON (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await client.query(`
        INSERT INTO exchange_rates (currency_pair, rate, previous_rate, source, metadata)
        VALUES ($1, $2, $3, $4, $5)
      `, [
        'TON_USD',
        newRate,
        previousRate,
        'admin_manual',
        JSON.stringify({
          admin_update: true,
          admin_id: req.params.telegramId,
          rate_change_percent: ((newRate - previousRate) / previousRate * 100).toFixed(2)
        })
      ]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å Stars ‚Üí CS (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      try {
        await client.query('SELECT update_stars_cs_rate()');
      } catch (funcError) {
        console.log('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è update_stars_cs_rate –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', funcError.message);
      }
    } catch (exchangeError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å exchange_rates:', exchangeError.message);
    }
    
    await client.query('COMMIT');
    
    console.log(`‚úÖ –ö—É—Ä—Å TON –æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º: ${previousRate} ‚Üí ${newRate}`);
    
    res.json({
      success: true,
      previous_rate: previousRate,
      new_rate: newRate,
      source: 'admin_manual'
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// üîì POST /api/admin/unblock-exchange/:telegramId - —Å–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–º–µ–Ω–∞
router.post('/unblock-exchange/:telegramId', async (req, res) => {
  const { exchangeType = 'stars_to_cs' } = req.body;
  
  try {
    console.log(`üîì –°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–º–µ–Ω–∞: ${exchangeType}`);
    
    // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await pool.query(`
        UPDATE exchange_blocks 
        SET blocked_until = NOW() 
        WHERE exchange_type = $1 AND blocked_until > NOW()
      `, [exchangeType]);
    } catch (blockError) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ exchange_blocks –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', blockError.message);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await pool.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        req.params.telegramId,
        'admin_unblock_exchange',
        JSON.stringify({
          exchange_type: exchangeType,
          admin_id: req.params.telegramId
        })
      ]);
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', logError.message);
    }
    
    console.log(`‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±–º–µ–Ω–∞ ${exchangeType} —Å–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–æ–º`);
    
    res.json({
      success: true,
      exchange_type: exchangeType,
      message: 'Exchange unblocked successfully'
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// üîç GET /api/admin/search/:telegramId - –ø–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤
router.get('/search/:telegramId', async (req, res) => {
  const { q } = req.query;
  
  if (!q || q.length < 2) {
    return res.status(400).json({ error: 'Search query too short' });
  }
  
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤: "${q}"`);
    
    const result = await pool.query(`
      SELECT 
        telegram_id, 
        username, 
        first_name, 
        COALESCE(cs, 0) as cs, 
        COALESCE(ccc, 0) as ccc, 
        COALESCE(ton, 0) as ton, 
        COALESCE(telegram_stars, 0) as telegram_stars, 
        COALESCE(verified, false) as verified, 
        created_at as last_activity
      FROM players 
      WHERE 
        telegram_id::text ILIKE $1 
        OR username ILIKE $1 
        OR first_name ILIKE $1
      ORDER BY cs DESC
      LIMIT 20
    `, [`%${q}%`]);
    
    res.json({
      query: q,
      results: result.rows,
      count: result.rows.length
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// üîß GET /api/admin/debug/:telegramId - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
router.get('/debug/:telegramId', (req, res) => {
  const { telegramId } = req.params;
  
  const debugInfo = {
    received_telegram_id: telegramId,
    received_type: typeof telegramId,
    admin_telegram_id: ADMIN_TELEGRAM_ID,
    admin_type: typeof ADMIN_TELEGRAM_ID,
    string_comparison: String(telegramId) === String(ADMIN_TELEGRAM_ID),
    direct_comparison: telegramId === ADMIN_TELEGRAM_ID,
    env_vars: {
      NODE_ENV: process.env.NODE_ENV,
      ADMIN_TELEGRAM_ID: process.env.ADMIN_TELEGRAM_ID
    },
    timestamp: new Date().toISOString()
  };
  
  console.log('üîß Debug –∑–∞–ø—Ä–æ—Å:', debugInfo);
  
  res.json(debugInfo);
});

// ===== –î–û–ë–ê–í–ò–¢–¨ –í routes/admin.js –ü–ï–†–ï–î module.exports =====

// üì± POST /api/admin/send-message/:telegramId - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É
// ===== –ó–ê–ú–ï–ù–ò–¢–¨ endpoint send-message –≤ routes/admin.js =====

// üì± POST /api/admin/send-message/:telegramId - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É (—Å –æ—Ç–ª–∞–¥–∫–æ–π)
router.post('/send-message/:telegramId', async (req, res) => {
  const { playerId, message } = req.body;
  
  console.log('üîç === –û–¢–õ–ê–î–ö–ê –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===');
  console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { playerId, message, adminId: req.params.telegramId });
  
  if (!playerId || !message?.trim()) {
    console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ error: 'Player ID and message are required' });
  }
  
  try {
    console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É ${playerId}: "${message}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞...');
    const player = await getPlayer(playerId);
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:', player ? {
      telegram_id: player.telegram_id,
      username: player.username,
      first_name: player.first_name
    } : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    if (!player) {
      console.log('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const fullMessage = `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ CosmoClick</b>\n\n${message}\n\nüïê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;
    console.log('üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', fullMessage);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
    console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try {
      const { sendTelegramMessage } = require('./telegramBot');
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è sendTelegramMessage –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë');
      await sendTelegramMessage(playerId, fullMessage);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ sendTelegramMessage');
    } catch (telegramBotError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ telegramBot:', telegramBotError.message);
      
      // –°–ø–æ—Å–æ–± 2: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram API
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram API...');
      
      const axios = require('axios');
      const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
      
      if (!BOT_TOKEN) {
        throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }
      
      console.log('üîë BOT_TOKEN –Ω–∞–π–¥–µ–Ω:', BOT_TOKEN ? '–î–ê (–¥–ª–∏–Ω–∞: ' + BOT_TOKEN.length + ')' : '–ù–ï–¢');
      
      const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
      const payload = {
        chat_id: playerId,
        text: fullMessage,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      };
      
      console.log('üåê URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', telegramUrl.replace(BOT_TOKEN, 'HIDDEN_TOKEN'));
      console.log('üì¶ Payload –¥–ª—è Telegram:', { ...payload, text: payload.text.substring(0, 50) + '...' });
      
      const telegramResponse = await axios.post(telegramUrl, payload, {
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });
      
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', {
        ok: telegramResponse.data.ok,
        message_id: telegramResponse.data.result?.message_id,
        error_code: telegramResponse.data.error_code,
        description: telegramResponse.data.description
      });
      
      if (!telegramResponse.data.ok) {
        throw new Error(`Telegram API –æ—à–∏–±–∫–∞: ${telegramResponse.data.description} (–∫–æ–¥: ${telegramResponse.data.error_code})`);
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await pool.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_message_sent',
        JSON.stringify({
          admin_id: req.params.telegramId,
          message: message.substring(0, 100) + (message.length > 100 ? '...' : ''),
          timestamp: new Date().toISOString(),
          success: true
        })
      ]);
      console.log('üìù –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:', logError.message);
    }
    
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É ${playerId} (${player.first_name || player.username})`);
    
    res.json({
      success: true,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
      player: {
        telegram_id: playerId,
        first_name: player.first_name,
        username: player.username
      },
      debug: {
        message_length: message.length,
        full_message_length: fullMessage.length,
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (err) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É:', err);
    console.error('‚ùå Stack trace:', err.stack);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    console.log('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:');
    console.log('- Player ID —Ç–∏–ø:', typeof playerId);
    console.log('- Player ID –∑–Ω–∞—á–µ–Ω–∏–µ:', playerId);
    console.log('- Message —Ç–∏–ø:', typeof message);
    console.log('- Message –¥–ª–∏–Ω–∞:', message?.length);
    console.log('- BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.TELEGRAM_BOT_TOKEN);
    console.log('- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', new Date().toISOString());
    
    res.status(500).json({ 
      error: 'Internal server error', 
      details: err.message,
      debug: {
        player_id: playerId,
        message_length: message?.length,
        error_type: err.constructor.name,
        bot_token_exists: !!process.env.TELEGRAM_BOT_TOKEN
      }
    });
  }
});

// üì¢ POST /api/admin/broadcast-message/:telegramId - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
router.post('/broadcast-message/:telegramId', async (req, res) => {
  const { message, onlyVerified = false } = req.body;
  
  if (!message?.trim()) {
    return res.status(400).json({ error: 'Message is required' });
  }
  
  try {
    console.log(`üì¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º${onlyVerified ? ' (—Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º)' : ''}: "${message}"`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    const playersQuery = onlyVerified 
      ? 'SELECT telegram_id, first_name, username FROM players WHERE verified = true ORDER BY created_at DESC'
      : 'SELECT telegram_id, first_name, username FROM players ORDER BY created_at DESC';
      
    const playersResult = await pool.query(playersQuery);
    const players = playersResult.rows;
    
    if (players.length === 0) {
      return res.status(400).json({ error: '–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏' });
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    const { sendTelegramMessage } = require('./telegramBot');
    
    const fullMessage = `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ CosmoClick</b>\n\n${message}\n\nüïê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let sentCount = 0;
    let errorCount = 0;
    const errors = [];
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
    for (let i = 0; i < players.length; i++) {
      const player = players[i];
      
      try {
        await sendTelegramMessage(player.telegram_id, fullMessage);
        sentCount++;
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${i + 1}/${players.length}: ${player.telegram_id}`);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ 50ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
        if (i < players.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 50));
        }
        
      } catch (sendError) {
        errorCount++;
        errors.push({
          player_id: player.telegram_id,
          player_name: player.first_name || player.username,
          error: sendError.message
        });
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${i + 1}/${players.length} (${player.telegram_id}):`, sendError.message);
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      await pool.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        req.params.telegramId,
        'admin_broadcast_sent',
        JSON.stringify({
          admin_id: req.params.telegramId,
          message: message.substring(0, 100) + (message.length > 100 ? '...' : ''),
          total_players: players.length,
          sent_count: sentCount,
          error_count: errorCount,
          only_verified: onlyVerified,
          timestamp: new Date().toISOString()
        })
      ]);
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:', logError.message);
    }
    
    console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}, –æ—à–∏–±–æ–∫: ${errorCount}`);
    
    res.json({
      success: true,
      message: '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      statistics: {
        total_players: players.length,
        sent_count: sentCount,
        error_count: errorCount,
        success_rate: Math.round((sentCount / players.length) * 100)
      },
      errors: errorCount > 0 ? errors.slice(0, 10) : [] // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
    res.status(500).json({ 
      error: 'Internal server error', 
      details: err.message 
    });
  }
});

// admin.js - –î–û–ë–ê–í–ò–¢–¨ –ü–ï–†–ï–î module.exports = router;
// –≠—Ç–∏ endpoints –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ admin.js

// ========================
// üèÜ –ù–û–í–´–ï ENDPOINTS –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ï–ú–ò–£–ú–û–ú
// ========================

// POST /api/admin/grant-premium-30days/:telegramId - –í—ã–¥–∞—á–∞ 30-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞
router.post('/grant-premium-30days/:telegramId', async (req, res) => {
  const { playerId } = req.body;
  
  if (!playerId) {
    return res.status(400).json({ error: 'Player ID is required' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üèÜ –ê–¥–º–∏–Ω –≤—ã–¥–∞–µ—Ç 30-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫—É: ${playerId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(playerId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // üî• –í—ã–¥–∞–µ–º 30-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–µ–º–∏—É–º + verified = true
    await client.query(
      `UPDATE players SET 
       premium_no_ads_until = GREATEST(
         COALESCE(premium_no_ads_until, NOW()),
         NOW() + INTERVAL '30 days'
       ),
       verified = TRUE
       WHERE telegram_id = $1`,
      [playerId]
    );
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    const subscriptionResult = await client.query(
      `INSERT INTO premium_subscriptions (
        telegram_id, 
        subscription_type, 
        payment_method, 
        payment_amount,
        end_date,
        transaction_id,
        granted_by_admin
      ) VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING id`,
      [
        playerId,
        'no_ads_30_days',
        'admin_grant',
        0,
        new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
        `admin_${Date.now()}_${playerId}`,
        true
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query(
      `INSERT INTO premium_transactions (
        telegram_id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        payment_currency,
        description,
        metadata
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
      [
        playerId,
        'admin_grant',
        'no_ads_30_days',
        'admin_grant',
        0,
        'admin',
        'Premium 30 days granted by admin',
        JSON.stringify({
          admin_id: req.params.telegramId,
          subscription_id: subscriptionResult.rows[0].id,
          granted_timestamp: new Date().toISOString(),
          verified_granted: true
        })
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
    try {
      await client.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_premium_30days_grant',
        JSON.stringify({
          admin_id: req.params.telegramId,
          subscription_id: subscriptionResult.rows[0].id,
          verified_granted: true
        })
      ]);
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', logError.message);
    }
    
    await client.query('COMMIT');
    
    const updatedPlayer = await getPlayer(playerId);
    
    console.log(`‚úÖ 30-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${playerId} + verified = true`);
    
    res.json({
      success: true,
      message: '30-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–µ–º–∏—É–º –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      player: updatedPlayer,
      subscription_id: subscriptionResult.rows[0].id
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ 30-–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// POST /api/admin/grant-premium-forever/:telegramId - –í—ã–¥–∞—á–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞
router.post('/grant-premium-forever/:telegramId', async (req, res) => {
  const { playerId } = req.body;
  
  if (!playerId) {
    return res.status(400).json({ error: 'Player ID is required' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üèÜ –ê–¥–º–∏–Ω –≤—ã–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫—É: ${playerId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(playerId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // üî• –í—ã–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º + verified = true
    await client.query(
      `UPDATE players SET 
       premium_no_ads_forever = TRUE,
       premium_no_ads_until = NULL,
       verified = TRUE
       WHERE telegram_id = $1`,
      [playerId]
    );
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    const subscriptionResult = await client.query(
      `INSERT INTO premium_subscriptions (
        telegram_id, 
        subscription_type, 
        payment_method, 
        payment_amount,
        end_date,
        transaction_id,
        granted_by_admin
      ) VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING id`,
      [
        playerId,
        'no_ads_forever',
        'admin_grant',
        0,
        null, // –ù–∞–≤—Å–µ–≥–¥–∞
        `admin_forever_${Date.now()}_${playerId}`,
        true
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query(
      `INSERT INTO premium_transactions (
        telegram_id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        payment_currency,
        description,
        metadata
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
      [
        playerId,
        'admin_grant',
        'no_ads_forever',
        'admin_grant',
        0,
        'admin',
        'Premium forever granted by admin',
        JSON.stringify({
          admin_id: req.params.telegramId,
          subscription_id: subscriptionResult.rows[0].id,
          granted_timestamp: new Date().toISOString(),
          verified_granted: true
        })
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
    try {
      await client.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_premium_forever_grant',
        JSON.stringify({
          admin_id: req.params.telegramId,
          subscription_id: subscriptionResult.rows[0].id,
          verified_granted: true
        })
      ]);
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', logError.message);
    }
    
    await client.query('COMMIT');
    
    const updatedPlayer = await getPlayer(playerId);
    
    console.log(`‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${playerId} + verified = true`);
    
    res.json({
      success: true,
      message: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      player: updatedPlayer,
      subscription_id: subscriptionResult.rows[0].id
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// POST /api/admin/revoke-premium/:telegramId - –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–æ–≤
router.post('/revoke-premium/:telegramId', async (req, res) => {
  const { playerId } = req.body;
  
  if (!playerId) {
    return res.status(400).json({ error: 'Player ID is required' });
  }
  
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    
    console.log(`üö´ –ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å—ã –∏–≥—Ä–æ–∫–∞: ${playerId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(playerId);
    if (!player) {
      await client.query('ROLLBACK');
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const currentStatus = {
      verified: player.verified,
      premium_no_ads_forever: player.premium_no_ads_forever,
      premium_no_ads_until: player.premium_no_ads_until
    };
    
    // üî• –°–±—Ä–∞—Å—ã–≤–∞–µ–º –í–°–ï —Å—Ç–∞—Ç—É—Å—ã: –ø—Ä–µ–º–∏—É–º + verified
    await client.query(
      `UPDATE players SET 
       premium_no_ads_forever = FALSE,
       premium_no_ads_until = NULL,
       verified = FALSE
       WHERE telegram_id = $1`,
      [playerId]
    );
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    await client.query(
      `UPDATE premium_subscriptions 
       SET status = 'admin_revoked' 
       WHERE telegram_id = $1 
         AND status = 'active'`,
      [playerId]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã
    await client.query(
      `INSERT INTO premium_transactions (
        telegram_id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        payment_currency,
        description,
        metadata
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)`,
      [
        playerId,
        'admin_revoke',
        'all_premium',
        'admin_action',
        0,
        'admin',
        'All premium statuses revoked by admin',
        JSON.stringify({
          admin_id: req.params.telegramId,
          revoked_timestamp: new Date().toISOString(),
          previous_status: currentStatus,
          verified_revoked: true
        })
      ]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
    try {
      await client.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_premium_revoke_all',
        JSON.stringify({
          admin_id: req.params.telegramId,
          previous_status: currentStatus,
          verified_revoked: true
        })
      ]);
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', logError.message);
    }
    
    await client.query('COMMIT');
    
    const updatedPlayer = await getPlayer(playerId);
    
    console.log(`‚úÖ –í—Å–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} + verified = false`);
    
    res.json({
      success: true,
      message: '–í—Å–µ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å—ã –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã',
      player: updatedPlayer,
      previous_status: currentStatus
    });
    
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–æ–≤:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  } finally {
    client.release();
  }
});

// POST /api/admin/grant-basic-verification/:telegramId - –í—ã–¥–∞—á–∞ –¢–û–õ–¨–ö–û –±–∞–∑–æ–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.post('/grant-basic-verification/:telegramId', async (req, res) => {
  const { playerId } = req.body;
  
  if (!playerId) {
    return res.status(400).json({ error: 'Player ID is required' });
  }
  
  try {
    console.log(`‚úÖ –ê–¥–º–∏–Ω –≤—ã–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫—É: ${playerId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const player = await getPlayer(playerId);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // –í—ã–¥–∞–µ–º –¢–û–õ–¨–ö–û verified = true (–ë–ï–ó –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π)
    await pool.query(
      'UPDATE players SET verified = TRUE WHERE telegram_id = $1',
      [playerId]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
    try {
      await pool.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_basic_verification_grant',
        JSON.stringify({
          admin_id: req.params.telegramId,
          verification_type: 'basic_only',
          premium_granted: false
        })
      ]);
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:', logError.message);
    }
    
    const updatedPlayer = await getPlayer(playerId);
    
    console.log(`‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ –∏–≥—Ä–æ–∫—É ${playerId} (–±–µ–∑ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π)`);
    
    res.json({
      success: true,
      message: '–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      player: updatedPlayer,
      verification_type: 'basic_only'
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// GET /api/admin/premium-overview/:telegramId - –û–±–∑–æ—Ä –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
router.get('/premium-overview/:telegramId', async (req, res) => {
  try {
    console.log('üìä –ê–¥–º–∏–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±–∑–æ—Ä –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–º–∏—É–º –∏–≥—Ä–æ–∫–æ–≤
    const premiumStats = await pool.query(`
      SELECT 
        COUNT(CASE WHEN verified = true THEN 1 END) as total_verified,
        COUNT(CASE WHEN premium_no_ads_forever = true THEN 1 END) as premium_forever,
        COUNT(CASE WHEN premium_no_ads_until > NOW() THEN 1 END) as premium_30days_active,
        COUNT(CASE WHEN premium_no_ads_until IS NOT NULL AND premium_no_ads_until <= NOW() THEN 1 END) as premium_expired,
        COUNT(CASE WHEN verified = true AND premium_no_ads_forever = false AND (premium_no_ads_until IS NULL OR premium_no_ads_until <= NOW()) THEN 1 END) as basic_verified_only
      FROM players
    `);
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–º–∏—É–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const recentTransactions = await pool.query(`
      SELECT 
        telegram_id,
        transaction_type,
        subscription_type,
        payment_method,
        payment_amount,
        description,
        created_at
      FROM premium_transactions 
      ORDER BY created_at DESC 
      LIMIT 20
    `);
    
    // –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —Å –ø—Ä–µ–º–∏—É–º–æ–º
    const premiumPlayers = await pool.query(`
      SELECT 
        telegram_id,
        first_name,
        username,
        verified,
        premium_no_ads_forever,
        premium_no_ads_until,
        created_at
      FROM players 
      WHERE verified = true 
      ORDER BY 
        premium_no_ads_forever DESC,
        premium_no_ads_until DESC NULLS LAST,
        created_at DESC
      LIMIT 15
    `);
    
    res.json({
      success: true,
      stats: premiumStats.rows[0],
      recent_transactions: recentTransactions.rows,
      premium_players: premiumPlayers.rows,
      timestamp: new Date().toISOString()
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –æ–±–∑–æ—Ä–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –≤ routes/admin.js - API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏

// üìã GET /api/admin/quests/list/:telegramId - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
router.get('/quests/list/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if (telegramId !== '1222791281') {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    const questsResult = await pool.query(`
      SELECT 
        qt.id,
        qt.quest_key,
        qt.quest_type,
        qt.reward_cs,
        qt.quest_data,
        qt.target_languages,
        qt.is_active,
        qt.sort_order,
        qt.manual_check_instructions,
        qt.created_at,
        qt.created_by,
        -- –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        COUNT(qtr.language_code) as translations_count,
        -- –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        ARRAY_AGG(qtr.language_code ORDER BY qtr.language_code) FILTER (WHERE qtr.language_code IS NOT NULL) as available_languages,
        -- –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        MAX(CASE WHEN qtr.language_code = 'en' THEN qtr.quest_name END) as english_name
      FROM quest_templates qt
      LEFT JOIN quest_translations qtr ON qt.quest_key = qtr.quest_key
      GROUP BY qt.id, qt.quest_key, qt.quest_type, qt.reward_cs, qt.quest_data, 
               qt.target_languages, qt.is_active, qt.sort_order, 
               qt.manual_check_instructions, qt.created_at, qt.created_by
      ORDER BY qt.sort_order, qt.id
    `);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    const completionStats = await pool.query(`
      SELECT 
        q.quest_id,
        qt.quest_key,
        COUNT(*) as total_completions,
        COUNT(DISTINCT pq.telegram_id) as unique_players
      FROM quest_templates qt
      LEFT JOIN quests q ON q.quest_name = qt.quest_key OR CAST(q.quest_id AS VARCHAR) = qt.quest_key
      LEFT JOIN player_quests pq ON pq.quest_id = q.quest_id AND pq.completed = true
      GROUP BY q.quest_id, qt.quest_key
    `);
    
    const statsMap = {};
    completionStats.rows.forEach(stat => {
      if (stat.quest_key) {
        statsMap[stat.quest_key] = {
          total_completions: parseInt(stat.total_completions) || 0,
          unique_players: parseInt(stat.unique_players) || 0
        };
      }
    });
    
    const questsWithStats = questsResult.rows.map(quest => ({
      ...quest,
      stats: statsMap[quest.quest_key] || { total_completions: 0, unique_players: 0 }
    }));
    
    console.log(`üìã –ê–¥–º–∏–Ω ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π: ${questsWithStats.length} –Ω–∞–π–¥–µ–Ω–æ`);
    
    res.json({
      success: true,
      quests: questsWithStats,
      total_quests: questsWithStats.length,
      active_quests: questsWithStats.filter(q => q.is_active).length,
      inactive_quests: questsWithStats.filter(q => !q.is_active).length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π:', error);
    res.status(500).json({ error: 'Failed to fetch quests', details: error.message });
  }
});

// ‚úèÔ∏è GET /api/admin/quests/get/:questKey/:telegramId - –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
router.get('/quests/get/:questKey/:telegramId', async (req, res) => {
  try {
    const { questKey, telegramId } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if (telegramId !== '1222791281') {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∑–∞–¥–∞–Ω–∏—è
    const templateResult = await pool.query(
      'SELECT * FROM quest_templates WHERE quest_key = $1',
      [questKey]
    );
    
    if (templateResult.rows.length === 0) {
      return res.status(404).json({ error: 'Quest template not found' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    const translationsResult = await pool.query(
      'SELECT * FROM quest_translations WHERE quest_key = $1 ORDER BY language_code',
      [questKey]
    );
    
    const template = templateResult.rows[0];
    const translations = {};
    
    translationsResult.rows.forEach(translation => {
      translations[translation.language_code] = {
        quest_name: translation.quest_name,
        description: translation.description,
        manual_check_user_instructions: translation.manual_check_user_instructions
      };
    });
    
    console.log(`‚úèÔ∏è –ê–¥–º–∏–Ω ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è: ${questKey}`);
    
    res.json({
      success: true,
      template: template,
      translations: translations,
      supported_languages: ['en', 'ru', 'es', 'fr', 'de', 'zh', 'ja']
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞–Ω–∏—è:', error);
    res.status(500).json({ error: 'Failed to fetch quest details', details: error.message });
  }
});

// ‚ûï POST /api/admin/quests/create/:telegramId - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
router.post('/quests/create/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    const { 
      quest_key, 
      quest_type, 
      reward_cs, 
      quest_data, 
      target_languages, 
      sort_order,
      manual_check_instructions,
      translations 
    } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if (telegramId !== '1222791281') {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!quest_key || !quest_type || !reward_cs || !translations) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    
    if (!translations.en || !translations.en.quest_name || !translations.en.description) {
      return res.status(400).json({ error: 'English translation is required' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ quest_key —É–Ω–∏–∫–∞–ª–µ–Ω
    const existingResult = await pool.query(
      'SELECT quest_key FROM quest_templates WHERE quest_key = $1',
      [quest_key]
    );
    
    if (existingResult.rows.length > 0) {
      return res.status(400).json({ error: 'Quest key already exists' });
    }
    
    await pool.query('BEGIN');
    
    try {
      // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∑–∞–¥–∞–Ω–∏—è
      const templateResult = await pool.query(`
        INSERT INTO quest_templates (
          quest_key, quest_type, reward_cs, quest_data, 
          target_languages, sort_order, manual_check_instructions, created_by
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        RETURNING *
      `, [
        quest_key,
        quest_type,
        reward_cs,
        quest_data ? JSON.stringify(quest_data) : null,
        target_languages,
        sort_order || 999,
        manual_check_instructions,
        telegramId
      ]);
      
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
      const supportedLanguages = ['en', 'ru', 'es', 'fr', 'de', 'zh', 'ja'];
      
      for (const lang of supportedLanguages) {
        if (translations[lang] && translations[lang].quest_name && translations[lang].description) {
          await pool.query(`
            INSERT INTO quest_translations (
              quest_key, language_code, quest_name, description, manual_check_user_instructions
            ) VALUES ($1, $2, $3, $4, $5)
          `, [
            quest_key,
            lang,
            translations[lang].quest_name,
            translations[lang].description,
            translations[lang].manual_check_user_instructions || null
          ]);
        }
      }
      
      await pool.query('COMMIT');
      
      console.log(`‚ûï –ê–¥–º–∏–Ω ${telegramId} —Å–æ–∑–¥–∞–ª –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${quest_key} (${quest_type})`);
      
      res.json({
        success: true,
        message: 'Quest created successfully',
        quest: templateResult.rows[0]
      });
      
    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
    res.status(500).json({ error: 'Failed to create quest', details: error.message });
  }
});

// ‚úèÔ∏è PUT /api/admin/quests/update/:questKey/:telegramId - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
router.put('/quests/update/:questKey/:telegramId', async (req, res) => {
  try {
    const { questKey, telegramId } = req.params;
    const { 
      quest_type, 
      reward_cs, 
      quest_data, 
      target_languages, 
      sort_order,
      is_active,
      manual_check_instructions,
      translations 
    } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if (telegramId !== '1222791281') {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingResult = await pool.query(
      'SELECT * FROM quest_templates WHERE quest_key = $1',
      [questKey]
    );
    
    if (existingResult.rows.length === 0) {
      return res.status(404).json({ error: 'Quest template not found' });
    }
    
    await pool.query('BEGIN');
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –∑–∞–¥–∞–Ω–∏—è
      const templateResult = await pool.query(`
        UPDATE quest_templates SET
          quest_type = COALESCE($1, quest_type),
          reward_cs = COALESCE($2, reward_cs),
          quest_data = COALESCE($3, quest_data),
          target_languages = COALESCE($4, target_languages),
          sort_order = COALESCE($5, sort_order),
          is_active = COALESCE($6, is_active),
          manual_check_instructions = COALESCE($7, manual_check_instructions)
        WHERE quest_key = $8
        RETURNING *
      `, [
        quest_type,
        reward_cs,
        quest_data ? JSON.stringify(quest_data) : null,
        target_languages,
        sort_order,
        is_active,
        manual_check_instructions,
        questKey
      ]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã)
      if (translations) {
        const supportedLanguages = ['en', 'ru', 'es', 'fr', 'de', 'zh', 'ja'];
        
        for (const lang of supportedLanguages) {
          if (translations[lang] && translations[lang].quest_name && translations[lang].description) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
            await pool.query(`
              INSERT INTO quest_translations (
                quest_key, language_code, quest_name, description, manual_check_user_instructions
              ) VALUES ($1, $2, $3, $4, $5)
              ON CONFLICT (quest_key, language_code) 
              DO UPDATE SET
                quest_name = EXCLUDED.quest_name,
                description = EXCLUDED.description,
                manual_check_user_instructions = EXCLUDED.manual_check_user_instructions
            `, [
              questKey,
              lang,
              translations[lang].quest_name,
              translations[lang].description,
              translations[lang].manual_check_user_instructions || null
            ]);
          }
        }
      }
      
      await pool.query('COMMIT');
      
      console.log(`‚úèÔ∏è –ê–¥–º–∏–Ω ${telegramId} –æ–±–Ω–æ–≤–∏–ª –∑–∞–¥–∞–Ω–∏–µ: ${questKey}`);
      
      res.json({
        success: true,
        message: 'Quest updated successfully',
        quest: templateResult.rows[0]
      });
      
    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
    res.status(500).json({ error: 'Failed to update quest', details: error.message });
  }
});

// üóëÔ∏è DELETE /api/admin/quests/delete/:questKey/:telegramId - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
router.delete('/quests/delete/:questKey/:telegramId', async (req, res) => {
  try {
    const { questKey, telegramId } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if (telegramId !== '1222791281') {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingResult = await pool.query(
      'SELECT * FROM quest_templates WHERE quest_key = $1',
      [questKey]
    );
    
    if (existingResult.rows.length === 0) {
      return res.status(404).json({ error: 'Quest template not found' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    const completionsResult = await pool.query(`
      SELECT COUNT(*) as completion_count
      FROM player_quests pq
      JOIN quests q ON pq.quest_id = q.quest_id
      WHERE q.quest_name = $1 OR CAST(q.quest_id AS VARCHAR) = $1
    `, [questKey]);
    
    const completionCount = parseInt(completionsResult.rows[0]?.completion_count) || 0;
    
    await pool.query('BEGIN');
    
    try {
      // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
      const translationsResult = await pool.query(
        'DELETE FROM quest_translations WHERE quest_key = $1',
        [questKey]
      );
      
      // –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
      const templateResult = await pool.query(
        'DELETE FROM quest_templates WHERE quest_key = $1 RETURNING *',
        [questKey]
      );
      
      await pool.query('COMMIT');
      
      console.log(`üóëÔ∏è –ê–¥–º–∏–Ω ${telegramId} —É–¥–∞–ª–∏–ª –∑–∞–¥–∞–Ω–∏–µ: ${questKey} (–±—ã–ª–æ ${completionCount} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π)`);
      
      res.json({
        success: true,
        message: 'Quest deleted successfully',
        deleted_quest: templateResult.rows[0],
        deleted_translations: translationsResult.rowCount,
        completion_count: completionCount
      });
      
    } catch (error) {
      await pool.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
    res.status(500).json({ error: 'Failed to delete quest', details: error.message });
  }
});

// üîÑ POST /api/admin/quests/toggle-status/:questKey/:telegramId - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
router.post('/quests/toggle-status/:questKey/:telegramId', async (req, res) => {
  try {
    const { questKey, telegramId } = req.params;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if (telegramId !== '1222791281') {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    const result = await pool.query(`
      UPDATE quest_templates 
      SET is_active = NOT is_active 
      WHERE quest_key = $1 
      RETURNING quest_key, is_active
    `, [questKey]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Quest template not found' });
    }
    
    const quest = result.rows[0];
    const status = quest.is_active ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ';
    
    console.log(`üîÑ –ê–¥–º–∏–Ω ${telegramId} ${status} –∑–∞–¥–∞–Ω–∏–µ: ${questKey}`);
    
    res.json({
      success: true,
      message: `Quest ${status} successfully`,
      quest_key: quest.quest_key,
      is_active: quest.is_active
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ error: 'Failed to toggle quest status', details: error.message });
  }
});

// POST /api/admin/test-premium-cleanup/:telegramId - –¢–µ—Å—Ç–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–º–∏—É–º–∞
router.post('/test-premium-cleanup/:telegramId', async (req, res) => {
  try {
    console.log('üß™ –ê–¥–º–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–æ–∫');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const axios = require('axios');
    const apiUrl = process.env.NODE_ENV === 'production'
      ? 'https://cosmoclick-backend.onrender.com'
      : 'http://localhost:5000';
    
    // –í—ã–∑—ã–≤–∞–µ–º endpoint –æ—á–∏—Å—Ç–∫–∏
    const response = await axios.post(`${apiUrl}/api/admin/manual-cleanup-premium`, {
      admin_id: req.params.telegramId
    });
    
    res.json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      cleanup_result: response.data
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏:', err);
    res.status(500).json({ 
      error: 'Test cleanup failed', 
      details: err.response?.data?.error || err.message 
    });
  }
});

// ========================
// üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û ENDPOINT verify-player
// ========================

// –ó–ê–ú–ï–ù–ò–¢–¨ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π verify-player endpoint –Ω–∞ —ç—Ç–æ—Ç:
router.post('/verify-player/:telegramId', async (req, res) => {
  const { playerId, verified } = req.body;
  
  if (!playerId || verified === undefined) {
    return res.status(400).json({ error: 'Missing required fields' });
  }
  
  try {
    console.log(`üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${playerId} -> ${verified}`);
    
    // üî• –í–ê–ñ–ù–û: –≠—Ç–æ—Ç endpoint —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û —Å –±–∞–∑–æ–≤–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    // –ù–ï —Ç—Ä–æ–≥–∞–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–ª—è, —Ç–æ–ª—å–∫–æ verified —Å—Ç–∞—Ç—É—Å
    await pool.query(
      'UPDATE players SET verified = $1 WHERE telegram_id = $2',
      [verified, playerId]
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    try {
      await pool.query(`
        INSERT INTO player_actions (telegram_id, action_type, details)
        VALUES ($1, $2, $3)
      `, [
        playerId,
        'admin_basic_verification_change',
        JSON.stringify({
          admin_id: req.params.telegramId,
          verified_status: verified,
          verification_type: 'basic_only',
          premium_affected: false
        })
      ]);
    } catch (logError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:', logError.message);
    }
    
    const updatedPlayer = await getPlayer(playerId);
    
    console.log(`‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞: ${playerId} -> verified = ${verified}`);
    
    res.json({
      success: true,
      player: updatedPlayer,
      verification_type: 'basic_only'
    });
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

module.exports = router;