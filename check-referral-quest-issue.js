const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DATABASE_URL.includes('localhost') ? false : { rejectUnauthorized: false }
});

async function checkReferralQuestIssue() {
  try {
    if (process.env.NODE_ENV === 'development') console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–≤–µ—Å—Ç–æ–º "–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞"...\n');

    // 1. –ù–∞—Ö–æ–¥–∏–º ID –∫–≤–µ—Å—Ç–∞ invite_friend
    const questResult = await pool.query(
      `SELECT id, quest_key, reward_cs FROM quest_templates WHERE quest_key = 'invite_friend'`
    );

    if (questResult.rows.length === 0) {
      if (process.env.NODE_ENV === 'development') console.log('‚ùå –ö–≤–µ—Å—Ç invite_friend –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    const inviteFriendQuestId = questResult.rows[0].id;
    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ö–≤–µ—Å—Ç "–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞" –Ω–∞–π–¥–µ–Ω: ID=${inviteFriendQuestId}, –Ω–∞–≥—Ä–∞–¥–∞=${questResult.rows[0].reward_cs} CS\n`);

    // 2. –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    const playersWithReferrals = await pool.query(`
      SELECT
        p.telegram_id,
        p.first_name,
        p.referrals_count,
        pq.completed as quest_completed,
        pq.quest_id
      FROM players p
      LEFT JOIN player_quests pq
        ON p.telegram_id = pq.telegram_id
        AND pq.quest_id = $1
      WHERE p.referrals_count > 0
      ORDER BY p.referrals_count DESC
    `, [inviteFriendQuestId]);

    if (process.env.NODE_ENV === 'development') console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`);
    if (process.env.NODE_ENV === 'development') console.log(`–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${playersWithReferrals.rows.length}`);

    // 3. –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const completedQuest = playersWithReferrals.rows.filter(p => p.quest_completed === true);
    const notCompletedQuest = playersWithReferrals.rows.filter(p => !p.quest_completed);

    if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: ${completedQuest.length}`);
    if (process.env.NODE_ENV === 'development') console.log(`‚ùå –ö–≤–µ—Å—Ç –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω (–ü–û–¢–ï–†–Ø–®–ö–ò): ${notCompletedQuest.length}\n`);

    if (notCompletedQuest.length > 0) {
      if (process.env.NODE_ENV === 'development') console.log(`üö® –ü–û–¢–ï–†–Ø–®–ö–ò (–∏–≥—Ä–æ–∫–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏, –Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞):\n`);
      notCompletedQuest.forEach((player, index) => {
        if (process.env.NODE_ENV === 'development') console.log(`${index + 1}. ${player.first_name} (ID: ${player.telegram_id})`);
        if (process.env.NODE_ENV === 'development') console.log(`   –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${player.referrals_count}`);
        if (process.env.NODE_ENV === 'development') console.log(`   –ö–≤–µ—Å—Ç –≤ –ë–î: ${player.quest_id ? '–µ—Å—Ç—å –∑–∞–ø–∏—Å—å' : '–Ω–µ—Ç –∑–∞–ø–∏—Å–∏'}\n`);
      });

      if (process.env.NODE_ENV === 'development') console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:`);
      if (process.env.NODE_ENV === 'development') console.log(`–ù–∞–π–¥–µ–Ω–æ ${notCompletedQuest.length} –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–≤–µ—Å—Ç.`);
      if (process.env.NODE_ENV === 'development') console.log(`–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç fix-referral-quest.js –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.`);
    } else {
      if (process.env.NODE_ENV === 'development') console.log(`‚úÖ –ü–æ—Ç–µ—Ä—è—à–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í—Å–µ –∏–≥—Ä–æ–∫–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ –∏–º–µ—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç.`);
    }

    // 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if (process.env.NODE_ENV === 'development') console.log(`\nüìà –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`);

    const totalReferrals = playersWithReferrals.rows.reduce((sum, p) => sum + p.referrals_count, 0);
    if (process.env.NODE_ENV === 'development') console.log(`–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${totalReferrals}`);

    const maxReferrals = Math.max(...playersWithReferrals.rows.map(p => p.referrals_count));
    const topReferrer = playersWithReferrals.rows.find(p => p.referrals_count === maxReferrals);
    if (process.env.NODE_ENV === 'development') console.log(`–ú–∞–∫—Å–∏–º—É–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞: ${maxReferrals} (${topReferrer?.first_name})`);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
  } finally {
    pool.end();
  }
}

checkReferralQuestIssue();
