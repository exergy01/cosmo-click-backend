/**
 * üîÑ –°–ò–°–¢–ï–ú–ê –†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò HP –ö–û–†–ê–ë–õ–ï–ô
 * Galactic Empire v2.0
 */

const racesConfig = require('../config/galactic-empire/races.config');

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é HP –¥–ª—è –∫–æ—Ä–∞–±–ª—è
 * @param {Object} ship - –ö–æ—Ä–∞–±–ª—å –∏–∑ –ë–î
 * @param {string} race - –†–∞—Å–∞ –∏–≥—Ä–æ–∫–∞
 * @returns {number} - –ù–æ–≤—ã–π current_hp
 */
function calculateRegeneratedHP(ship, race) {
  const now = Date.now();
  const lastUpdate = new Date(ship.updated_at).getTime();
  const timePassedSeconds = (now - lastUpdate) / 1000;

  // –í—Ä–µ–º—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–æ—Ç 0 –¥–æ max_hp)
  const FULL_REGEN_TIME_HOURS = 6; // 6 —á–∞—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å
  const ZERG_REGEN_TIME_HOURS = 3;  // 3 —á–∞—Å–∞ –¥–ª—è Zerg (–≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)

  let fullRegenSeconds = FULL_REGEN_TIME_HOURS * 60 * 60; // 6 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

  // –ë–æ–Ω—É—Å —Ä–∞—Å—ã Zerg: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ
  if (race === 'zerg' && racesConfig.zerg.bonuses.regeneration) {
    fullRegenSeconds = ZERG_REGEN_TIME_HOURS * 60 * 60; // 3 —á–∞—Å–∞
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  const regenPercent = timePassedSeconds / fullRegenSeconds;

  // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å (–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ HP –¥–æ max)
  const hpToRegenerate = Math.floor((ship.max_hp - ship.current_hp) * regenPercent);

  if (process.env.NODE_ENV === 'development') console.log(`üîÑ Regen calc for ship ${ship.id} (${race}): timePassed=${Math.floor(timePassedSeconds)}s (${(timePassedSeconds/3600).toFixed(2)}h), fullRegen=${fullRegenSeconds}s, percent=${(regenPercent*100).toFixed(2)}%, regen=${hpToRegenerate} HP, current=${ship.current_hp}/${ship.max_hp}`);

  if (hpToRegenerate <= 0) {
    return ship.current_hp; // –ù–µ—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  }

  // –ù–æ–≤—ã–π HP –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å max_hp
  // –í–ê–ñ–ù–û: —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ —Å 0 HP (—É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è)
  const newHP = Math.min(ship.max_hp, ship.current_hp + hpToRegenerate);

  if (process.env.NODE_ENV === 'development') console.log(`‚úÖ Regeneration: ${ship.current_hp} ‚Üí ${newHP} HP (+${hpToRegenerate})`);

  return newHP;
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –ª–æ–≥–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Zerg)
 * @param {Object} ship - –ö–æ—Ä–∞–±–ª—å –∏–∑ –ë–î
 * @param {string} race - –†–∞—Å–∞ –∏–≥—Ä–æ–∫–∞
 * @param {Date} lastLogin - –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
 * @returns {number} - –ù–æ–≤—ã–π current_hp
 */
function applyLoginPenalty(ship, race, lastLogin) {
  if (race !== 'zerg') {
    return ship.current_hp; // –®—Ç—Ä–∞—Ñ —Ç–æ–ª—å–∫–æ –¥–ª—è Zerg
  }

  const zergReqs = racesConfig.zerg.requirements;
  if (!zergReqs || !zergReqs.dailyLoginRequired) {
    return ship.current_hp;
  }

  const now = Date.now();
  const lastLoginTime = new Date(lastLogin).getTime();
  const daysPassed = Math.floor((now - lastLoginTime) / (1000 * 60 * 60 * 24));

  if (daysPassed <= 1) {
    return ship.current_hp; // –ù–µ—Ç —à—Ç—Ä–∞—Ñ–∞ –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –±—ã–ª —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞
  }

  // –®—Ç—Ä–∞—Ñ: -10 HP –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–≥–æ –¥–Ω—è)
  const penaltyDays = daysPassed - 1;
  const hpPenalty = penaltyDays * Math.abs(zergReqs.dailyLoginPenalty.value);

  // HP –Ω–µ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –Ω–∏–∂–µ 0
  const newHP = Math.max(0, ship.current_hp - hpPenalty);

  if (process.env.NODE_ENV === 'development') console.log(`‚ö†Ô∏è Zerg penalty: ${penaltyDays} days missed, -${hpPenalty} HP (ship ${ship.id})`);

  return newHP;
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç HP –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π –∏–≥—Ä–æ–∫–∞
 * @param {Object} pool - DB pool
 * @param {string} telegramId - ID –∏–≥—Ä–æ–∫–∞
 * @param {string} race - –†–∞—Å–∞ –∏–≥—Ä–æ–∫–∞
 * @param {Date} lastLogin - –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
 * @returns {Promise<void>}
 */
async function updateShipsHP(pool, telegramId, race, lastLogin) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –∏–≥—Ä–æ–∫–∞
    const shipsResult = await pool.query(`
      SELECT * FROM galactic_empire_ships
      WHERE player_id = $1
    `, [telegramId]);

    if (shipsResult.rows.length === 0) {
      return; // –ù–µ—Ç –∫–æ—Ä–∞–±–ª–µ–π
    }

    for (const ship of shipsResult.rows) {
      let newHP = ship.current_hp;

      // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      newHP = calculateRegeneratedHP(ship, race);

      // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ Zerg)
      newHP = applyLoginPenalty(ship, race, lastLogin);

      // –û–±–Ω–æ–≤–ª—è–µ–º HP –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (newHP !== ship.current_hp) {
        await pool.query(`
          UPDATE galactic_empire_ships
          SET current_hp = $1, updated_at = NOW()
          WHERE id = $2
        `, [newHP, ship.id]);

        if (process.env.NODE_ENV === 'development') console.log(`üîÑ Regenerated ship ${ship.id}: ${ship.current_hp} ‚Üí ${newHP} HP`);
      }
    }
  } catch (error) {
    console.error('‚ùå Error updating ships HP:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç last_login –∏–≥—Ä–æ–∫–∞
 * @param {Object} pool - DB pool
 * @param {string} telegramId - ID –∏–≥—Ä–æ–∫–∞
 * @returns {Promise<void>}
 */
async function updateLastLogin(pool, telegramId) {
  try {
    await pool.query(`
      UPDATE galactic_empire_players
      SET last_login = NOW()
      WHERE telegram_id = $1
    `, [telegramId]);
  } catch (error) {
    console.error('‚ùå Error updating last login:', error);
    throw error;
  }
}

module.exports = {
  calculateRegeneratedHP,
  applyLoginPenalty,
  updateShipsHP,
  updateLastLogin
};
