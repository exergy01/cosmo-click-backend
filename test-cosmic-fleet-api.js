const axios = require('axios');

const API_BASE = 'http://localhost:5002';
const DEBUG_TELEGRAM_ID = 123456789; // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π ID

async function testCosmicFleetAPI() {
  if (process.env.NODE_ENV === 'development') console.log('üöÄ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï COSMIC FLEET API ===');
  if (process.env.NODE_ENV === 'development') console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toISOString());

  try {
    // 1. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
    if (process.env.NODE_ENV === 'development') console.log('\n1. üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞...');
    const initResponse = await axios.post(`${API_BASE}/api/cosmic-fleet/user/${DEBUG_TELEGRAM_ID}/init`);
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', initResponse.data);

    // 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if (process.env.NODE_ENV === 'development') console.log('\n2. üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...');
    const profileResponse = await axios.get(`${API_BASE}/api/cosmic-fleet/user/${DEBUG_TELEGRAM_ID}`);
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', profileResponse.data);

    // 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–æ—Ç–∞
    if (process.env.NODE_ENV === 'development') console.log('\n3. üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–æ—Ç–∞...');
    const fleetResponse = await axios.get(`${API_BASE}/api/cosmic-fleet/fleet/${DEBUG_TELEGRAM_ID}`);
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –§–ª–æ—Ç –ø–æ–ª—É—á–µ–Ω:', fleetResponse.data);

    if (fleetResponse.data.length > 0) {
      const shipId = fleetResponse.data[0].id;

      // 4. –¢–µ—Å—Ç PvE –±–æ—è
      if (process.env.NODE_ENV === 'development') console.log('\n4. üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º PvE –±–æ–π...');
      const battleResponse = await axios.post(`${API_BASE}/api/cosmic-fleet/battle/pve`, {
        telegramId: DEBUG_TELEGRAM_ID,
        shipId: shipId
      });
      if (process.env.NODE_ENV === 'development') console.log('‚úÖ PvE –±–æ–π –ø—Ä–æ–≤–µ–¥–µ–Ω:', battleResponse.data);
    }

    // 5. –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞ Luminios
    if (process.env.NODE_ENV === 'development') console.log('\n5. üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å Luminios...');
    const balanceResponse = await axios.get(`${API_BASE}/api/luminios/balance/${DEBUG_TELEGRAM_ID}`);
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –ë–∞–ª–∞–Ω—Å Luminios:', balanceResponse.data);

    // 6. –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ—Ä–∞–±–ª–µ–π (GET endpoint –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞)
    if (process.env.NODE_ENV === 'development') console.log('\n6. üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–æ—Ä–∞–±–ª–µ–π...');
    try {
      const shipsResponse = await axios.get(`${API_BASE}/api/cosmic-fleet/ships`);
      if (process.env.NODE_ENV === 'development') console.log('‚ÑπÔ∏è Ships endpoint:', shipsResponse.status);
    } catch (err) {
      if (process.env.NODE_ENV === 'development') console.log('‚ÑπÔ∏è Ships endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ)');
    }

    if (process.env.NODE_ENV === 'development') console.log('\nüéâ === –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û ===');
    return {
      success: true,
      timestamp: new Date().toISOString()
    };

  } catch (error) {
    console.error('\n‚ùå === –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
    console.error('‚ùå URL:', error.config?.url);
    console.error('‚ùå Method:', error.config?.method);
    console.error('‚ùå Status:', error.response?.status);
    console.error('‚ùå Data:', error.response?.data);
    console.error('‚ùå Message:', error.message);

    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  testCosmicFleetAPI()
    .then((result) => {
      if (result.success) {
        if (process.env.NODE_ENV === 'development') console.log('üéä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      } else {
        console.error('üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:', result.error);
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
      process.exit(1);
    });
}

module.exports = { testCosmicFleetAPI };