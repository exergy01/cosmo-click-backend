const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º DATABASE_URL –∏–∑ .env
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

async function applyMigration() {
  const client = await pool.connect();

  try {
    if (process.env.NODE_ENV === 'development') console.log('\n========================================');
    if (process.env.NODE_ENV === 'development') console.log('üöÄ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò 008: –ö–í–ï–°–¢–´');
    if (process.env.NODE_ENV === 'development') console.log('========================================\n');

    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const migrationPath = path.join(__dirname, 'migrations', '008_migrate_old_quests.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

    if (process.env.NODE_ENV === 'development') console.log('üìÑ –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏:', migrationPath);
    if (process.env.NODE_ENV === 'development') console.log('üìä –†–∞–∑–º–µ—Ä:', migrationSQL.length, '–±–∞–π—Ç\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (process.env.NODE_ENV === 'development') console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n');

    const oldQuests = await client.query('SELECT COUNT(*) as count FROM quests WHERE is_active = true');
    if (process.env.NODE_ENV === 'development') console.log('   –°—Ç–∞—Ä—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ (quests):', oldQuests.rows[0].count);

    const newQuests = await client.query('SELECT COUNT(*) as count FROM quest_templates');
    if (process.env.NODE_ENV === 'development') console.log('   –ù–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ (quest_templates):', newQuests.rows[0].count);

    const playerQuests = await client.query('SELECT COUNT(*) as count FROM player_quests WHERE quest_key IS NULL');
    if (process.env.NODE_ENV === 'development') console.log('   Player quests –±–µ–∑ quest_key:', playerQuests.rows[0].count);

    if (process.env.NODE_ENV === 'development') console.log('\n‚è≥ –ü—Ä–∏–º–µ–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é...\n');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await client.query(migrationSQL);

    if (process.env.NODE_ENV === 'development') console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (process.env.NODE_ENV === 'development') console.log('========================================');
    if (process.env.NODE_ENV === 'development') console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò');
    if (process.env.NODE_ENV === 'development') console.log('========================================\n');

    const newQuestsAfter = await client.query('SELECT COUNT(*) as count FROM quest_templates');
    if (process.env.NODE_ENV === 'development') console.log('   –í—Å–µ–≥–æ quest_templates:', newQuestsAfter.rows[0].count);

    const migratedQuests = await client.query("SELECT COUNT(*) as count FROM quest_templates WHERE created_by = 'migration_008'");
    if (process.env.NODE_ENV === 'development') console.log('   –î–æ–±–∞–≤–ª–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–µ–π:', migratedQuests.rows[0].count);

    const ruTranslations = await client.query("SELECT COUNT(*) as count FROM quest_translations WHERE language_code = 'ru'");
    if (process.env.NODE_ENV === 'development') console.log('   –†—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', ruTranslations.rows[0].count);

    const enTranslations = await client.query("SELECT COUNT(*) as count FROM quest_translations WHERE language_code = 'en'");
    if (process.env.NODE_ENV === 'development') console.log('   –ê–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', enTranslations.rows[0].count);

    const updatedPlayerQuests = await client.query('SELECT COUNT(*) as count FROM player_quests WHERE quest_key IS NOT NULL');
    if (process.env.NODE_ENV === 'development') console.log('   Player quests —Å quest_key:', updatedPlayerQuests.rows[0].count);

    const stillNoKey = await client.query('SELECT COUNT(*) as count FROM player_quests WHERE quest_key IS NULL');
    if (process.env.NODE_ENV === 'development') console.log('   Player quests –±–µ–∑ quest_key:', stillNoKey.rows[0].count);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
    if (process.env.NODE_ENV === 'development') console.log('\n========================================');
    if (process.env.NODE_ENV === 'development') console.log('üìã –í–°–ï –ö–í–ï–°–¢–´ –í –ù–û–í–û–ô –°–ò–°–¢–ï–ú–ï:');
    if (process.env.NODE_ENV === 'development') console.log('========================================\n');

    const allQuests = await client.query(`
      SELECT
        qt.quest_key,
        qt.quest_type,
        qt.reward_cs,
        qt.is_active,
        COALESCE(qtr_ru.quest_name, qtr_en.quest_name, qt.quest_key) as name
      FROM quest_templates qt
      LEFT JOIN quest_translations qtr_ru ON qt.quest_key = qtr_ru.quest_key AND qtr_ru.language_code = 'ru'
      LEFT JOIN quest_translations qtr_en ON qt.quest_key = qtr_en.quest_key AND qtr_en.language_code = 'en'
      ORDER BY qt.sort_order
    `);

    allQuests.rows.forEach((quest, idx) => {
      const status = quest.is_active ? '‚úÖ' : '‚ùå';
      if (process.env.NODE_ENV === 'development') console.log(`${idx + 1}. ${status} ${quest.name}`);
      if (process.env.NODE_ENV === 'development') console.log(`   Key: ${quest.quest_key}`);
      if (process.env.NODE_ENV === 'development') console.log(`   Type: ${quest.quest_type}`);
      if (process.env.NODE_ENV === 'development') console.log(`   Reward: ${quest.reward_cs} CS`);
      if (process.env.NODE_ENV === 'development') console.log('');
    });

    if (process.env.NODE_ENV === 'development') console.log('========================================');
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
    if (process.env.NODE_ENV === 'development') console.log('========================================\n');

  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.error(error.message);
    console.error('\nStack trace:');
    console.error(error.stack);
    process.exit(1);
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫
applyMigration().catch(err => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});
