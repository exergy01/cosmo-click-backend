/**
 * ü§ñ COSMIC FLEET - BOTS CONFIGURATION
 *
 * –¢–∏–ø—ã –±–æ—Ç–æ–≤, —Ñ–ª–æ—Ç—ã, AI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 */

module.exports = {
  // –¢–∏–ø—ã –±–æ—Ç–æ–≤ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  difficulties: {
    easy: {
      name: '–ü–∏—Ä–∞—Ç—Å–∫–∏–π —Å–∫–∞—É—Ç',
      nameEn: 'Pirate Scout',
      description: '–°–ª–∞–±—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
      fleet: [
        { tier: 1, type: 'FIGHTER', level: 1 }
      ],
      difficultyMultiplier: 0.8,  // -20% –∫–æ –≤—Å–µ–º —Å—Ç–∞—Ç–∞–º
      aiStrategy: 'random',
      rewardDifficulty: 'easy'
    },

    medium: {
      name: '–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ø–∞—Ç—Ä—É–ª—å',
      nameEn: 'Pirate Patrol',
      description: '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫',
      fleet: [
        { tier: 1, type: 'TANK', level: 2 },
        { tier: 1, type: 'FIGHTER', level: 2 },
        { tier: 2, type: 'FIGHTER', level: 1 }
      ],
      difficultyMultiplier: 1.0,
      aiStrategy: 'focus_weakest',
      rewardDifficulty: 'medium'
    },

    hard: {
      name: '–ü–∏—Ä–∞—Ç—Å–∫–∏–π —Ñ–ª–∞–≥–º–∞–Ω',
      nameEn: 'Pirate Flagship',
      description: '–°–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫',
      fleet: [
        { tier: 2, type: 'TANK', level: 3 },
        { tier: 2, type: 'FIGHTER', level: 3 },
        { tier: 2, type: 'FIGHTER', level: 3 },
        { tier: 3, type: 'BOMBER', level: 2 }
      ],
      difficultyMultiplier: 1.2,  // +20%
      aiStrategy: 'smart_targeting',
      rewardDifficulty: 'hard'
    }
  },

  // –û—Å–æ–±—ã–µ –±–æ—Ç—ã (—Å–æ–±—ã—Ç–∏—è)
  special: {
    daily_boss: {
      name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –î—Ä–µ–¥–Ω–æ—É—Ç',
      nameEn: 'Space Dreadnought',
      description: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ—Å—Å',
      fleet: [
        { tier: 3, type: 'TANK', level: 8 },
        { tier: 3, type: 'FIGHTER', level: 8 },
        { tier: 3, type: 'FIGHTER', level: 8 },
        { tier: 3, type: 'BOMBER', level: 8 },
        { tier: 3, type: 'SUPPORT', level: 8 }
      ],
      difficultyMultiplier: 1.5,  // +50%
      aiStrategy: 'smart_targeting',
      rewardDifficulty: 'boss',

      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
      availableOnce: true,        // 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å
      resetTime: '00:00',         // —Å–±—Ä–æ—Å –≤ –ø–æ–ª–Ω–æ—á—å
      requiresMinLevel: 5         // –º–∏–Ω. —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä–∞–±–ª—è
    },

    weekly_champion: {
      name: '–ß–µ–º–ø–∏–æ–Ω –∞—Ä–µ–Ω—ã',
      nameEn: 'Arena Champion',
      description: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –±–æ—Å—Å',
      fleet: [
        { tier: 3, type: 'TANK', level: 10 },
        { tier: 3, type: 'FIGHTER', level: 10 },
        { tier: 3, type: 'FIGHTER', level: 10 },
        { tier: 3, type: 'BOMBER', level: 10 },
        { tier: 3, type: 'SUPPORT', level: 10 }
      ],
      difficultyMultiplier: 2.0,  // x2
      aiStrategy: 'smart_targeting',
      rewardDifficulty: 'boss',
      rewardMultiplier: 3,        // x3 –Ω–∞–≥—Ä–∞–¥–∞

      availableOnce: true,
      resetTime: 'monday_00:00',
      requiresMinLevel: 8
    }
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI
  ai: {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏ (–º—Å) - –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    turnDelay: 1000,

    // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ AI (–ø—Ä–æ–º–∞—Ö –ø–æ —Å–ª–∞–±–æ–π —Ü–µ–ª–∏)
    mistakeChance: {
      easy: 0.2,    // 20% —à–∞–Ω—Å –æ—à–∏–±–∫–∏
      medium: 0.1,  // 10%
      hard: 0.05    // 5%
    },

    // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å (—à–∞–Ω—Å –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ –∑–∞—â–∏—Ç—ã)
    aggressiveness: {
      easy: 0.7,    // 70% –∞—Ç–∞–∫–∞
      medium: 0.8,
      hard: 0.9
    }
  },

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–ª–æ—Ç–∞ –±–æ—Ç–∞ (–¥–ª—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏)
  generateRandomFleet(difficulty, tier = 1) {
    const baseFleet = this.difficulties[difficulty].fleet;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ —É—Ä–æ–≤–Ω–∏ (¬±1)
    return baseFleet.map(ship => ({
      ...ship,
      level: Math.max(1, ship.level + Math.floor(Math.random() * 3) - 1)
    }));
  },

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫ —Ñ–ª–æ—Ç—É
  applyDifficultyModifier(ship, multiplier) {
    return {
      ...ship,
      hp: Math.floor(ship.hp * multiplier),
      maxHp: Math.floor(ship.maxHp * multiplier),
      damage: Math.floor(ship.damage * multiplier),
      armor: Math.floor(ship.armor * multiplier)
    };
  },

  // üî• –ù–û–í–û–ï: –†–∞—Å—á—ë—Ç —Å–∏–ª—ã —Ñ–ª–æ—Ç–∞
  calculateFleetPower(fleet) {
    return fleet.reduce((total, ship) => {
      // –§–æ—Ä–º—É–ª–∞: (HP + Damage√ó2 + Armor) √ó Tier
      const tier = ship.tier || 1;
      const shipPower = (ship.hp + ship.damage * 2 + (ship.armor || 0)) * tier;
      return total + shipPower;
    }, 0);
  },

  // üî• –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞ ¬±variance –æ—Ç —Å–∏–ª—ã –∏–≥—Ä–æ–∫–∞
  generateAdaptiveBot(playerFleet, variance = 0.05) {
    const shipsConfig = require('./ships.config');

    // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∏–ª—É —Ñ–ª–æ—Ç–∞ –∏–≥—Ä–æ–∫–∞
    const playerPower = this.calculateFleetPower(playerFleet);
    console.log(`‚öñÔ∏è –°–∏–ª–∞ —Ñ–ª–æ—Ç–∞ –∏–≥—Ä–æ–∫–∞: ${playerPower}`);

    // –¶–µ–ª–µ–≤–∞—è —Å–∏–ª–∞ –±–æ—Ç–∞: ¬±variance –æ—Ç —Å–∏–ª—ã –∏–≥—Ä–æ–∫–∞
    const randomMod = 1 + (Math.random() * variance * 2 - variance);
    const targetPower = playerPower * randomMod;
    console.log(`üéØ –¶–µ–ª–µ–≤–∞—è —Å–∏–ª–∞ –±–æ—Ç–∞: ${Math.floor(targetPower)} (${(randomMod * 100 - 100).toFixed(1)}%)`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–ª–æ—Ç –±–æ—Ç–∞
    const botFleet = [];
    let currentPower = 0;
    let shipIndex = 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π tier –∏–≥—Ä–æ–∫–∞
    const avgTier = playerFleet.length > 0
      ? playerFleet.reduce((sum, s) => sum + (s.tier || 1), 0) / playerFleet.length
      : 1;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–∞–±–ª–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º —Ü–µ–ª–µ–≤–æ–π —Å–∏–ª—ã
    while (currentPower < targetPower && botFleet.length < 5) {
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –∏ tier –±–ª–∏–∑–∫–∏–π –∫ –∏–≥—Ä–æ–∫—É
      const types = ['FIGHTER', 'TANK', 'BOMBER', 'SUPPORT'];
      const type = types[Math.floor(Math.random() * types.length)];
      const tier = Math.max(1, Math.min(3, Math.floor(avgTier + Math.random() * 2 - 1)));
      const level = Math.max(1, Math.floor(Math.random() * 5) + 1);

      // –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–∞–±–ª—å
      const stats = shipsConfig.calculateShipStats(tier, type, level);
      const ship = {
        id: `bot_${shipIndex++}`,
        ship_name: `–ë–æ—Ç ${type} T${tier}`,
        ...stats,
        maxHp: stats.hp,
        tier
      };

      botFleet.push(ship);
      currentPower = this.calculateFleetPower(botFleet);
    }

    console.log(`ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–ª–æ—Ç –±–æ—Ç–∞: ${botFleet.length} –∫–æ—Ä–∞–±–ª–µ–π, —Å–∏–ª–∞ ${currentPower}`);

    return {
      fleet: botFleet,
      power: currentPower,
      aiStrategy: 'smart_targeting',
      name: '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫'
    };
  }
};
