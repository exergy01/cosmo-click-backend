/**
 * üîß MODULE SYSTEM CONFIG - GALACTIC EMPIRE
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–¥—É–ª–µ–π
 */

/**
 * –¢–ò–ü–´ –ú–û–î–£–õ–ï–ô
 */
const MODULE_TYPES = {
  WEAPON: 'weapon',      // –û—Ä—É–∂–∏–µ (+attack)
  ARMOR: 'armor',        // –ë—Ä–æ–Ω—è (+defense)
  ENGINE: 'engine',      // –î–≤–∏–≥–∞—Ç–µ–ª—å (+speed)
  SHIELD: 'shield',      // –©–∏—Ç (+hp)
  REACTOR: 'reactor'     // –†–µ–∞–∫—Ç–æ—Ä (+–≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
};

/**
 * –ë–û–ù–£–°–´ –û–¢ –ú–û–î–£–õ–ï–ô –ü–û TIER
 * –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
 */
const MODULE_BONUSES = {
  weapon: {
    1: { attack: 10 },        // T1: +10 –∞—Ç–∞–∫–∏
    2: { attack: 25 },        // T2: +25 –∞—Ç–∞–∫–∏
    3: { attack: 50 }         // T3: +50 –∞—Ç–∞–∫–∏
  },
  armor: {
    1: { defense: 10 },       // T1: +10 –∑–∞—â–∏—Ç—ã
    2: { defense: 25 },       // T2: +25 –∑–∞—â–∏—Ç—ã
    3: { defense: 50 }        // T3: +50 –∑–∞—â–∏—Ç—ã
  },
  engine: {
    1: { speed: 5 },          // T1: +5 —Å–∫–æ—Ä–æ—Å—Ç–∏
    2: { speed: 12 },         // T2: +12 —Å–∫–æ—Ä–æ—Å—Ç–∏
    3: { speed: 25 }          // T3: +25 —Å–∫–æ—Ä–æ—Å—Ç–∏
  },
  shield: {
    1: { hp: 50 },            // T1: +50 HP
    2: { hp: 125 },           // T2: +125 HP
    3: { hp: 250 }            // T3: +250 HP
  },
  reactor: {
    1: { attack: 5, defense: 5, speed: 2, hp: 25 },      // T1: –º–∞–ª—ã–π –±–æ–Ω—É—Å –∫–æ –≤—Å–µ–º—É
    2: { attack: 12, defense: 12, speed: 5, hp: 60 },    // T2: —Å—Ä–µ–¥–Ω–∏–π –±–æ–Ω—É—Å
    3: { attack: 25, defense: 25, speed: 10, hp: 125 }   // T3: –±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å
  }
};

/**
 * –°–¢–û–ò–ú–û–°–¢–¨ –°–û–ó–î–ê–ù–ò–Ø –ú–û–î–£–õ–ï–ô
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
 */
const MODULE_CRAFT_COSTS = {
  weapon: {
    1: { luminios: 100, seconds: 300 },      // T1: 100 Lum, 5 –º–∏–Ω
    2: { luminios: 300, seconds: 1800 },     // T2: 300 Lum, 30 –º–∏–Ω
    3: { luminios: 800, seconds: 7200 }      // T3: 800 Lum, 2 —á–∞—Å–∞
  },
  armor: {
    1: { luminios: 100, seconds: 300 },
    2: { luminios: 300, seconds: 1800 },
    3: { luminios: 800, seconds: 7200 }
  },
  engine: {
    1: { luminios: 100, seconds: 300 },
    2: { luminios: 300, seconds: 1800 },
    3: { luminios: 800, seconds: 7200 }
  },
  shield: {
    1: { luminios: 150, seconds: 450 },      // –©–∏—Ç—ã –¥–æ—Ä–æ–∂–µ
    2: { luminios: 400, seconds: 2400 },
    3: { luminios: 1000, seconds: 9000 }
  },
  reactor: {
    1: { luminios: 200, seconds: 600 },      // –†–µ–∞–∫—Ç–æ—Ä—ã —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ
    2: { luminios: 600, seconds: 3600 },
    3: { luminios: 1500, seconds: 14400 }
  }
};

/**
 * –ü–û–õ–£–ß–ò–¢–¨ –ë–û–ù–£–°–´ –ú–û–î–£–õ–Ø
 * @param {string} moduleType - —Ç–∏–ø –º–æ–¥—É–ª—è
 * @param {number} moduleTier - tier –º–æ–¥—É–ª—è (1-3)
 * @returns {object} - –æ–±—ä–µ–∫—Ç —Å –±–æ–Ω—É—Å–∞–º–∏ {attack?, defense?, speed?, hp?}
 */
function getModuleBonuses(moduleType, moduleTier) {
  if (!MODULE_BONUSES[moduleType] || !MODULE_BONUSES[moduleType][moduleTier]) {
    return {};
  }
  return MODULE_BONUSES[moduleType][moduleTier];
}

/**
 * –†–ê–°–°–ß–ò–¢–ê–¢–¨ –§–ò–ù–ê–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –° –ú–û–î–£–õ–Ø–ú–ò
 * @param {object} baseStats - –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {hp, attack, defense, speed}
 * @param {array} modules - –º–∞—Å—Å–∏–≤ –º–æ–¥—É–ª–µ–π [{type, tier}, ...]
 * @returns {object} - —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
 */
function calculateStatsWithModules(baseStats, modules) {
  const finalStats = { ...baseStats };

  modules.forEach(module => {
    if (!module || !module.type || !module.tier) return;

    const bonuses = getModuleBonuses(module.type, module.tier);

    if (bonuses.attack) finalStats.attack += bonuses.attack;
    if (bonuses.defense) finalStats.defense += bonuses.defense;
    if (bonuses.speed) finalStats.speed += bonuses.speed;
    if (bonuses.hp) {
      finalStats.hp += bonuses.hp;
      finalStats.maxHp += bonuses.hp;
    }
  });

  return finalStats;
}

/**
 * –ü–û–õ–£–ß–ò–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ú–û–î–£–õ–ï
 * @param {string} moduleType
 * @param {number} moduleTier
 * @returns {object}
 */
function getModuleInfo(moduleType, moduleTier) {
  const bonuses = getModuleBonuses(moduleType, moduleTier);
  const craftCost = MODULE_CRAFT_COSTS[moduleType]?.[moduleTier];

  return {
    type: moduleType,
    tier: moduleTier,
    bonuses,
    craftCost,
    name: {
      ru: getModuleNameRu(moduleType, moduleTier),
      en: getModuleNameEn(moduleType, moduleTier)
    },
    icon: getModuleIcon(moduleType),
    color: getModuleColor(moduleTier)
  };
}

/**
 * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–ó–í–ê–ù–ò–ô –ò –ò–ö–û–ù–û–ö
 */
function getModuleNameRu(type, tier) {
  const names = {
    weapon: ['–õ—ë–≥–∫–æ–µ –æ—Ä—É–∂–∏–µ', '–°—Ä–µ–¥–Ω–µ–µ –æ—Ä—É–∂–∏–µ', '–¢—è–∂—ë–ª–æ–µ –æ—Ä—É–∂–∏–µ'],
    armor: ['–õ—ë–≥–∫–∞—è –±—Ä–æ–Ω—è', '–°—Ä–µ–¥–Ω—è—è –±—Ä–æ–Ω—è', '–¢—è–∂—ë–ª–∞—è –±—Ä–æ–Ω—è'],
    engine: ['–ë–∞–∑–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å', '–ö–≤–∞–Ω—Ç–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å'],
    shield: ['–ú–∞–ª—ã–π —â–∏—Ç', '–°—Ä–µ–¥–Ω–∏–π —â–∏—Ç', '–ë–æ–ª—å—à–æ–π —â–∏—Ç'],
    reactor: ['–ú–∞–ª—ã–π —Ä–µ–∞–∫—Ç–æ—Ä', '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∞–∫—Ç–æ—Ä', '–ë–æ–ª—å—à–æ–π —Ä–µ–∞–∫—Ç–æ—Ä']
  };
  return names[type]?.[tier - 1] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å';
}

function getModuleNameEn(type, tier) {
  const names = {
    weapon: ['Light Weapon', 'Medium Weapon', 'Heavy Weapon'],
    armor: ['Light Armor', 'Medium Armor', 'Heavy Armor'],
    engine: ['Basic Engine', 'Advanced Engine', 'Quantum Engine'],
    shield: ['Small Shield', 'Medium Shield', 'Large Shield'],
    reactor: ['Small Reactor', 'Medium Reactor', 'Large Reactor']
  };
  return names[type]?.[tier - 1] || 'Unknown Module';
}

function getModuleIcon(type) {
  const icons = {
    weapon: '‚öîÔ∏è',
    armor: 'üõ°Ô∏è',
    engine: 'üöÄ',
    shield: 'üí†',
    reactor: '‚ö°'
  };
  return icons[type] || 'üì¶';
}

function getModuleColor(tier) {
  const colors = {
    1: '#4ECDC4',  // Cyan (–±–∞–∑–æ–≤—ã–π)
    2: '#FFD700',  // Gold (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
    3: '#FF6B6B'   // Red (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)
  };
  return colors[tier] || '#999';
}

/**
 * –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–û–î–£–õ–Ø
 */
function isValidModule(moduleType, moduleTier) {
  return MODULE_BONUSES[moduleType] && MODULE_BONUSES[moduleType][moduleTier];
}

/**
 * –ü–û–õ–£–ß–ò–¢–¨ –°–¢–û–ò–ú–û–°–¢–¨ –°–û–ó–î–ê–ù–ò–Ø
 */
function getCraftCost(moduleType, moduleTier) {
  return MODULE_CRAFT_COSTS[moduleType]?.[moduleTier] || null;
}

/**
 * –≠–ö–°–ü–û–†–¢
 */
module.exports = {
  MODULE_TYPES,
  MODULE_BONUSES,
  MODULE_CRAFT_COSTS,
  getModuleBonuses,
  calculateStatsWithModules,
  getModuleInfo,
  isValidModule,
  getCraftCost
};
