// test-deposit.js - –¢–ï–°–¢–û–í–´–ï –°–ö–†–ò–ü–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–ï–ü–û–ó–ò–¢–û–í
const axios = require('axios');

const BASE_URL = 'https://cosmoclick-backend.onrender.com'; // –∏–ª–∏ 'http://localhost:5000'
const TEST_PLAYER_ID = '850758749'; // ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞

// üß™ –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –î–ï–ü–û–ó–ò–¢–û–í

// 1. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É
async function testCheckDepositByAddress() {
  if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/wallet/check-deposit-by-address`, {
      player_id: TEST_PLAYER_ID,
      expected_amount: null, // –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º —Å—É–º–º—É - –∏—â–µ–º –ª—é–±—ã–µ
      sender_address: null, // –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - –∏—â–µ–º –æ—Ç –ª—é–±–æ–≥–æ
      game_wallet: 'UQCOZZx-3RSxIVS2QFcuMBwDUZPWgh8FhRT7I6Qo_pqT-h60'
    });
    
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

// 2. –¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
async function testCheckAllDeposits() {
  if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/wallet/check-all-deposits`, {
      player_id: TEST_PLAYER_ID,
      sender_address: null // –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    });
    
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

// 3. –¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
async function testDebugDeposits() {
  if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/wallet/debug-deposits`, {
      player_id: TEST_PLAYER_ID
    });
    
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

// 4. –ú–∞–Ω—É–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ (–¢–û–õ–¨–ö–û –î–õ–Ø –≠–ö–°–¢–†–ï–ù–ù–´–• –°–õ–£–ß–ê–ï–í!)
async function testManualAddDeposit() {
  if (process.env.NODE_ENV === 'development') console.log('üö® –¢–µ—Å—Ç: –ú–∞–Ω—É–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞');
  if (process.env.NODE_ENV === 'development') console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö!');
  
  const fakeTransactionHash = `manual_${Date.now()}_${TEST_PLAYER_ID}`;
  
  try {
    const response = await axios.post(`${BASE_URL}/api/wallet/manual-add-deposit`, {
      player_id: TEST_PLAYER_ID,
      amount: 1.0, // 1 TON –¥–ª—è —Ç–µ—Å—Ç–∞
      transaction_hash: fakeTransactionHash,
      admin_key: 'cosmo_admin_2025' // –ê–¥–º–∏–Ω –∫–ª—é—á –∏–∑ .env
    });
    
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –û—Ç–≤–µ—Ç:', JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
async function checkPlayerBalance() {
  if (process.env.NODE_ENV === 'development') console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞');
  
  try {
    // –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ API, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const response = await axios.get(`${BASE_URL}/api/players/${TEST_PLAYER_ID}`);
    
    if (process.env.NODE_ENV === 'development') console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞:', {
      telegram_id: response.data.telegram_id,
      ton: parseFloat(response.data.ton || '0'),
      stars: parseInt(response.data.telegram_stars || '0')
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error.response?.data || error.message);
  }
}

// üöÄ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–û–í
async function runAllTests() {
  if (process.env.NODE_ENV === 'development') console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–µ–ø–æ–∑–∏—Ç–æ–≤...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  await checkPlayerBalance();
  if (process.env.NODE_ENV === 'development') console.log('\n' + '='.repeat(50) + '\n');
  
  // 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—Å–∞–º—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç)
  await testDebugDeposits();
  if (process.env.NODE_ENV === 'development') console.log('\n' + '='.repeat(50) + '\n');
  
  // 3. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
  await testCheckAllDeposits();
  if (process.env.NODE_ENV === 'development') console.log('\n' + '='.repeat(50) + '\n');
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É
  await testCheckDepositByAddress();
  if (process.env.NODE_ENV === 'development') console.log('\n' + '='.repeat(50) + '\n');
  
  if (process.env.NODE_ENV === 'development') console.log('üèÅ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

// üéØ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò TON API
async function testTonApis() {
  if (process.env.NODE_ENV === 'development') console.log('üß™ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ TON API...\n');
  
  const gameWallet = 'UQCOZZx-3RSxIVS2QFcuMBwDUZPWgh8FhRT7I6Qo_pqT-h60';
  
// –ó–∞–º–µ–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ apis –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check-deposit-by-address –Ω–∞ —ç—Ç–æ—Ç:

const apis = [
    {
      name: 'TonScan API',
      getData: async () => {
        logDeposit('INFO', '–ó–∞–ø—Ä–æ—Å –∫ TonScan API', { gameWalletAddress });
        const response = await axios.get(`https://tonscan.org/api/v2/getTransactions?address=${gameWalletAddress}&limit=50`, {
          timeout: 15000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; CosmoClick/1.0)'
          }
        });
        
        if (response.data && response.data.result) {
          logDeposit('SUCCESS', 'TonScan API —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç', { 
            transactions_count: response.data.result.length 
          });
          return response.data.result;
        }
        throw new Error('Invalid response format');
      }
    },
    {
      name: 'TON Center API (backup)',
      getData: async () => {
        logDeposit('INFO', '–ó–∞–ø—Ä–æ—Å –∫ TON Center API (backup)', { gameWalletAddress });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π endpoint –±–µ–∑ –∫–ª—é—á–∞
        const response = await axios.get('https://toncenter.com/api/v2/getTransactions', {
          params: {
            address: gameWalletAddress,
            limit: 50,
            archival: false
          },
          timeout: 20000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; CosmoClick/1.0)'
          }
        });
  
        if (response.data && response.data.result) {
          logDeposit('SUCCESS', 'TON Center API (backup) —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç', { 
            transactions_count: response.data.result.length 
          });
          return response.data.result;
        }
        throw new Error(response.data.error || 'API Error');
      }
    },
    {
      name: 'Direct TON RPC',
      getData: async () => {
        logDeposit('INFO', '–ó–∞–ø—Ä–æ—Å –∫ Direct TON RPC', { gameWalletAddress });
        
        const response = await axios.post('https://toncenter.com/api/v2/jsonRPC', {
          method: 'getTransactions',
          params: {
            address: gameWalletAddress,
            limit: 50
          },
          id: 1,
          jsonrpc: '2.0'
        }, {
          timeout: 20000,
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (compatible; CosmoClick/1.0)'
          }
        });
        
        if (response.data && response.data.result) {
          logDeposit('SUCCESS', 'Direct TON RPC —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç', { 
            transactions_count: response.data.result.length 
          });
          return response.data.result;
        }
        throw new Error('RPC Error');
      }
    }
  ];
    
  for (const api of apis) {
    try {
      const result = await api.test();
      if (process.env.NODE_ENV === 'development') console.log(`${api.name}: ${result}`);
    } catch (error) {
      if (process.env.NODE_ENV === 'development') console.log(`${api.name}: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${error.message})`);
    }
  }
}

// üìã –ú–ï–ù–Æ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –û–¢–î–ï–õ–¨–ù–´–• –¢–ï–°–¢–û–í
function showMenu() {
  if (process.env.NODE_ENV === 'development') console.log('\nüîß –ú–ï–ù–Æ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –î–ï–ü–û–ó–ò–¢–û–í:');
  if (process.env.NODE_ENV === 'development') console.log('1. runAllTests() - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã');
  if (process.env.NODE_ENV === 'development') console.log('2. testDebugDeposits() - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤');
  if (process.env.NODE_ENV === 'development') console.log('3. testCheckAllDeposits() - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫');
  if (process.env.NODE_ENV === 'development') console.log('4. testCheckDepositByAddress() - –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É');
  if (process.env.NODE_ENV === 'development') console.log('5. testTonApis() - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TON API');
  if (process.env.NODE_ENV === 'development') console.log('6. checkPlayerBalance() - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å');
  if (process.env.NODE_ENV === 'development') console.log('7. testManualAddDeposit() - üö® –ú–∞–Ω—É–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ\n');
  
  if (process.env.NODE_ENV === 'development') console.log('üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ Node.js:');
  if (process.env.NODE_ENV === 'development') console.log('   node test-deposit.js');
  if (process.env.NODE_ENV === 'development') console.log('   –∏–ª–∏ –≤—ã–∑—ã–≤–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏\n');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
module.exports = {
  testCheckDepositByAddress,
  testCheckAllDeposits,
  testDebugDeposits,
  testManualAddDeposit,
  checkPlayerBalance,
  testTonApis,
  runAllTests,
  showMenu
};

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  showMenu();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
  runAllTests().catch(console.error);
}